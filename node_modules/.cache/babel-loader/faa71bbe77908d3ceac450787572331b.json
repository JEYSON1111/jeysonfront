{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\content\\FormFormat\\Form.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\content\\FormFormat\\Form.vue","mtime":1712682815556},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\babel.config.js","mtime":1712682813877},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\.babelrc","mtime":1712682813750},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/laragon/www/PRY_NEW_JEYSON/LOCAL/plataformaprolipa_vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport _toConsumableArray from \"C:/laragon/www/PRY_NEW_JEYSON/LOCAL/plataformaprolipa_vue/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport InputModel from '@/models/InputModel';\nimport vSelect from 'vue-select';\nexport default {\n  components: {\n    vSelect: vSelect\n  },\n  props: {\n    area: {\n      type: Object,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      contenidos: [],\n      tipos: [{\n        name: \"Texto corto\",\n        type: \"texto corto\"\n      }, {\n        name: \"Menú de opciones\",\n        type: \"menu de opciones\"\n      }, {\n        name: \"Editor de texto\",\n        type: \"editor de texto\"\n      }]\n    };\n  },\n  methods: {\n    agregarContenido: function agregarContenido() {\n      this.contenidos.push(new InputModel('nombre del campo', 'texto corto', []));\n    },\n    removerContenido: function removerContenido(index) {\n      this.contenidos.splice(index, 1); // Remover el elemento del arreglo\n    },\n    agregarOpciones: function agregarOpciones(event, contenido) {\n      var valorInput = event; // El valor del input está directamente en event\n      if (valorInput.includes(',')) {\n        var opciones = valorInput.split(',');\n        contenido.opciones = [].concat(_toConsumableArray(contenido.opciones), _toConsumableArray(opciones)); // Agregar opciones\n        contenido.opciones = _toConsumableArray(new Set(contenido.opciones)); // Remover duplicados\n        contenido.opciones = contenido.opciones.filter(function (o) {\n          return o !== '';\n        }); // Remover vacíos\n      }\n    },\n    removerOpciones: function removerOpciones(opcion, contenido) {\n      contenido.opciones = contenido.opciones.filter(function (o) {\n        return o !== opcion;\n      }); // Remover la opción del arreglo\n    },\n    guardarFormato: function () {\n      var _guardarFormato = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var me;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              me = this;\n              me.$vs.loading(); // Muestra el indicador de carga\n\n              // Realiza una petición para guardar el formato del contenido\n              _context.next = 4;\n              return me.$http.post(\"\".concat(me.$server_url, \"contenido/formato/\").concat(this.$props.area.idarea, \"/store\"), {\n                area: this.$props.area,\n                contenidos: this.contenidos\n              }).then(function (res) {\n                me.$vs.notify({\n                  title: 'Éxito',\n                  text: res.data.message,\n                  color: 'success',\n                  position: 'top-right'\n                });\n              }).catch(function (err) {\n                me.$vs.loading.close();\n                me.$vs.notify({\n                  title: 'Error',\n                  text: err.message,\n                  color: 'danger',\n                  position: 'top-right'\n                });\n              }).finally(function () {\n                me.$vs.loading.close();\n                location.reload();\n              });\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function guardarFormato() {\n        return _guardarFormato.apply(this, arguments);\n      }\n      return guardarFormato;\n    }(),\n    obtenerFormato: function () {\n      var _obtenerFormato = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var me;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              me = this;\n              me.$vs.loading(); // Muestra el indicador de carga\n\n              // Realiza una petición para obtener el formato del contenido\n              _context2.next = 4;\n              return me.$http.get(\"\".concat(me.$server_url, \"contenidos/formatos?areaId=\").concat(me.$props.area.idarea)).then(function (res) {\n                var data = res.data.data; // Asigna los datos obtenidos a la variable 'data'\n                me.contenidos = JSON.parse(data.contenidoformato); // Parsea la cadena JSON a un objeto\n              }).catch(function (err) {\n                me.$vs.notify({\n                  title: 'Error',\n                  text: err.message,\n                  color: 'danger',\n                  position: 'top-right'\n                });\n              }).finally(function () {\n                me.$vs.loading.close(); // Cierra el indicador de carga\n              });\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function obtenerFormato() {\n        return _obtenerFormato.apply(this, arguments);\n      }\n      return obtenerFormato;\n    }()\n  },\n  mounted: function mounted() {\n    this.obtenerFormato(); // Obtiene el formato del contenido\n  }\n};",{"version":3,"names":["InputModel","vSelect","components","props","area","type","Object","required","data","contenidos","tipos","name","methods","agregarContenido","push","removerContenido","index","splice","agregarOpciones","event","contenido","valorInput","includes","opciones","split","concat","_toConsumableArray","Set","filter","o","removerOpciones","opcion","guardarFormato","_guardarFormato","_asyncToGenerator","regeneratorRuntime","mark","_callee","me","wrap","_callee$","_context","prev","next","$vs","loading","$http","post","$server_url","$props","idarea","then","res","notify","title","text","message","color","position","catch","err","close","finally","location","reload","stop","apply","arguments","obtenerFormato","_obtenerFormato","_callee2","_callee2$","_context2","get","JSON","parse","contenidoformato","mounted"],"sources":["src/views/biblioteca/content/FormFormat/Form.vue"],"sourcesContent":["<template>\r\n  <div class=\"w-full h-full\">\r\n    <div v-if=\"contenidos.length === 0\" class=\"mb-4\">\r\n      <span>\r\n        Agrega los elementos que deberá contener el formato para guardar contenido relacionado al área de\r\n        <span class=\"text-indigo-900 font-bold\">{{ area.nombrearea }}</span>\r\n      </span>\r\n    </div>\r\n    <div class=\"flex flex-col space-y-2\">\r\n      <div v-for=\"(contenido, index) in contenidos\" :key=\"index\" class=\"w-full p-2 my-2 rounded shadow\">\r\n        <div class=\"flex justify-between items-baseline\">\r\n          <span>{{ contenido.label === '' ? 'Aquí va el nombre del campo' : contenido.label }}</span>\r\n          <vs-button type=\"border\" color=\"danger\" class=\"p-1 flex justify-center items-center\"\r\n            @click=\"removerContenido(index)\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#EA5455\" height=\"1em\" viewBox=\"0 0 512 512\">\r\n              <path\r\n                d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z\" />\r\n            </svg>\r\n            &nbsp;\r\n            Remover\r\n          </vs-button>\r\n        </div>\r\n        <vs-divider class=\"mb-6 bt-2\" />\r\n        <vs-input label-placeholder=\"Nombre del campo (label)\" v-model=\"contenido.label\" class=\"w-full\" />\r\n        <v-select class=\"w-full\" label=\"name\" :options=\"tipos\" :reduce=\"tipos => tipos.type\" v-model=\"contenido.tipo\">\r\n          <template #header>Tipo de campo</template>\r\n        </v-select>\r\n        <div v-if=\"contenido.tipo === 'menu de opciones'\">\r\n          <span class=\"font-bold\">Agregar opciones <span class=\"text-xs text-gray font-light\">(separar con\r\n              \",\")</span></span>\r\n          <vs-input class=\"w-full\" @input=\"agregarOpciones($event, contenido)\"></vs-input>\r\n          <vs-chip v-for=\"(opcion, index) in contenido.opciones\" :key=\"index\" closable class=\"my-4 mr-2\"\r\n            @click=\"removerOpciones(opcion, contenido)\">\r\n            <span class=\"text-black font-semibold\">{{ opcion }}</span>\r\n          </vs-chip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div @click=\"agregarContenido\"\r\n      class=\"w-full border border-gray-500 p-4 shadow dotted-border rounded flex justify-center space-x-4 items-center\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"mr-4\" height=\"1em\" viewBox=\"0 0 512 512\">\r\n        <path\r\n          d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM232 344V280H168c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V168c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H280v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z\" />\r\n      </svg>\r\n      Agregar elemento\r\n    </div>\r\n    <div class=\"flex justify-end mt-4\">\r\n      <vs-button type=\"border\" @click=\"guardarFormato\">Guardar</vs-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport InputModel from '@/models/InputModel';\r\nimport vSelect from 'vue-select';\r\nexport default ({\r\n  components: {\r\n    vSelect,\r\n  },\r\n  props: {\r\n    area: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      contenidos: [],\r\n      tipos: [\r\n        {\r\n          name: \"Texto corto\",\r\n          type: \"texto corto\",\r\n        },\r\n        {\r\n          name: \"Menú de opciones\",\r\n          type: \"menu de opciones\",\r\n        },\r\n        {\r\n          name: \"Editor de texto\",\r\n          type: \"editor de texto\",\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    agregarContenido() {\r\n      this.contenidos.push(\r\n        new InputModel(\r\n          'nombre del campo',\r\n          'texto corto',\r\n          [],\r\n        )\r\n      );\r\n    },\r\n    removerContenido(index) {\r\n      this.contenidos.splice(index, 1); // Remover el elemento del arreglo\r\n    },\r\n    agregarOpciones(event, contenido) {\r\n      const valorInput = event; // El valor del input está directamente en event\r\n      if (valorInput.includes(',')) {\r\n        const opciones = valorInput.split(',');\r\n        contenido.opciones = [...contenido.opciones, ...opciones]; // Agregar opciones\r\n        contenido.opciones = [...new Set(contenido.opciones)]; // Remover duplicados\r\n        contenido.opciones = contenido.opciones.filter((o) => o !== ''); // Remover vacíos\r\n      }\r\n    },\r\n    removerOpciones(opcion, contenido) {\r\n      contenido.opciones = contenido.opciones.filter((o) => o !== opcion); // Remover la opción del arreglo\r\n    },\r\n    async guardarFormato() {\r\n      const me = this;\r\n\r\n      me.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para guardar el formato del contenido\r\n      await me.$http.post(`${me.$server_url}contenido/formato/${this.$props.area.idarea}/store`, {\r\n        area: this.$props.area,\r\n        contenidos: this.contenidos\r\n      }).then((res) => {\r\n        me.$vs.notify({\r\n          title: 'Éxito',\r\n          text: res.data.message,\r\n          color: 'success',\r\n          position: 'top-right',\r\n        });\r\n      }).catch((err) => {\r\n        me.$vs.loading.close();\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close();\r\n        location.reload();\r\n      })\r\n    },\r\n    async obtenerFormato() {\r\n      const me = this;\r\n\r\n      me.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para obtener el formato del contenido\r\n      await me.$http.get(`${me.$server_url}contenidos/formatos?areaId=${me.$props.area.idarea}`).then((res) => {\r\n        const data = res.data.data; // Asigna los datos obtenidos a la variable 'data'\r\n        me.contenidos = JSON.parse(data.contenidoformato); // Parsea la cadena JSON a un objeto\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close(); // Cierra el indicador de carga\r\n      });\r\n    },\r\n  },\r\n  mounted() {\r\n    this.obtenerFormato(); // Obtiene el formato del contenido\r\n  }\r\n})\r\n</script>\r\n\r\n<style>\r\n.dotted-border {\r\n  border: 1px dashed #ccc;\r\n}\r\n\r\n.dotted-border:hover {\r\n  border: 1px dashed #000;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]}]}