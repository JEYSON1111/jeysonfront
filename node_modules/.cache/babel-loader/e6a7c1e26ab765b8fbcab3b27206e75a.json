{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\GenerateCodigos.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\GenerateCodigos.vue","mtime":1712682815620},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\babel.config.js","mtime":1712682813877},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\.babelrc","mtime":1712682813750},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["export default {\n  name: 'GenerateCodigosVue',\n  data: function data() {\n    return {\n      usuario: [],\n      arregloLibros: [],\n      codigosGenerado: [],\n      codigosVerificados: [],\n      estado_codigo_fisico: 2,\n      verCodigos: false,\n      porcentaje: 0,\n      //variables de excel\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\n      cellAutoWidth: true,\n      selectedFormat: 'xlsx'\n    };\n  },\n  computed: {\n    sumaSelect: function sumaSelect() {\n      var me = this;\n      var filter = [];\n      var suma = 0;\n      filter = me.arregloLibros.filter(function (p) {\n        return p.cantidad > 0;\n      });\n      if (filter.length > 0) {\n        var total = filter.reduce(function (a, b) {\n          return parseInt(a) + parseInt(b[\"cantidad\"] || 0);\n        }, 0);\n        suma = suma + total;\n      } else {\n        return 0;\n      }\n      return suma;\n    }\n  },\n  created: function created() {\n    var me = this;\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n  },\n  mounted: function mounted() {\n    var me = this;\n    me.getLibros();\n  },\n  methods: {\n    getLibros: function getLibros() {\n      var me = this;\n      me.porcentaje = 0;\n      this.$http.get(this.$server_url + \"libros_series\").then(function (res) {\n        me.arregloLibros = res.data;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    openConfirm: function openConfirm() {\n      this.porcentaje = 0;\n      this.$vs.dialog({\n        type: 'confirm',\n        color: 'danger',\n        title: \"Confirm\",\n        text: 'Esta seguro de generar estos códigos?',\n        accept: this.generarCodigos\n      });\n    },\n    generarCodigos: function generarCodigos() {\n      var me = this;\n      var formData = new FormData();\n      //enviar solo los que tienen mayor a 0\n      var filter = [];\n      filter = me.arregloLibros.filter(function (p) {\n        return p.cantidad > 0;\n      });\n      formData.append('responsable', me.usuario.idusuario);\n      formData.append('data_codigos', JSON.stringify(filter));\n      formData.append('estado_codigo_fisico', me.estado_codigo_fisico);\n      me.$vs.loading();\n      this.$http.post(this.$server_url + 'generarCodigosUnicos', formData).then(function (res) {\n        me.$vs.loading.close();\n        me.codigosGenerado = res.data.codigos;\n        me.codigosVerificados = res.data.codigosVerificados;\n        if (me.codigosVerificados.length > 0) {\n          me.verCodigos = true;\n        }\n        me.porcentaje = res.data.porcentaje;\n        me.exportToExcel();\n        me.$vs.notify({\n          text: 'Se guardo correctamente',\n          color: 'success',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        }).catch(function (error) {\n          me.$vs.loading.close();\n        });\n      });\n    },\n    exportToExcel: function exportToExcel() {\n      var _this = this;\n      var headerTitle = ['codigo', 'libro'];\n      var headerVal = ['codigo', 'libro'];\n      var codigoSelectedMayus = this.codigosGenerado;\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\n        for (var key in codigoSelectedMayus[i]) {\n          if (typeof codigoSelectedMayus[i][key] == \"string\") {\n            codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\n          }\n        }\n      }\n      import('@/vendor/Export2Excel').then(function (excel) {\n        var list = codigoSelectedMayus;\n        var data = _this.formatJson(headerVal, list);\n        excel.export_json_to_excel({\n          header: headerTitle,\n          data: data,\n          filename: 'Codigos generados',\n          autoWidth: _this.cellAutoWidth,\n          bookType: _this.selectedFormat\n        });\n        _this.clearFields();\n        _this.guardarActivo = '';\n        _this.generarActivo = ' ';\n        _this.textAlertCant = '';\n        _this.cantidad = '';\n        _this.codigoSelected = [];\n      });\n    },\n    formatJson: function formatJson(filterVal, jsonData) {\n      return jsonData.map(function (v) {\n        return filterVal.map(function (j) {\n          return v[j];\n        });\n      });\n    }\n  }\n};",{"version":3,"names":["name","data","usuario","arregloLibros","codigosGenerado","codigosVerificados","estado_codigo_fisico","verCodigos","porcentaje","formats","cellAutoWidth","selectedFormat","computed","sumaSelect","me","filter","suma","p","cantidad","length","total","reduce","a","b","parseInt","created","JSON","parse","localStorage","getItem","mounted","getLibros","methods","$http","get","$server_url","then","res","catch","error","console","log","openConfirm","$vs","dialog","type","color","title","text","accept","generarCodigos","formData","FormData","append","idusuario","stringify","loading","post","close","codigos","exportToExcel","notify","iconPack","icon","_this","headerTitle","headerVal","codigoSelectedMayus","i","key","toUpperCase","excel","list","formatJson","export_json_to_excel","header","filename","autoWidth","bookType","clearFields","guardarActivo","generarActivo","textAlertCant","codigoSelected","filterVal","jsonData","map","v","j"],"sources":["src/views/codigos/components/GenerateCodigos.vue"],"sourcesContent":["<template>\r\n  <vx-card\r\n  title=\"Generaración de códigos\"\r\n  title-color=\"primary\" subtitle=\"Ingrese el valor de los libros que desea generar\"\r\n  >\r\n  <p class=\"text-success font-bold\"><i class=\"fa-solid fa-code\"></i> {{sumaSelect}} códigos seleccionados</p>\r\n  <vs-divider></vs-divider>\r\n  <vs-alert class=\"mt-4\" v-if=\"(porcentaje > 0)\">Se generaron {{porcentaje}} codigos</vs-alert>\r\n  <div class=\"flex\">\r\n    <vs-button color=\"success\" class=\"mt-5\"  type=\"gradient\" @click=\"openConfirm()\">Generar códigos</vs-button>\r\n    <vs-button color=\"warning\" class=\"mt-5 ml-2\" type=\"gradient\" @click=\"getLibros()\">Resetear</vs-button>\r\n    <ul class=\"flex ml-4\" style=\"margin-top: 30px;\">\r\n      <li>\r\n        <vs-radio v-model=\"estado_codigo_fisico\" vs-name=\"radios1\" vs-value=\"2\">Desprendido</vs-radio>\r\n      </li>\r\n      <li>\r\n        <vs-radio v-model=\"estado_codigo_fisico\" class=\"ml-2\" vs-name=\"radios1\" vs-value=\"1\">Liquidado</vs-radio>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n    <vs-table max-items=\"50\" search pagination :data=\"arregloLibros\">\r\n      <template slot=\"header\">\r\n        <div>\r\n        <p>Cantidad: <span>{{arregloLibros.length}}</span> </p>\r\n        </div>\r\n      </template>\r\n      <template slot=\"thead\">\r\n          <vs-th>Libro</vs-th>\r\n          <vs-th>Acciones</vs-th>\r\n      </template>\r\n      <template slot-scope=\"{data}\">\r\n        <vs-tr :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n          <vs-td>\r\n            {{ tr.nombrelibro }} <br>\r\n            <small>{{tr.codigo_liquidacion}}</small>\r\n          </vs-td>\r\n          <vs-td>\r\n            <vs-input icon-after=\"true\" label-placeholder=\"icon-after\" min=\"0\" type=\"number\" icon=\"mode_edit\" placeholder=\"Cantidad a generar\" v-model=\"tr.cantidad\"/>\r\n          </vs-td>\r\n        </vs-tr>\r\n      </template>\r\n    </vs-table>\r\n    <!--MODALES-->\r\n    <vs-popup class=\"holamundo\"  :title=\"porcentaje +' Codigos generados'\" :active.sync=\"verCodigos\">\r\n      <vs-table max-items=\"10\" search pagination :data=\"codigosVerificados\">\r\n          <template slot=\"header\">\r\n            <vs-chip color=\"primary\">Cantidad: {{codigosVerificados.length}}</vs-chip>\r\n          </template>\r\n          <template slot=\"thead\">\r\n            <vs-th>Codigo</vs-th>\r\n            <vs-th>libro</vs-th>\r\n            <vs-th>Fecha create</vs-th>\r\n            <vs-th>Estado fisico</vs-th>\r\n          </template>\r\n          <template slot-scope=\"{data}\">\r\n            <vs-tr :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n              <vs-td>\r\n                {{data[indextr].codigo}}<br>\r\n              </vs-td>\r\n              <vs-td>\r\n                {{data[indextr].libro}}<br>\r\n              </vs-td>\r\n              <vs-td>\r\n                {{data[indextr].fecha_create}}<br>\r\n              </vs-td>\r\n              <vs-td>\r\n                <vs-chip color=\"primary\" v-if=\"tr.estado_codigo_fisico == 1\">Uso Liquidado</vs-chip>\r\n                <vs-chip color=\"success\" v-if=\"tr.estado_codigo_fisico == 2\">Uso Desprendidos</vs-chip>\r\n                <vs-chip v-if=\"tr.estado_codigo_fisico == 0\">uso normal</vs-chip>\r\n              </vs-td>\r\n            </vs-tr>\r\n          </template>\r\n      </vs-table>\r\n    </vs-popup>\r\n  </vx-card>\r\n</template>\r\n<script>\r\nexport default{\r\n  name:'GenerateCodigosVue',\r\n  data(){\r\n    return{\r\n      usuario:[],\r\n      arregloLibros:[],\r\n      codigosGenerado:[],\r\n      codigosVerificados:[],\r\n      estado_codigo_fisico:2,\r\n      verCodigos:false,\r\n      porcentaje:0,\r\n      //variables de excel\r\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n      cellAutoWidth: true,\r\n      selectedFormat: 'xlsx',\r\n    }\r\n  },\r\n  computed:{\r\n    sumaSelect(){\r\n        let me = this;\r\n        let filter = []\r\n        var suma = 0;\r\n        filter = me.arregloLibros.filter(p => p.cantidad > 0)\r\n        if(filter.length >0){\r\n            let total = filter.reduce((a, b) => parseInt(a) + parseInt((b[\"cantidad\"] || 0)), 0);\r\n            suma = suma+ total;\r\n        }else{\r\n            return 0;\r\n        }\r\n        return suma;\r\n    },\r\n  },\r\n  created(){\r\n    let me = this;\r\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n  },\r\n  mounted(){\r\n    let me = this;\r\n    me.getLibros()\r\n  },\r\n  methods:{\r\n    getLibros() {\r\n      let me = this\r\n      me.porcentaje = 0;\r\n      this.$http.get(this.$server_url+`libros_series`).then(res => {\r\n        me.arregloLibros = res.data;\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error)\r\n      })\r\n    },\r\n    openConfirm(){\r\n      this.porcentaje = 0;\r\n      this.$vs.dialog({\r\n        type:'confirm',\r\n        color: 'danger',\r\n        title: `Confirm`,\r\n        text: 'Esta seguro de generar estos códigos?',\r\n        accept:this.generarCodigos\r\n      })\r\n    },\r\n    generarCodigos(){\r\n      let me = this;\r\n      let formData = new FormData();\r\n      //enviar solo los que tienen mayor a 0\r\n      let filter = []\r\n      filter = me.arregloLibros.filter(p => p.cantidad > 0)\r\n      formData.append('responsable',  me.usuario.idusuario);\r\n      formData.append('data_codigos', JSON.stringify(filter));\r\n      formData.append('estado_codigo_fisico',me.estado_codigo_fisico)\r\n      me.$vs.loading()\r\n        this.$http.post(this.$server_url+'generarCodigosUnicos', formData)\r\n        .then(res => {\r\n          me.$vs.loading.close()\r\n          me.codigosGenerado = res.data.codigos\r\n          me.codigosVerificados = res.data.codigosVerificados\r\n          if(me.codigosVerificados.length > 0){\r\n            me.verCodigos = true;\r\n          }\r\n          me.porcentaje      = res.data.porcentaje\r\n          me.exportToExcel()\r\n          me.$vs.notify({\r\n          text:'Se guardo correctamente',\r\n          color:'success',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'\r\n        })\r\n        .catch(function (error) {\r\n            me.$vs.loading.close()\r\n        })\r\n      })\r\n    },\r\n    exportToExcel() {\r\n      let headerTitle = ['codigo','libro'];\r\n      let headerVal = ['codigo', 'libro',];\r\n      let codigoSelectedMayus = this.codigosGenerado\r\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n        for (var key in codigoSelectedMayus[i]) {\r\n          if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n            codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n          }\r\n        }\r\n      }\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const list = codigoSelectedMayus\r\n        const data = this.formatJson(headerVal, list)\r\n        excel.export_json_to_excel({\r\n          header: headerTitle,\r\n          data,\r\n          filename: 'Codigos generados',\r\n          autoWidth: this.cellAutoWidth,\r\n          bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n        this.guardarActivo = '';\r\n        this.generarActivo = ' ';\r\n        this.textAlertCant = '';\r\n        this.cantidad = '';\r\n        this.codigoSelected = [];\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n      return jsonData.map(v => filterVal.map(j => {\r\n        return v[j]\r\n      }))\r\n    },\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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","ignoreList":[]}]}