{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\PreguntasInstituciones\\AsignarPreguntas.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\PreguntasInstituciones\\AsignarPreguntas.vue","mtime":1712682815862},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\babel.config.js","mtime":1712682813877},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\.babelrc","mtime":1712682813750},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import vSelect from 'vue-select';\nvar TablaPreguntasVue = function TablaPreguntasVue() {\n  return import(\"./TablaPreguntas.vue\");\n};\nvar ConfirmEliminarVue = function ConfirmEliminarVue() {\n  return import(\"../../configuracion/Reutilizable/ConfirmEliminar.vue\");\n};\nexport default {\n  components: {\n    'v-select': vSelect,\n    TablaPreguntasVue: TablaPreguntasVue,\n    ConfirmEliminarVue: ConfirmEliminarVue\n  },\n  data: function data() {\n    return {\n      asignaturaSelected: '',\n      asignaturas: [],\n      asignatura: {\n        id: '',\n        label: ''\n      },\n      arrayPreguntas: [],\n      arrayPreguntasSelected: [],\n      pregSelected: '',\n      show: false,\n      usuario: [],\n      popupAsignar: false,\n      institucionSelected: '',\n      popupConfirm: false,\n      popupNoAsignadas: false\n    };\n  },\n  props: {\n    arrayInstituciones: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    asignaturas: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  created: function created() {\n    var me = this;\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n  },\n  mounted: function mounted() {\n    var me = this;\n  },\n  methods: {\n    changeConfirm: function changeConfirm(e) {\n      var me = this;\n      //cancelar\n      if (e == 0) {\n        me.popupConfirm = false;\n      }\n      //asignar\n      if (e == 1) {\n        me.asignarPreguntas();\n      }\n    },\n    asignarPreguntas: function asignarPreguntas() {\n      var me = this;\n      me.arrayNoIngresadas = [];\n      if (me.institucionSelected == null || me.institucionSelected == '') {\n        me.$vs.notify({\n          title: 'Error',\n          text: 'Debe seleccionar una institución',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'danger'\n        });\n        return;\n      }\n      me.$vs.loading();\n      var formData = new FormData();\n      formData.append('institucion_id', me.institucionSelected);\n      formData.append('user_created', me.usuario.idusuario);\n      formData.append('arrayPreguntas', JSON.stringify(me.arrayPreguntasSelected));\n      this.$http.post(this.$server_url + 'asignar_preguntas_institucion', formData).then(function (res) {\n        me.$vs.loading.close();\n        //si no se asignaron preguntas\n        me.popupAsignar = false;\n        me.popupConfirm = false;\n        if (res.data.preguntasIngresadas == 0) {\n          me.$vs.notify({\n            title: 'Error',\n            text: 'Preguntas ya asignadas con anterioridad',\n            iconPack: 'feather',\n            icon: 'icon-alert-circle',\n            color: 'danger'\n          });\n        } else {\n          //si se asignaron preguntas\n          me.$vs.notify({\n            title: 'Exito',\n            text: \"\".concat(res.data.preguntasIngresadas, \" Preguntas  asignadas correctamente\"),\n            iconPack: 'feather',\n            icon: 'icon-check',\n            color: 'success',\n            time: 6000\n          });\n        }\n        //preguntas que no se asignaron que estan ingresada\n        if (res.data.preguntasYaIngresadas.length > 0) {\n          me.checkPreguntasIngresadas(res.data.preguntasYaIngresadas);\n        }\n      }).catch(function (error) {\n        console.log(error);\n        me.$vs.loading.close();\n        me.$vs.notify({\n          title: 'Error',\n          text: 'Error al asignar las preguntas',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'danger'\n        });\n      });\n    },\n    checkPreguntasIngresadas: function checkPreguntasIngresadas(preguntas) {\n      var me = this;\n      me.arrayNoIngresadas = preguntas;\n      me.popupNoAsignadas = true;\n    },\n    changeAsignar: function changeAsignar(e, datos) {\n      this.arrayPreguntasSelected = datos;\n      this.popupAsignar = true;\n    },\n    filtrarPreguntas: function filtrarPreguntas() {\n      var me = this;\n      me.arrayPreguntas = [];\n      if (me.asignaturaSelected == null || me.asignaturaSelected == '') {\n        me.$vs.notify({\n          title: 'Error',\n          text: 'Debe seleccionar una asignatura',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'danger'\n        });\n        return;\n      }\n      me.$vs.loading();\n      var formData = new FormData();\n      formData.append('asignatura', me.asignaturaSelected.id);\n      formData.append('idusuario', me.usuario.idusuario);\n      this.$http.post(this.$server_url + 'temas_preguntas_respuestas', formData).then(function (res) {\n        me.$vs.loading.close();\n        me.arrayPreguntas = res.data;\n        //si esta vacio el array mostrar un alert\n        if (me.arrayPreguntas.length == 0) {\n          me.$vs.notify({\n            title: 'Error',\n            text: 'No hay preguntas para esta asignatura',\n            iconPack: 'feather',\n            icon: 'icon-alert-circle',\n            color: 'danger'\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n        me.$vs.loading.close();\n        me.$vs.notify({\n          title: 'Error',\n          text: 'Error al cargar las preguntas',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'danger'\n        });\n      });\n    }\n  }\n};",{"version":3,"names":["vSelect","TablaPreguntasVue","ConfirmEliminarVue","components","data","asignaturaSelected","asignaturas","asignatura","id","label","arrayPreguntas","arrayPreguntasSelected","pregSelected","show","usuario","popupAsignar","institucionSelected","popupConfirm","popupNoAsignadas","props","arrayInstituciones","type","Array","default","_default","created","me","JSON","parse","localStorage","getItem","mounted","methods","changeConfirm","e","asignarPreguntas","arrayNoIngresadas","$vs","notify","title","text","iconPack","icon","color","loading","formData","FormData","append","idusuario","stringify","$http","post","$server_url","then","res","close","preguntasIngresadas","concat","time","preguntasYaIngresadas","length","checkPreguntasIngresadas","catch","error","console","log","preguntas","changeAsignar","datos","filtrarPreguntas"],"sources":["src/views/evaluaciones/PreguntasInstituciones/AsignarPreguntas.vue"],"sourcesContent":["<template>\r\n  <vx-card class='vx-col w-full mt-4'>\r\n    <div class=\"vx-row mb-5 mt-4\">\r\n        <div class=\"vx-col sm:w-1/2 w-full\">\r\n            Seleccionar asignatura:\r\n            <v-select class=\"mb-2\" v-model=\"asignaturaSelected\" :options=\"asignaturas\" @input=\"filtrarPreguntas()\" />\r\n        </div>\r\n    </div>\r\n    <div>\r\n      <TablaPreguntasVue :arrayPreguntas=\"arrayPreguntas\" @changeAsignar=\"changeAsignar\"/>\r\n    </div>\r\n    <!--MODLALES-->\r\n    <!--MODLAL PARA ASIGNAR A INSTITUCION-->\r\n    <vs-popup classContent=\"popup-example\" title=\"Preguntas que seras asignadas\" :active.sync=\"popupAsignar\" fullscreen>\r\n      <!--select de institucion-->\r\n      <div class=\"vx-row mb-6\">\r\n        <div class=\"vx-col sm:w-1/3 w-full\">\r\n          <span>Seleccione la institución</span>\r\n        </div>\r\n        <div class=\"vx-col sm:w-2/3 w-full\">\r\n          <v-select :options=\"arrayInstituciones\" :reduce=\"arrayInstituciones => arrayInstituciones.idinstitucion\" label=\"nombreinstitucion\" class=\"w-full\" v-model=\"institucionSelected\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"flex justify-center\">\r\n        <vs-button color=\"rgb(11, 189, 135)\" v-if=\"institucionSelected\" @click=\"popupConfirm=true;\" type=\"border\" icon=\"check\">Asignar preguntas a la institución</vs-button>\r\n      </div>\r\n      <vs-divider>{{arrayPreguntasSelected.length}} Preguntas que seras asignadas (?)</vs-divider>\r\n      <TablaPreguntasVue v-if=\"popupAsignar\" btnAsignar=\"0\" :arrayPreguntas=\"arrayPreguntasSelected\" :isMultipleEnabled=\"Boolean(false)\"/>\r\n      <!--POPOP DE CONFIRMACION-->\r\n      <vs-popup title=\"Confirmación\" :active.sync=\"popupConfirm\">\r\n        <ConfirmEliminarVue otroValor=\"1\" title=\"Estás seguro de asignar estas preguntas a la institución?\" subtitle=\"Si, deseo asignar\" @changeConfirm=\"changeConfirm\"/>\r\n      </vs-popup>\r\n    </vs-popup>\r\n    <!--MODAL PARA MOSTRAR PREGUNTAS QUE NO SE ASIGNARON-->\r\n    <vs-popup classContent=\"popup-example\" title=\"preguntas ya asignadas con anterioridad\" :active.sync=\"popupNoAsignadas\" fullscreen>\r\n      <TablaPreguntasVue v-if=\"popupNoAsignadas\" :arrayPreguntas=\"arrayNoIngresadas\" :isMultipleEnabled=\"Boolean(false)\"/>\r\n    </vs-popup>\r\n  </vx-card>\r\n  </template>\r\n\r\n  <script>\r\n  import vSelect from 'vue-select'\r\n  const TablaPreguntasVue   = () => import('./TablaPreguntas.vue')\r\n  const ConfirmEliminarVue  = () => import('../../configuracion/Reutilizable/ConfirmEliminar.vue');\r\n  export default {\r\n      components: {\r\n        'v-select': vSelect,\r\n        TablaPreguntasVue,\r\n        ConfirmEliminarVue\r\n      },\r\n      data() {\r\n          return {\r\n              asignaturaSelected: '',\r\n              asignaturas: [],\r\n              asignatura: {\r\n                  id: '',\r\n                  label: ''\r\n              },\r\n              arrayPreguntas: [],\r\n              arrayPreguntasSelected: [],\r\n              pregSelected: '',\r\n              show: false,\r\n              usuario:[],\r\n              popupAsignar:false,\r\n              institucionSelected:'',\r\n              popupConfirm:false,\r\n              popupNoAsignadas:false,\r\n          };\r\n      },\r\n      props: {\r\n        arrayInstituciones: {\r\n          type: Array,\r\n          default: () => []\r\n        },\r\n        asignaturas: {\r\n          type: Array,\r\n          default: () => []\r\n        }\r\n      },\r\n      created() {\r\n          let me = this;\r\n          me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n      },\r\n      mounted() {\r\n          let me = this;\r\n      },\r\n      methods: {\r\n        changeConfirm(e){\r\n          let me = this;\r\n          //cancelar\r\n          if(e == 0) { me.popupConfirm = false;  }\r\n          //asignar\r\n          if(e == 1) { me.asignarPreguntas(); }\r\n        },\r\n        asignarPreguntas(){\r\n          let me = this;\r\n          me.arrayNoIngresadas = []\r\n          if(me.institucionSelected == null || me.institucionSelected == ''){\r\n            me.$vs.notify({\r\n              title: 'Error',\r\n              text: 'Debe seleccionar una institución',\r\n              iconPack: 'feather',\r\n              icon: 'icon-alert-circle',\r\n              color: 'danger'\r\n            })\r\n            return\r\n          }\r\n          me.$vs.loading()\r\n          const formData = new FormData();\r\n          formData.append('institucion_id', me.institucionSelected);\r\n          formData.append('user_created',   me.usuario.idusuario);\r\n          formData.append('arrayPreguntas', JSON.stringify(me.arrayPreguntasSelected));\r\n          this.$http.post(this.$server_url + 'asignar_preguntas_institucion', formData)\r\n          .then(res => {\r\n            me.$vs.loading.close()\r\n            //si no se asignaron preguntas\r\n            me.popupAsignar = false\r\n            me.popupConfirm = false\r\n            if(res.data.preguntasIngresadas == 0){\r\n              me.$vs.notify({\r\n                title: 'Error',\r\n                text: 'Preguntas ya asignadas con anterioridad',\r\n                iconPack: 'feather',\r\n                icon: 'icon-alert-circle',\r\n                color: 'danger'\r\n              })\r\n            }else{\r\n              //si se asignaron preguntas\r\n              me.$vs.notify({\r\n                title: 'Exito',\r\n                text: `${ res.data.preguntasIngresadas } Preguntas  asignadas correctamente`,\r\n                iconPack: 'feather',\r\n                icon: 'icon-check',\r\n                color: 'success',\r\n                time:6000\r\n              })\r\n            }\r\n            //preguntas que no se asignaron que estan ingresada\r\n            if(res.data.preguntasYaIngresadas.length > 0){\r\n              me.checkPreguntasIngresadas(res.data.preguntasYaIngresadas)\r\n            }\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({\r\n              title: 'Error',\r\n              text: 'Error al asignar las preguntas',\r\n              iconPack: 'feather',\r\n              icon: 'icon-alert-circle',\r\n              color: 'danger'\r\n            })\r\n          })\r\n        },\r\n        checkPreguntasIngresadas(preguntas){\r\n          let me = this;\r\n          me.arrayNoIngresadas = preguntas\r\n          me.popupNoAsignadas = true\r\n        },\r\n\r\n        changeAsignar(e,datos){\r\n          this.arrayPreguntasSelected = datos\r\n          this.popupAsignar           = true\r\n        },\r\n        filtrarPreguntas() {\r\n            let me = this;\r\n            me.arrayPreguntas = []\r\n            if (me.asignaturaSelected == null || me.asignaturaSelected == '') {\r\n                me.$vs.notify({\r\n                    title: 'Error',\r\n                    text: 'Debe seleccionar una asignatura',\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-alert-circle',\r\n                    color: 'danger'\r\n                })\r\n                return\r\n            }\r\n            me.$vs.loading()\r\n            const formData = new FormData();\r\n            formData.append('asignatura', me.asignaturaSelected.id);\r\n            formData.append('idusuario',  me.usuario.idusuario);\r\n            this.$http.post(this.$server_url + 'temas_preguntas_respuestas', formData)\r\n            .then(res => {\r\n              me.$vs.loading.close()\r\n              me.arrayPreguntas = res.data\r\n                //si esta vacio el array mostrar un alert\r\n                if(me.arrayPreguntas.length == 0){\r\n                    me.$vs.notify({\r\n                        title: 'Error',\r\n                        text: 'No hay preguntas para esta asignatura',\r\n                        iconPack: 'feather',\r\n                        icon: 'icon-alert-circle',\r\n                        color: 'danger'\r\n                    })\r\n                }\r\n            })\r\n              .catch(function (error) {\r\n                console.log(error);\r\n                me.$vs.loading.close()\r\n                me.$vs.notify({\r\n                  title: 'Error',\r\n                  text: 'Error al cargar las preguntas',\r\n                  iconPack: 'feather',\r\n                  icon: 'icon-alert-circle',\r\n                  color: 'danger'\r\n                })\r\n            })\r\n        },\r\n      }\r\n  };\r\n  </script>\r\n"],"mappings":"AAyCA,OAAAA,OAAA;AACA,IAAAC,iBAAA,YAAAA,kBAAA;EAAA;AAAA;AACA,IAAAC,kBAAA,YAAAA,mBAAA;EAAA;AAAA;AACA;EACAC,UAAA;IACA,YAAAH,OAAA;IACAC,iBAAA,EAAAA,iBAAA;IACAC,kBAAA,EAAAA;EACA;EACAE,IAAA,WAAAA,KAAA;IACA;MACAC,kBAAA;MACAC,WAAA;MACAC,UAAA;QACAC,EAAA;QACAC,KAAA;MACA;MACAC,cAAA;MACAC,sBAAA;MACAC,YAAA;MACAC,IAAA;MACAC,OAAA;MACAC,YAAA;MACAC,mBAAA;MACAC,YAAA;MACAC,gBAAA;IACA;EACA;EACAC,KAAA;IACAC,kBAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;IACAlB,WAAA;MACAe,IAAA,EAAAC,KAAA;MACAC,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,IAAAC,EAAA;IACAA,EAAA,CAAAZ,OAAA,GAAAa,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,IAAAL,EAAA;EACA;EACAM,OAAA;IACAC,aAAA,WAAAA,cAAAC,CAAA;MACA,IAAAR,EAAA;MACA;MACA,IAAAQ,CAAA;QAAAR,EAAA,CAAAT,YAAA;MAAA;MACA;MACA,IAAAiB,CAAA;QAAAR,EAAA,CAAAS,gBAAA;MAAA;IACA;IACAA,gBAAA,WAAAA,iBAAA;MACA,IAAAT,EAAA;MACAA,EAAA,CAAAU,iBAAA;MACA,IAAAV,EAAA,CAAAV,mBAAA,YAAAU,EAAA,CAAAV,mBAAA;QACAU,EAAA,CAAAW,GAAA,CAAAC,MAAA;UACAC,KAAA;UACAC,IAAA;UACAC,QAAA;UACAC,IAAA;UACAC,KAAA;QACA;QACA;MACA;MACAjB,EAAA,CAAAW,GAAA,CAAAO,OAAA;MACA,IAAAC,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,mBAAArB,EAAA,CAAAV,mBAAA;MACA6B,QAAA,CAAAE,MAAA,iBAAArB,EAAA,CAAAZ,OAAA,CAAAkC,SAAA;MACAH,QAAA,CAAAE,MAAA,mBAAApB,IAAA,CAAAsB,SAAA,CAAAvB,EAAA,CAAAf,sBAAA;MACA,KAAAuC,KAAA,CAAAC,IAAA,MAAAC,WAAA,oCAAAP,QAAA,EACAQ,IAAA,WAAAC,GAAA;QACA5B,EAAA,CAAAW,GAAA,CAAAO,OAAA,CAAAW,KAAA;QACA;QACA7B,EAAA,CAAAX,YAAA;QACAW,EAAA,CAAAT,YAAA;QACA,IAAAqC,GAAA,CAAAlD,IAAA,CAAAoD,mBAAA;UACA9B,EAAA,CAAAW,GAAA,CAAAC,MAAA;YACAC,KAAA;YACAC,IAAA;YACAC,QAAA;YACAC,IAAA;YACAC,KAAA;UACA;QACA;UACA;UACAjB,EAAA,CAAAW,GAAA,CAAAC,MAAA;YACAC,KAAA;YACAC,IAAA,KAAAiB,MAAA,CAAAH,GAAA,CAAAlD,IAAA,CAAAoD,mBAAA;YACAf,QAAA;YACAC,IAAA;YACAC,KAAA;YACAe,IAAA;UACA;QACA;QACA;QACA,IAAAJ,GAAA,CAAAlD,IAAA,CAAAuD,qBAAA,CAAAC,MAAA;UACAlC,EAAA,CAAAmC,wBAAA,CAAAP,GAAA,CAAAlD,IAAA,CAAAuD,qBAAA;QACA;MACA,GACAG,KAAA,WAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;QACArC,EAAA,CAAAW,GAAA,CAAAO,OAAA,CAAAW,KAAA;QACA7B,EAAA,CAAAW,GAAA,CAAAC,MAAA;UACAC,KAAA;UACAC,IAAA;UACAC,QAAA;UACAC,IAAA;UACAC,KAAA;QACA;MACA;IACA;IACAkB,wBAAA,WAAAA,yBAAAK,SAAA;MACA,IAAAxC,EAAA;MACAA,EAAA,CAAAU,iBAAA,GAAA8B,SAAA;MACAxC,EAAA,CAAAR,gBAAA;IACA;IAEAiD,aAAA,WAAAA,cAAAjC,CAAA,EAAAkC,KAAA;MACA,KAAAzD,sBAAA,GAAAyD,KAAA;MACA,KAAArD,YAAA;IACA;IACAsD,gBAAA,WAAAA,iBAAA;MACA,IAAA3C,EAAA;MACAA,EAAA,CAAAhB,cAAA;MACA,IAAAgB,EAAA,CAAArB,kBAAA,YAAAqB,EAAA,CAAArB,kBAAA;QACAqB,EAAA,CAAAW,GAAA,CAAAC,MAAA;UACAC,KAAA;UACAC,IAAA;UACAC,QAAA;UACAC,IAAA;UACAC,KAAA;QACA;QACA;MACA;MACAjB,EAAA,CAAAW,GAAA,CAAAO,OAAA;MACA,IAAAC,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,eAAArB,EAAA,CAAArB,kBAAA,CAAAG,EAAA;MACAqC,QAAA,CAAAE,MAAA,cAAArB,EAAA,CAAAZ,OAAA,CAAAkC,SAAA;MACA,KAAAE,KAAA,CAAAC,IAAA,MAAAC,WAAA,iCAAAP,QAAA,EACAQ,IAAA,WAAAC,GAAA;QACA5B,EAAA,CAAAW,GAAA,CAAAO,OAAA,CAAAW,KAAA;QACA7B,EAAA,CAAAhB,cAAA,GAAA4C,GAAA,CAAAlD,IAAA;QACA;QACA,IAAAsB,EAAA,CAAAhB,cAAA,CAAAkD,MAAA;UACAlC,EAAA,CAAAW,GAAA,CAAAC,MAAA;YACAC,KAAA;YACAC,IAAA;YACAC,QAAA;YACAC,IAAA;YACAC,KAAA;UACA;QACA;MACA,GACAmB,KAAA,WAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;QACArC,EAAA,CAAAW,GAAA,CAAAO,OAAA,CAAAW,KAAA;QACA7B,EAAA,CAAAW,GAAA,CAAAC,MAAA;UACAC,KAAA;UACAC,IAAA;UACAC,QAAA;UACAC,IAAA;UACAC,KAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]}]}