{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\GenerarCodigos\\GenerarCodigos.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\GenerarCodigos\\GenerarCodigos.vue","mtime":1712682815619},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\babel.config.js","mtime":1712682813877},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\.babelrc","mtime":1712682813750},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/laragon/www/PRY_NEW_JEYSON/LOCAL/plataformaprolipa_vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport vSelect from 'vue-select';\nimport moment from 'moment';\nexport default {\n  data: function data() {\n    return {\n      usuario: [],\n      arregloCodigos: [],\n      codigosNoIngresados: [],\n      cantidad: 0,\n      estadoProceso: 0,\n      porcentaje: 0,\n      progressInterActivo: 0,\n      textAlertCant: '',\n      popupProblemas: false,\n      //varaibles para exportar excel\n      fileName: null,\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\n      cellAutoWidth: true,\n      selectedFormat: 'xlsx',\n      exportado: 0,\n      arregloSeries: [],\n      arregloLibros: [],\n      serieSelect: '',\n      libroSelect: '',\n      conActivacion: true,\n      codeA: '',\n      contadorActivacion: 1,\n      contadorDiagnostica: 1,\n      codigo_liquidacion: '',\n      msgError: '',\n      fecha: '',\n      preCodigos: [],\n      preActivacion: [],\n      palabraDiagnostico: 'P'\n    };\n  },\n  components: {\n    vSelect: vSelect\n  },\n  created: function created() {\n    var me = this;\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n  },\n  mounted: function mounted() {\n    var me = this;\n    me.getSeries();\n    moment.locale(\"es\");\n    me.day = moment().format('DD');\n    me.mes = moment().format('MMMM');\n    me.year = moment().format('YYYY');\n    var preFecha = me.day + '-' + me.mes + '-' + me.year;\n    me.fecha = preFecha.toUpperCase();\n  },\n  methods: {\n    getSeries: function getSeries() {\n      var _this = this;\n      var me = this;\n      this.$http.get(this.$server_url + 'series').then(function (res) {\n        _this.arregloSeries = res.data;\n      });\n    },\n    getLibros: function getLibros() {\n      var _this2 = this;\n      var me = this;\n      me.arregloLibros = [];\n      me.arregloCodigos = [];\n      me.libroSelect = '';\n      me.estadoProceso = 0;\n      me.exportado = 0;\n      if (me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined) {\n        me.$vs.notify({\n          text: 'Seleccione una serie por favor',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n        return;\n      }\n      this.$http.get(this.$server_url + 'libros_series/' + me.serieSelect.id_serie).then(function (res) {\n        _this2.arregloLibros = res.data;\n      });\n    },\n    //obtener el estado del ultimo codigo el contador\n    estadoContador: function estadoContador() {\n      var me = this;\n      if (me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined) {\n        me.contadorActivacion = 1;\n        me.contadorDiagnostica = 1;\n        return;\n      }\n      this.$http.get(this.$server_url + 'contadorCodigo?libro=' + me.libroSelect.idLibro).then(function (res) {\n        me.contadorActivacion = res.data.contador;\n        me.contadorDiagnostica = res.data.contadorDiagnostica;\n      }).catch(function (error) {\n        console.log(error + ' error');\n      });\n    },\n    //generar codigos\n    generarCodigos: function generarCodigos(fin) {\n      var me = this;\n      me.preCodigos = [];\n      me.preActivacion = [];\n      me.msgError = \"\";\n      if (me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined) {\n        me.$vs.notify({\n          text: 'Seleccione una serie por favor',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n        return;\n      }\n      if (me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined) {\n        me.$vs.notify({\n          text: 'Seleccione un libro por favor',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n        return;\n      }\n      this.codigo_liquidacion = me.libroSelect.codigo_liquidacion;\n      if (me.codigo_liquidacion == null || me.codigo_liquidacion == \"null\" || me.codigo_liquidacion == \"SIN CODIGO\") {\n        me.msgError = \"Este libro no tiene código de liquidación, comuníquese con soporte\";\n        return;\n      }\n      //activacion\n      this.codeA = this.codigo_liquidacion + \"-\";\n      this.textAlertCant = '';\n      this.exportado = 0, this.arregloCodigos = [];\n      this.estadoProceso = 0;\n      this.porcentajeA = 0;\n      if (fin > 3000) {\n        me.$vs.notify({\n          color: 'warning',\n          title: 'Mensaje',\n          text: 'Máximo 3000 códigos se puede generar para el excel'\n        });\n        return false;\n      }\n      if (fin == 0) {\n        me.$vs.notify({\n          color: 'warning',\n          title: 'Mensaje',\n          text: 'Debe escribir al menos 1 código para generar'\n        });\n        return false;\n      }\n      //activacion\n      if (me.tipoCodigo == 0) {\n        this.code = this.codigo_liquidacion + \"-\";\n      }\n      //diagnostico\n      if (me.tipoCodigo == 1) {\n        this.code = this.palabraDiagnostico + this.codigo_liquidacion + \"-\";\n      }\n      me.arregloCodigos = [];\n      var formData = new FormData();\n      formData.append('longitud', this.serieSelect.longitud_codigo);\n      formData.append('code', this.code);\n      formData.append('cantidad', fin);\n      me.$vs.loading();\n      this.$http.post(this.$server_url + 'generarCodigos', formData).then(function (res) {\n        me.$vs.loading.close();\n        var datos = res.data.codigos;\n        datos.map(function (p) {\n          me.arregloCodigos.push({\n            codigo: p.codigo,\n            libro: me.libroSelect.nombre_imprimir,\n            serie: me.serieSelect.nombre_serie,\n            anio: me.libroSelect.year,\n            libro_idlibro: me.libroSelect.idLibro,\n            contadorCodigoA: ''\n          });\n          me.generarNombreFile();\n        });\n        // codigos ahora contiene los códigos de activación\n        me.estadoProceso = 1;\n        me.$vs.notify({\n          color: 'primary',\n          title: 'Mensaje',\n          text: 'Codigos Cargados'\n        });\n      }).catch(function (error) {\n        console.log(error + ' error');\n        me.$vs.loading.close();\n      });\n    },\n    formatCode: function formatCode() {\n      var me = this;\n      me.preCodigos = [];\n      me.preActivacion = [];\n      var nuevaData = me.arregloCodigos;\n      nuevaData.forEach(function (dato) {\n        me.preCodigos.push(dato.codigo);\n        me.preActivacion.push(dato.codigo);\n      });\n    },\n    generarNombreFile: function generarNombreFile() {\n      var me = this;\n      //nombre file\n      //tipoCodigo => 0 = activacion; 1 prueba diagnostico\n      if (me.tipoCodigo == 0) {\n        me.fileName = 'ACTIVACION-' + me.codigo_liquidacion + '-' + me.cantidad + 'C-' + me.fecha;\n      } else {\n        me.fileName = 'DIAGNOSTICO-' + me.codigo_liquidacion + '-' + me.cantidad + 'C-' + me.fecha;\n      }\n    },\n    // generarNombreFile(){\n    //   let me = this;\n    //   const currentDate = new Date();\n    //   const currenFecha = moment(currentDate, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\n    //   me.fileName = `${this.arregloCodigos.length}c-${this.libroSelect.nombre}-${currenFecha}`\n    // },\n    //Guardar codigos en la BD\n    guardarCodigos: function () {\n      var _guardarCodigos = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n        var me, formData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              me = this;\n              this.progressInterActivo = 1;\n              this.openLoadingColor();\n              formData = new FormData();\n              formData.append(\"user_created\", me.usuario.idusuario);\n              formData.append(\"data_codigos\", JSON.stringify(me.arregloCodigos));\n              if (me.tipoCodigo == 0) {\n                formData.append(\"contador\", me.contadorActivacion);\n              }\n              if (me.tipoCodigo == 1) {\n                formData.append(\"contador\", me.contadorDiagnostica);\n              }\n              formData.append(\"prueba_diagnostica\", me.tipoCodigo);\n              me.$vs.loading();\n              this.$http.post(this.$server_url + 'guardarCodigos2', formData).then(function (res) {\n                _this3.$vs.loading.close();\n                //porcentaje\n                me.arregloCodigos = [];\n                me.arregloCodigos = res.data.codigosGuardados;\n                me.codigosNoIngresados = res.data.codigosNoIngresados;\n                me.porcentajeA = res.data.porcentajeA;\n                me.estadoProceso = 2;\n                me.codigos;\n                _this3.progressInterActivo = '';\n                if (_this3.codigosNoIngresados > 0) {\n                  me.popupProblemas = true;\n                } else {\n                  me.exportToExcel();\n                }\n              }).catch(function (error) {\n                this.$vs.loading.close();\n                alert('Error no existen códigos disponibles ' + error);\n              });\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function guardarCodigos() {\n        return _guardarCodigos.apply(this, arguments);\n      }\n      return guardarCodigos;\n    }(),\n    //METODOS PARA EXPORTAR EXCEL\n    exportToExcel: function exportToExcel() {\n      var _this4 = this;\n      var me = this;\n      var headerTitle = \"\";\n      var headerVal = \"\";\n      headerTitle = ['codigo', 'libro', 'serie', 'año', 'Tipo', 'contador', 'secuencia', 'imprimir'];\n      headerVal = ['codigo', 'libro', 'serie', 'anio', '', 'contadorCodigoA', '', ''];\n      var codigoSelectedMayus = this.arregloCodigos;\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\n        for (var key in codigoSelectedMayus[i]) {\n          if (typeof codigoSelectedMayus[i][key] == \"string\") {\n            codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\n          }\n        }\n      }\n      import('@/vendor/Export2Excel').then(function (excel) {\n        var list = codigoSelectedMayus;\n        var data = _this4.formatJson(headerVal, list);\n        for (var i = 0; i < data.length; i++) {\n          data[i][4] = me.tipoCodigo == 0 ? 'CODIGO DE ACTIVACION DEL LIBRO' : 'PRUEBA DIAGNOSTICA';\n          data[i][6] = i + 1;\n          data[i][7] = 1;\n        }\n        excel.export_json_to_excel({\n          header: headerTitle,\n          data: data,\n          filename: _this4.fileName,\n          autoWidth: _this4.cellAutoWidth,\n          bookType: _this4.selectedFormat\n        });\n        _this4.clearFields();\n        _this4.guardarActivo = '';\n        _this4.generarActivo = ' ';\n        _this4.textAlertCant = '';\n        // this.cantidad = '';\n        _this4.codigoSelected = [];\n        _this4.exportado = 1;\n        me.$vs.notify({\n          text: 'Se exporto corectamente',\n          color: 'success',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n      });\n    },\n    // exportToExcel() {\n    //   let me = this\n    //   //setear array\n    //   var printArray = []\n    //   me.arregloCodigos.forEach(element => {\n    //     var cal = new Object()\n    //     cal.activacion_barras   = \"*\"+element.codigo_activacion+\"*\"\n    //     cal.codigo_activacion   = element.codigo_activacion\n    //     cal.libro               = element.libro\n    //     cal.contadorCodigoA     = element.contadorCodigoA +\" -\"\n    //     printArray.push(cal)\n    //  });\n    //   let headerTitle = \"\"\n    //   let headerVal = \"\"\n    //     headerTitle = [\n    //       'Activación barras',\n    //       'Código activación',\n    //       'Contador Activación',\n    //       'Activación',\n    //     ];\n    //     headerVal = [\n    //       'activacion_barras',\n    //       'codigo_activacion',\n    //       'contadorCodigoA',\n    //       '',\n    //     ];\n    //   let codigoSelectedMayus = printArray\n    //   for (var i = 0; i < codigoSelectedMayus.length; i++) {\n    //     for (var key in codigoSelectedMayus[i]) {\n    //         if (typeof codigoSelectedMayus[i][key] == \"string\") {\n    //             codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\n    //         }\n    //     }\n    //   }\n    //   import('@/vendor/Export2Excel').then(excel => {\n    //     const list = codigoSelectedMayus\n    //     const data = this.formatJson(headerVal, list)\n    //     for (var i = 0; i < data.length; i++) {\n    //       data[i][3]   =\"Activación \"+me.libroSelect.nombre_imprimir\n    //     }\n    //     excel.export_json_to_excel({\n    //       header: headerTitle,\n    //       data,\n    //       filename: this.fileName,\n    //       autoWidth: this.cellAutoWidth,\n    //       bookType: this.selectedFormat\n    //     })\n    //     this.clearFields()\n    //     // this.textAlertCant  = '';\n    //     this.cantidad       = '';\n    //     this.exportado      = 1\n    //     me.$vs.notify({\n    //     text:'Se exporto corectamente',\n    //     color:'success',\n    //     iconPack: 'feather',\n    //     icon:'icon-check'})\n    //   })\n    // },\n    formatJson: function formatJson(filterVal, jsonData) {\n      return jsonData.map(function (v) {\n        return filterVal.map(function (j) {\n          return v[j];\n        });\n      });\n    },\n    clearFields: function clearFields() {\n      this.fileName = '';\n      this.cellAutoWidth = true;\n      this.selectedFormat = 'xls';\n    },\n    openLoadingColor: function openLoadingColor(libro) {\n      this.$vs.loading({\n        color: '#1A76F2'\n      });\n    }\n  }\n};",{"version":3,"names":["vSelect","moment","data","usuario","arregloCodigos","codigosNoIngresados","cantidad","estadoProceso","porcentaje","progressInterActivo","textAlertCant","popupProblemas","fileName","formats","cellAutoWidth","selectedFormat","exportado","arregloSeries","arregloLibros","serieSelect","libroSelect","conActivacion","codeA","contadorActivacion","contadorDiagnostica","codigo_liquidacion","msgError","fecha","preCodigos","preActivacion","palabraDiagnostico","components","created","me","JSON","parse","localStorage","getItem","mounted","getSeries","locale","day","format","mes","year","preFecha","toUpperCase","methods","_this","$http","get","$server_url","then","res","getLibros","_this2","undefined","$vs","notify","text","color","iconPack","icon","id_serie","estadoContador","idLibro","contador","catch","error","console","log","generarCodigos","fin","porcentajeA","title","tipoCodigo","code","formData","FormData","append","longitud_codigo","loading","post","close","datos","codigos","map","p","push","codigo","libro","nombre_imprimir","serie","nombre_serie","anio","libro_idlibro","contadorCodigoA","generarNombreFile","formatCode","nuevaData","forEach","dato","guardarCodigos","_guardarCodigos","_asyncToGenerator","regeneratorRuntime","mark","_callee","_this3","wrap","_callee$","_context","prev","next","openLoadingColor","idusuario","stringify","codigosGuardados","exportToExcel","alert","stop","apply","arguments","_this4","headerTitle","headerVal","codigoSelectedMayus","i","length","key","excel","list","formatJson","export_json_to_excel","header","filename","autoWidth","bookType","clearFields","guardarActivo","generarActivo","codigoSelected","filterVal","jsonData","v","j"],"sources":["src/views/codigos/components/GenerarCodigos/GenerarCodigos.vue"],"sourcesContent":["<template>\r\n    <vx-card>\r\n      <!--SELECT LIBRO-->\r\n      <div class=\"vx-row\">\r\n        <div class=\"vx-col sm:w-1/2 w-full mb-2\">\r\n          <span>Serie:</span>\r\n          <v-select @input=\"getLibros()\" :options=\"arregloSeries\" :reduce=\"arregloSeries => arregloSeries\" label=\"nombre_serie\" class=\"w-full\" v-model=\"serieSelect\" />\r\n        </div>\r\n        <div class=\"vx-col sm:w-1/2 w-full mb-2\">\r\n          <span>Libro:</span>\r\n          <v-select @input=\"arregloCodigos = [];estadoProceso=0;exportado=0;\" :options=\"arregloLibros\" :reduce=\"arregloLibros => arregloLibros\" label=\"nombrelibro\" class=\"w-full\" v-model=\"libroSelect\" />\r\n        </div>\r\n      </div>\r\n      <p class=\"text-danger text-2xl font-bold mt-2 text-center\" v-if=\"msgError\">{{ msgError }}</p>\r\n      <br>\r\n      <!--TOTAL GUARDADOS-->\r\n      <div class=\"flex justify-center\" v-if=\"estadoProceso == 2\">\r\n        <ul class=\"features flex justify-center\" >\r\n          <li>\r\n            <span class=\"icon\">\r\n              <svg height=\"24\" width=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                <path fill=\"currentColor\" d=\"M10 15.172l9.192-9.193 1.415 1.414L10 18l-6.364-6.364 1.414-1.414z\"></path>\r\n              </svg>\r\n            </span>\r\n            <span v-if=\"tipoCodigo == 0\"><strong>Códigos Activación Ingresados: {{ porcentajeA }} </strong></span>\r\n            <span v-if=\"tipoCodigo == 1\"><strong>Códigos Diagnóstico Ingresados: {{ porcentajeA }} </strong></span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <br>\r\n      <!--FIN SELECT LIBRO-->\r\n      <vs-progress v-if=\"porcentaje === 100 && estadoProceso > 0\" :height=\"8\" :percent=\"porcentaje\" color=\"success\"></vs-progress>\r\n      <vs-progress v-if=\"progressInterActivo != ''\" indeterminate color=\"primary\"></vs-progress>\r\n      <p class=\"text-center text-success font-bold text-3xl mt-3\" v-if=\"exportado == 1\"><ion-icon name=\"star-outline\"></ion-icon> Se exporto el archivo <b>{{ filename }}</b></p>\r\n      <!--GENERAR CODIGOS-->\r\n      <div class=\"flex mt-5\" style=\"flex-wrap:wrap;\">\r\n        <span class=\"mt-3 ml-5 font-bold\">Cantidad:</span>\r\n        <div class=\"mt-1\">\r\n          <vx-tooltip color=\"warning\" text=\"Ingrese la cantidad de códigos que desea generar (máximo 3000)\">\r\n            <vs-input type=\"number\" class=\"inputx ml-2\" min=\"1\" max=\"3000\" @keyup.enter=\"generarCodigos(cantidad);\" style=\"width: 150px; text-align: center;margin-top:-3px;\" v-model=\"cantidad\" />\r\n          </vx-tooltip>\r\n        </div>\r\n        <div class=\"ml-3 mt-1\">\r\n          <vs-button color=\"primary\" class=\"generarBoton mr-2\" size=\"small\" style=\"font-size: 13px;\" @click=\"tipoCodigo = 0;generarCodigos(cantidad);estadoContador();\"  v-if=\"cantidad<=10000\">Generar Códigos Activación</vs-button>\r\n          <vs-button color=\"warning\" class=\"generarBoton mr-2\" size=\"small\" style=\"font-size: 13px;\" @click=\"tipoCodigo = 1;generarCodigos(cantidad);estadoContador();\"  v-if=\"cantidad<=10000\">Generar Códigos Diagnóstico</vs-button>\r\n          <vs-button color=\"danger\" size=\"small\" style=\"font-size: 13px;\" v-if=\"cantidad>10000\">Cantidad excede los 10000</vs-button>\r\n        </div>\r\n        <div>\r\n          <div v-if=\"estadoProceso == 1 && arregloCodigos[0]\" style=\"display:flex;\">\r\n            <vs-button color=\"success\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;margin-top: 5px;\" @click=\"guardarCodigos(); estadoProceso = 0;\">Guardar</vs-button>\r\n            <vx-tooltip color=\"warning\" text=\"Generar codigos de barras\" style=\"margin-left:20px;border-radius:20px;\">\r\n            </vx-tooltip>\r\n          </div>\r\n          <vx-tooltip v-if=\"estadoProceso == 2\" color=\"warning\" text=\"Antes de exportar seleccione los codigos deseados.\">\r\n              <vs-button color=\"dark\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;margin-top: 5px;\" @click=\"generarNombreFile();exportToExcel();\">Exportar</vs-button>\r\n          </vx-tooltip>\r\n        </div>\r\n      </div>\r\n      <div v-if=\"preCodigos.length > 0\" class=\"vx-row mt-3\">\r\n        <div >\r\n          <div v-for=\"(item,key) in preCodigos\" :key=\"key\">\r\n            <p>{{ item }}</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"ml-5\">\r\n          <div v-for=\"(item,key2) in preActivacion\" :key=\"key2\">\r\n            <p>{{ item }}</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"ml-4\">\r\n          <div v-for=\"(item,key3) in preCodigos\" :key=\"key3\">\r\n            <p>OR codigo='{{ item }}'</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!--TABLA-->\r\n      <!-- <b style=\"color: #0AD68C;\">{{ textAlertCant }}</b> -->\r\n      <vs-table pagination max-items=\"25\" search :data=\"arregloCodigos\">\r\n        <template slot=\"header\">\r\n          <ion-icon name=\"eye-off-outline\" v-if=\"preCodigos.length > 0\" @click=\"preCodigos = []\"></ion-icon>\r\n          <p @click=\"formatCode()\">\r\n            <vs-chip>Cantidad {{ arregloCodigos.length  }}</vs-chip>\r\n          </p>\r\n        </template>\r\n        <template slot=\"thead\">\r\n          <vs-th sort-key=\"codigo\">Código </vs-th>\r\n          <vs-th sort-key=\"libro\">Libro</vs-th>\r\n          <vs-th sort-key=\"libro\">Serie</vs-th>\r\n          <vs-th sort-key=\"anio\">Año</vs-th>\r\n          <vs-th sort-key=\"anio\">Tipo</vs-th>\r\n          <vs-th sort-key=\"contador\">Contador</vs-th>\r\n          <vs-th sort-key=\"secuencia\">secuencia</vs-th>\r\n          <vs-th sort-key=\"imprimir\">imprimir</vs-th>\r\n        </template>\r\n        <template slot-scope=\"{data}\">\r\n          <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n            <vs-td>\r\n              {{ data[indextr].codigo }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ data[indextr].libro }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ data[indextr].serie }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ data[indextr].anio }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ tipoCodigo == 0 ? 'CODIGO DE ACTIVACION DEL LIBRO' : 'PRUEBA DIAGNOSTICA' }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ data[indextr].contadorCodigoA }}\r\n            </vs-td>\r\n            <vs-td :data=\"data[indextr]\">\r\n                {{ indextr+1 }}\r\n            </vs-td>\r\n            <vs-td>\r\n                1\r\n            </vs-td>\r\n          </vs-tr>\r\n        </template>\r\n      </vs-table>\r\n      <br><br><br><br><br>\r\n      <!--MODAL-->\r\n      <!--MODAL PROBLEMA CODIGOS-->\r\n      <vs-popup classContent=\"popup-example\" title=\"códigos que no se pudieron ingresar\" :active.sync=\"popupProblemas\">\r\n        <vs-table multiple pagination max-items=\"10\" search :data=\"codigosNoIngresados\" v-if=\"popupProblemas\">\r\n          <template slot=\"header\">\r\n          </template>\r\n          <template slot=\"thead\">\r\n            <vs-th sort-key=\"codigo\">Código activación</vs-th>\r\n            <vs-th sort-key=\"codigo\">Motivo</vs-th>\r\n          </template>\r\n          <template slot-scope=\"{data}\">\r\n            <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n              <vs-td :data=\"data[indextr].codigo\">\r\n                  {{ data[indextr].codigo }}\r\n              </vs-td>\r\n              <vs-td :data=\"data[indextr].message\">\r\n                {{ data[indextr].message }}\r\n              </vs-td>\r\n            </vs-tr>\r\n          </template>\r\n        </vs-table>\r\n      </vs-popup>\r\n    </vx-card>\r\n  </template>\r\n  <script>\r\n  import vSelect from 'vue-select'\r\n  import moment from 'moment'\r\n  export default{\r\n    data(){\r\n      return{\r\n        usuario:[],\r\n        arregloCodigos:[],\r\n        codigosNoIngresados:[],\r\n        cantidad:0,\r\n        estadoProceso:0,\r\n        porcentaje:0,\r\n        progressInterActivo:0,\r\n        textAlertCant:'',\r\n        popupProblemas:false,\r\n        //varaibles para exportar excel\r\n        fileName: null,\r\n        formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n        cellAutoWidth: true,\r\n        selectedFormat: 'xlsx',\r\n        exportado:0,\r\n        arregloSeries:[],\r\n        arregloLibros:[],\r\n        serieSelect:'',\r\n        libroSelect:'',\r\n        conActivacion:true,\r\n        codeA:'',\r\n        contadorActivacion:1,\r\n        contadorDiagnostica:1,\r\n        codigo_liquidacion:'',\r\n        msgError:'',\r\n        fecha:'',\r\n        preCodigos:[],\r\n        preActivacion:[],\r\n        palabraDiagnostico:'P',\r\n      }\r\n    },\r\n    components:{\r\n      vSelect,\r\n    },\r\n    created(){\r\n      let me = this;\r\n      me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n    },\r\n    mounted(){\r\n      let me = this;\r\n      me.getSeries()\r\n      moment.locale(\"es\")\r\n    me.day        = moment().format('DD');\r\n      me.mes        = moment().format('MMMM');\r\n      me.year       = moment().format('YYYY')\r\n      let preFecha  = me.day+'-'+me.mes+'-'+me.year\r\n      me.fecha      = preFecha.toUpperCase()\r\n    },\r\n    methods:{\r\n      getSeries(){\r\n        let me = this;\r\n        this.$http.get(this.$server_url + 'series').then(res => {\r\n          this.arregloSeries = res.data;\r\n        })\r\n      },\r\n      getLibros(){\r\n        let me = this;\r\n        me.arregloLibros  = []\r\n        me.arregloCodigos = []\r\n        me.libroSelect    = ''\r\n        me.estadoProceso  = 0;\r\n        me.exportado      = 0;\r\n        if(me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined){\r\n          me.$vs.notify({\r\n          text:'Seleccione una serie por favor',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return\r\n        }\r\n        this.$http.get(this.$server_url + 'libros_series/' + me.serieSelect.id_serie).then(res => {\r\n          this.arregloLibros  = res.data;\r\n        })\r\n      },\r\n      //obtener el estado del ultimo codigo el contador\r\n      estadoContador(){\r\n        let me = this;\r\n        if(me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined){\r\n          me.contadorActivacion  = 1\r\n          me.contadorDiagnostica = 1\r\n          return\r\n        }\r\n        this.$http.get(this.$server_url+'contadorCodigo?libro='+me.libroSelect.idLibro)\r\n        .then(function (res) {\r\n          me.contadorActivacion  = res.data.contador\r\n          me.contadorDiagnostica = res.data.contadorDiagnostica\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error + ' error');\r\n        })\r\n      },\r\n      //generar codigos\r\n      generarCodigos(fin) {\r\n        let me = this;\r\n        me.preCodigos     = []\r\n        me.preActivacion  = []\r\n        me.msgError = \"\"\r\n        if(me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined){\r\n          me.$vs.notify({\r\n          text:'Seleccione una serie por favor',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return\r\n        }\r\n        if(me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined){\r\n          me.$vs.notify({\r\n          text:'Seleccione un libro por favor',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return\r\n        }\r\n        this.codigo_liquidacion = me.libroSelect.codigo_liquidacion\r\n        if(me.codigo_liquidacion == null || me.codigo_liquidacion == \"null\" || me.codigo_liquidacion == \"SIN CODIGO\"){\r\n          me.msgError = \"Este libro no tiene código de liquidación, comuníquese con soporte\"\r\n          return\r\n        }\r\n        //activacion\r\n        this.codeA             = this.codigo_liquidacion + \"-\";\r\n        this.textAlertCant     = '';\r\n        this.exportado         = 0,\r\n        this.arregloCodigos    = []\r\n        this.estadoProceso     = 0\r\n        this.porcentajeA       = 0\r\n        if (fin > 3000) {\r\n          me.$vs.notify({\r\n            color: 'warning',\r\n            title: 'Mensaje',\r\n            text: 'Máximo 3000 códigos se puede generar para el excel'\r\n          })\r\n          return false;\r\n        }\r\n        if(fin == 0 ){\r\n          me.$vs.notify({\r\n            color: 'warning',\r\n            title: 'Mensaje',\r\n            text: 'Debe escribir al menos 1 código para generar'\r\n          })\r\n          return false;\r\n        }\r\n        //activacion\r\n        if(me.tipoCodigo == 0){\r\n          this.code = this.codigo_liquidacion + \"-\";\r\n        }\r\n        //diagnostico\r\n        if(me.tipoCodigo == 1){\r\n          this.code = this.palabraDiagnostico+this.codigo_liquidacion + \"-\";\r\n        }\r\n        me.arregloCodigos              = [];\r\n        let formData = new FormData();\r\n        formData.append('longitud',  this.serieSelect.longitud_codigo);\r\n        formData.append('code',     this.code);\r\n        formData.append('cantidad',  fin);\r\n        me.$vs.loading();\r\n        this.$http.post(this.$server_url+'generarCodigos', formData)\r\n        .then(function (res) {\r\n          me.$vs.loading.close()\r\n          let datos         = res.data.codigos\r\n          datos.map(p => {\r\n            me.arregloCodigos.push({\r\n              codigo              : p.codigo,\r\n              libro               : me.libroSelect.nombre_imprimir,\r\n              serie               : me.serieSelect.nombre_serie,\r\n              anio                : me.libroSelect.year,\r\n              libro_idlibro       : me.libroSelect.idLibro,\r\n              contadorCodigoA     : '',\r\n            });\r\n            me.generarNombreFile()\r\n          })\r\n          // codigos ahora contiene los códigos de activación\r\n          me.estadoProceso = 1;\r\n          me.$vs.notify({\r\n            color: 'primary',\r\n            title: 'Mensaje',\r\n            text: 'Codigos Cargados'\r\n          })\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error + ' error');\r\n          me.$vs.loading.close()\r\n        })\r\n      },\r\n      formatCode(){\r\n        let me = this\r\n        me.preCodigos     = []\r\n        me.preActivacion  = []\r\n        let nuevaData = me.arregloCodigos\r\n        nuevaData.forEach((dato) => {\r\n          me.preCodigos.push(dato.codigo);\r\n          me.preActivacion.push(dato.codigo);\r\n        });\r\n      },\r\n      generarNombreFile(){\r\n        let me = this;\r\n        //nombre file\r\n        //tipoCodigo => 0 = activacion; 1 prueba diagnostico\r\n        if(me.tipoCodigo == 0){\r\n          me.fileName = 'ACTIVACION-'+me.codigo_liquidacion+'-'+me.cantidad+'C-'+me.fecha\r\n        }else{\r\n          me.fileName = 'DIAGNOSTICO-'+me.codigo_liquidacion+'-'+me.cantidad+'C-'+me.fecha\r\n        }\r\n      },\r\n      // generarNombreFile(){\r\n      //   let me = this;\r\n      //   const currentDate = new Date();\r\n      //   const currenFecha = moment(currentDate, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\r\n      //   me.fileName = `${this.arregloCodigos.length}c-${this.libroSelect.nombre}-${currenFecha}`\r\n      // },\r\n      //Guardar codigos en la BD\r\n      async guardarCodigos() {\r\n        let me = this;\r\n        this.progressInterActivo     = 1;\r\n        this.openLoadingColor()\r\n        var formData = new FormData();\r\n        formData.append(\"user_created\",         me.usuario.idusuario);\r\n        formData.append(\"data_codigos\",         JSON.stringify(me.arregloCodigos));\r\n        if(me.tipoCodigo == 0)                  { formData.append(\"contador\",   me.contadorActivacion); }\r\n        if(me.tipoCodigo == 1)                  { formData.append(\"contador\",   me.contadorDiagnostica);\r\n        }\r\n        formData.append(\"prueba_diagnostica\",   me.tipoCodigo);\r\n        me.$vs.loading();\r\n        this.$http.post(this.$server_url + 'guardarCodigos2', formData)\r\n        .then(res => {\r\n          this.$vs.loading.close()\r\n          //porcentaje\r\n          me.arregloCodigos           = []\r\n          me.arregloCodigos           = res.data.codigosGuardados\r\n          me.codigosNoIngresados      = res.data.codigosNoIngresados\r\n          me.porcentajeA              = res.data.porcentajeA\r\n          me.estadoProceso            = 2;\r\n          me.codigos\r\n          this.progressInterActivo    = '';\r\n          if(this.codigosNoIngresados > 0){\r\n            me.popupProblemas         = true\r\n          }else{\r\n            me.exportToExcel()\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          this.$vs.loading.close()\r\n          alert('Error no existen códigos disponibles ' + error);\r\n        });\r\n      },\r\n      //METODOS PARA EXPORTAR EXCEL\r\n      exportToExcel() {\r\n        let me = this\r\n        let headerTitle = \"\"\r\n        let headerVal = \"\"\r\n          headerTitle = ['codigo', 'libro', 'serie', 'año','Tipo', 'contador','secuencia','imprimir'];\r\n          headerVal = ['codigo', 'libro', 'serie', 'anio','', 'contadorCodigoA','',''];\r\n        let codigoSelectedMayus = this.arregloCodigos\r\n        for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n          for (var key in codigoSelectedMayus[i]) {\r\n              if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n                codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n              }\r\n          }\r\n        }\r\n        import('@/vendor/Export2Excel').then(excel => {\r\n          const list = codigoSelectedMayus\r\n          const data = this.formatJson(headerVal, list)\r\n          for (var i = 0; i < data.length; i++) {\r\n            data[i][4] = me.tipoCodigo == 0 ? 'CODIGO DE ACTIVACION DEL LIBRO': 'PRUEBA DIAGNOSTICA'\r\n            data[i][6] = i+1\r\n            data[i][7] = 1\r\n          }\r\n          excel.export_json_to_excel({\r\n            header: headerTitle,\r\n            data,\r\n            filename: this.fileName,\r\n            autoWidth: this.cellAutoWidth,\r\n            bookType: this.selectedFormat\r\n          })\r\n          this.clearFields()\r\n          this.guardarActivo = '';\r\n          this.generarActivo = ' ';\r\n          this.textAlertCant = '';\r\n          // this.cantidad = '';\r\n          this.codigoSelected = [];\r\n          this.exportado      = 1\r\n          me.$vs.notify({\r\n          text:'Se exporto corectamente',\r\n          color:'success',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n        })\r\n      },\r\n      // exportToExcel() {\r\n      //   let me = this\r\n      //   //setear array\r\n      //   var printArray = []\r\n      //   me.arregloCodigos.forEach(element => {\r\n      //     var cal = new Object()\r\n      //     cal.activacion_barras   = \"*\"+element.codigo_activacion+\"*\"\r\n      //     cal.codigo_activacion   = element.codigo_activacion\r\n      //     cal.libro               = element.libro\r\n      //     cal.contadorCodigoA     = element.contadorCodigoA +\" -\"\r\n      //     printArray.push(cal)\r\n      //  });\r\n      //   let headerTitle = \"\"\r\n      //   let headerVal = \"\"\r\n      //     headerTitle = [\r\n      //       'Activación barras',\r\n      //       'Código activación',\r\n      //       'Contador Activación',\r\n      //       'Activación',\r\n      //     ];\r\n      //     headerVal = [\r\n      //       'activacion_barras',\r\n      //       'codigo_activacion',\r\n      //       'contadorCodigoA',\r\n      //       '',\r\n      //     ];\r\n      //   let codigoSelectedMayus = printArray\r\n      //   for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n      //     for (var key in codigoSelectedMayus[i]) {\r\n      //         if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n      //             codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n      //         }\r\n      //     }\r\n      //   }\r\n      //   import('@/vendor/Export2Excel').then(excel => {\r\n      //     const list = codigoSelectedMayus\r\n      //     const data = this.formatJson(headerVal, list)\r\n      //     for (var i = 0; i < data.length; i++) {\r\n      //       data[i][3]   =\"Activación \"+me.libroSelect.nombre_imprimir\r\n      //     }\r\n      //     excel.export_json_to_excel({\r\n      //       header: headerTitle,\r\n      //       data,\r\n      //       filename: this.fileName,\r\n      //       autoWidth: this.cellAutoWidth,\r\n      //       bookType: this.selectedFormat\r\n      //     })\r\n      //     this.clearFields()\r\n      //     // this.textAlertCant  = '';\r\n      //     this.cantidad       = '';\r\n      //     this.exportado      = 1\r\n      //     me.$vs.notify({\r\n      //     text:'Se exporto corectamente',\r\n      //     color:'success',\r\n      //     iconPack: 'feather',\r\n      //     icon:'icon-check'})\r\n      //   })\r\n      // },\r\n      formatJson(filterVal, jsonData) {\r\n          return jsonData.map(v => filterVal.map(j => {\r\n              return v[j]\r\n          }))\r\n      },\r\n      clearFields() {\r\n          this.fileName = ''\r\n          this.cellAutoWidth = true\r\n          this.selectedFormat = 'xls'\r\n      },\r\n      openLoadingColor(libro) {\r\n        this.$vs.loading({\r\n            color: '#1A76F2'\r\n        })\r\n      },\r\n    },\r\n  }\r\n  </script>\r\n  <style scoped>\r\n  /*CSS IMPORTADOS*/\r\n  .features {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  .features li {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n  }\r\n  .features li + * {\r\n    margin-top: 0.75rem;\r\n  }\r\n  .features .icon {\r\n    background-color: #1FCAC5;\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #fff;\r\n    border-radius: 50%;\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n  .features .icon svg {\r\n    width: 14px;\r\n    height: 14px;\r\n  }\r\n  .features + * {\r\n    margin-top: 1.25rem;\r\n  }\r\n  </style>\r\n\r\n"],"mappings":"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A;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAsE,UAAA,WAAAA,WAAAU,SAAA,EAAAC,QAAA;MACA,OAAAA,QAAA,CAAAzD,GAAA,WAAA0D,CAAA;QAAA,OAAAF,SAAA,CAAAxD,GAAA,WAAA2D,CAAA;UACA,OAAAD,CAAA,CAAAC,CAAA;QACA;MAAA;IACA;IACAP,WAAA,WAAAA,YAAA;MACA,KAAA9H,QAAA;MACA,KAAAE,aAAA;MACA,KAAAC,cAAA;IACA;IACAmG,gBAAA,WAAAA,iBAAAxB,KAAA;MACA,KAAAjC,GAAA,CAAAwB,OAAA;QACArB,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]}]}