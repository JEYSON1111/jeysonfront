{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\content\\Contenidos\\Contenidos.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\content\\Contenidos\\Contenidos.vue","mtime":1712682815553},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\babel.config.js","mtime":1712682813877},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\.babelrc","mtime":1712682813750},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"C:/laragon/www/PRY_NEW_JEYSON/LOCAL/plataformaprolipa_vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport _toConsumableArray from \"C:/laragon/www/PRY_NEW_JEYSON/LOCAL/plataformaprolipa_vue/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es6.regexp.search\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport vSelect from 'vue-select';\nimport Libros from \"./Libros.vue\";\nimport FormatForm from \"../FormFormat/Form.vue\";\nimport ContenidoCard from \"../../components/ContenidoCard.vue\";\nimport TablaContenido from \"./TablaContenido.vue\";\nimport LoadingIndicator from \"../../components/LoadingIndicator.vue\";\nimport LibroModel from '@/models/LibroModel';\nexport default {\n  components: {\n    vSelect: vSelect,\n    Libros: Libros,\n    FormatForm: FormatForm,\n    ContenidoCard: ContenidoCard,\n    TablaContenido: TablaContenido,\n    LoadingIndicator: LoadingIndicator\n  },\n  props: {\n    area: {\n      type: Object,\n      required: false\n    }\n  },\n  created: function created() {\n    // Lógica que se ejecuta cuando se crea el componente\n    // Recuperación de datos del almacenamiento local (localStorage)\n    this.currentUser = JSON.parse(localStorage.getItem('usuario'));\n    this.serie = localStorage.getItem('serie') || 'todas';\n    this.search = localStorage.getItem('lastSearch') || '';\n    this.libroSeleccionado = JSON.parse(localStorage.getItem('libroSeleccionado')) || null;\n    this.unidadSeleccionada = JSON.parse(localStorage.getItem('unidadSeleccionada')) || null;\n    var filterContentFromLocalStorage = localStorage.getItem('filterContent');\n    this.filterContent = filterContentFromLocalStorage !== null ? filterContentFromLocalStorage === 'true' : true;\n    this.lastData = JSON.parse(localStorage.getItem('lastData')) || [];\n    this.lastQueryUrl = localStorage.getItem('lastQueryUrl') || '';\n    this.buildGetContentUrl();\n  },\n  data: function data() {\n    // Definición de datos del componente (estado)\n    return {\n      serie: '',\n      series: ['todas'],\n      libros: [],\n      librosFiltrados: [],\n      arregloLibros: [],\n      libroSeleccionado: null,\n      unidades: [],\n      unidadSeleccionada: null,\n      contenidos: [],\n      popupActivo: false,\n      modalContent: '',\n      modalTitle: '',\n      search: '',\n      currentUser: null,\n      lastFilter: true,\n      isRoot: false,\n      hasFormat: true,\n      isSearching: false,\n      filterContent: null,\n      getContentUrl: '',\n      timeout: null,\n      lastData: [],\n      lastQueryUrl: ''\n    };\n  },\n  methods: {\n    buildGetContentUrl: function buildGetContentUrl() {\n      var me = this;\n      var propList = [];\n      me.getContentUrl = \"\".concat(me.$server_url, \"biblioteca/contenidos?\");\n      if (me.$props.area.idarea) propList.push(\"idArea=\".concat(me.$props.area.idarea));\n      if (me.serie != 'todas') propList.push(\"serie=\".concat(me.serie));\n      if (me.libroSeleccionado) propList.push(\"idLibro=\".concat(me.libroSeleccionado.id));\n      if (me.search != '') propList.push(\"param=\".concat(me.search));\n      if (me.filterContent) propList.push(\"filterContent=\".concat(me.filterContent));\n      if (me.unidadSeleccionada) propList.push(\"idUnidad=\".concat(me.unidadSeleccionada.id_unidad_libro));\n      propList.map(function (prop, index) {\n        me.getContentUrl += \"\".concat(prop).concat(index < propList.length - 1 ? '&' : '');\n      });\n    },\n    // Métodos y funciones utilizados en el componente\n    seleccionarLibro: function seleccionarLibro(libro) {\n      // Comprueba si ya hay un libro seleccionado y si es el mismo libro que se hace clic\n      this.libroSeleccionado && this.libroSeleccionado.id === libro.id ? this.libroSeleccionado = null // Si el libro seleccionado es el mismo que se hizo clic nuevamente,se de-selecciona\n      : this.libroSeleccionado = libro; // Si el libro seleccionado no es el mismo que se hizo clic, establece el nuevo libro como seleccionado\n\n      // Después de seleccionar o de-seleccionar el libro, llama a las siguientes dos funciones\n      this.getUnidades(); // Obtiene las unidades relacionadas con el libro seleccionado\n      this.getContenidos(); // Obtiene los contenidos relacionados con el libro seleccionado\n    },\n    getContenidos: function getContenidos() {\n      var me = this;\n      me.buildGetContentUrl();\n      if (me.getContentUrl === me.lastQueryUrl) {\n        me.contenidos = me.lastData;\n        return;\n      }\n      me.isSearching = true; // Indica que se está realizando una búsqueda\n      if (me.search != localStorage.getItem('lastSearch')) me.lastFilter = false; // Comprueba si la búsqueda ha cambiado desde la última vez\n\n      // Realiza una solicitud HTTP para obtener contenidos\n      me.$http.get(me.getContentUrl).then(function (res) {\n        me.hasFormat = res.data.state ? false : true; // Establece la variable 'hasFormat' según el estado de los datos de respuesta\n        me.contenidos = res.data.data; // Asigna los contenidos obtenidos a la variable 'contenidos'\n        me.lastData = res.data.data; // Almacena los contenidos en la variable 'lastData'\n\n        // Asignar valores a las variables de almacenamiento local\n        localStorage.setItem('lastSearch', me.search); // Almacena la búsqueda actual en el almacenamiento local\n        localStorage.setItem('libroSeleccionado', me.libroSeleccionado ? JSON.stringify(me.libroSeleccionado) : null); // Almacena el libro seleccionado en el almacenamiento local\n        localStorage.setItem('unidadSeleccionada', me.unidadSeleccionada ? JSON.stringify(me.unidadSeleccionada) : null); // Almacena la unidad seleccionada en el almacenamiento local\n        localStorage.setItem('filterContent', me.filterContent); // Almacena el estado de 'filterContent' en el almacenamiento local\n        localStorage.setItem('lastData', JSON.stringify(me.lastData)); // Almacena los contenidos en el almacenamiento local\n        localStorage.setItem('lastQueryUrl', me.getContentUrl); // Almacena la URL de la última consulta en el almacenamiento local\n\n        me.isSearching = false; // Indica que la búsqueda ha finalizado\n      }).catch(function (err) {\n        // En caso de error, muestra una notificación de error\n        me.$vs.notify({\n          title: 'Error',\n          text: err.message,\n          color: 'danger',\n          position: 'top-right'\n        });\n        me.isSearching = false; // Indica que la búsqueda ha finalizado debido a un error\n      }).finally(function () {\n        me.$vs.loading.close(); // Cierra el indicador de carga después de que la búsqueda haya terminado\n      });\n    },\n    getLibros: function getLibros() {\n      var _this = this;\n      this.$vs.loading(); // Muestra un indicador de carga\n      var area = this.$props.area; // Obtiene el área actual desde las propiedades del componente\n\n      // Realiza una solicitud HTTP para obtener la lista de libros\n      this.$http.get(\"\".concat(this.$server_url, \"biblioteca/libros?idArea=\").concat(area.idarea)).then(function (res) {\n        _this.libros = res.data.data.map(function (l) {\n          return new LibroModel(l);\n        }); // Transforma los datos de respuesta en objetos LibroModel y los almacena en 'libros'\n\n        _this.series = _toConsumableArray(new Set(_this.libros.map(function (l) {\n          return l.serie;\n        }))); // Crea una lista de series únicas a partir de los libros y la almacena en 'series'\n\n        _this.serie = _this.serie || _this.series[0]; // Si 'serie' no está definida, asigna la primera serie de la lista 'series'\n\n        _this.librosFiltrados = _this.libros; // Establece 'librosFiltrados' como la lista completa de libros\n\n        // Crea un nuevo arreglo 'arregloLibros' con formato especial\n        _this.arregloLibros = _this.librosFiltrados.map(function (item) {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            label: \"\".concat(item.serie.toUpperCase().trim(), \" - \").concat(item.nombre.toUpperCase().trim())\n          });\n        });\n\n        // Verifica si 'libroSeleccionado' sigue siendo válido\n        if (_this.libroSeleccionado) {\n          var libro = _this.arregloLibros.find(function (l) {\n            return l.id === _this.libroSeleccionado.id;\n          });\n          if (!libro) {\n            _this.libroSeleccionado = null;\n          } else {\n            _this.getUnidades(); // Si el libro seleccionado sigue siendo válido, obtiene las unidades relacionadas con el libro\n          }\n        }\n      }).catch(function (err) {\n        // En caso de error, muestra una notificación de error\n        _this.$vs.notify({\n          title: 'Error',\n          text: err.message,\n          color: 'danger',\n          position: 'top-right'\n        });\n      }).finally(function () {\n        _this.filtrar(); // Ejecuta la función 'filtrar' al finalizar la solicitud\n        _this.$vs.loading.close(); // Cierra el indicador de carga\n      });\n    },\n    getUnidades: function getUnidades() {\n      var me = this; // Guarda una referencia al componente en una variable local\n\n      // Verifica si se ha seleccionado un libro\n      if (me.libroSeleccionado) {\n        me.$vs.loading(); // Muestra un indicador de carga\n\n        // Realiza una solicitud HTTP para obtener las unidades relacionadas con el libro seleccionado\n        me.$http.get(\"\".concat(me.$server_url, \"biblioteca/libros/\").concat(me.libroSeleccionado.id, \"/unidades\")).then(function (res) {\n          me.unidades = res.data.data; // Almacena los datos de unidades en la variable 'unidades'\n\n          // Transforma los datos de unidades en un formato especial\n          me.unidades = res.data.data.map(function (u) {\n            return _objectSpread(_objectSpread({}, u), {}, {\n              label: \"\".concat(u.unidad.toUpperCase().trim())\n            });\n          });\n\n          // Verifica si 'unidadSeleccionada' sigue siendo válida\n          if (me.unidadSeleccionada) {\n            var unidad = me.unidades.find(function (u) {\n              return u.id === me.unidadSeleccionada.id;\n            });\n            if (!unidad) {\n              me.unidadSeleccionada = null; // Si 'unidadSeleccionada' ya no es válida, se establece en 'null'\n            }\n          }\n        }).catch(function (err) {\n          // En caso de error, muestra una notificación de error\n          me.$vs.notify({\n            title: 'Error',\n            text: err.message,\n            color: 'danger',\n            position: 'top-right'\n          });\n        }).finally(function () {\n          me.$vs.loading.close(); // Cierra el indicador de carga\n        });\n      }\n    },\n    filtrar: function filtrar() {\n      var _this2 = this;\n      localStorage.setItem('serie', this.serie); // Almacena la serie seleccionada en el almacenamiento local\n\n      // Filtra los libros en función de la serie seleccionada o selecciona todos ('todas')\n      if (this.serie === 'todas') {\n        this.librosFiltrados = this.libros; // Si se selecciona 'todas', muestra todos los libros\n      } else {\n        this.librosFiltrados = this.libros.filter(function (l) {\n          return l.serie === _this2.serie;\n        }); // Si se selecciona una serie específica, filtra los libros por esa serie\n      }\n\n      // Crea un nuevo arreglo 'arregloLibros' con formato especial\n      this.arregloLibros = this.librosFiltrados.map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          label: \"\".concat(item.serie.toUpperCase().trim(), \" - \").concat(item.nombre.toUpperCase().trim())\n        });\n      });\n      this.getContenidos(); // Llama a la función 'getContenidos' para obtener los contenidos actualizados\n    },\n    openModal: function openModal(content) {\n      this.modalContent = content;\n      this.popupActivo = true;\n      switch (content) {\n        case 'formato':\n          this.modalTitle = 'Administrar formato';\n          break;\n        case 'form':\n          this.modalTitle = 'Agregar contenido';\n          break;\n        default:\n          break;\n      }\n    },\n    checkRole: function checkRole() {\n      var me = this; // Almacena una referencia al componente en una variable local\n\n      me.$vs.loading(); // Muestra un indicador de carga\n\n      // Realiza una solicitud HTTP para verificar los permisos del usuario actual\n      me.$http.get(\"\".concat(this.$server_url, \"permisos/\").concat(this.currentUser.idusuario)).then(function (res) {\n        // Comprueba si la respuesta contiene datos (permisos)\n        res.data.length !== 0 ? me.isRoot = true // Si el usuario tiene permisos, establece 'isRoot' en 'true'\n        : me.isRoot = false; // Si el usuario no tiene permisos, establece 'isRoot' en 'false'\n      }).catch(function (err) {\n        // En caso de error, muestra una notificación de error\n        me.$vs.notify({\n          title: 'Error',\n          text: err.message,\n          color: 'danger',\n          position: 'top-right'\n        });\n\n        // Establece 'isRoot' en 'false' y redirige al usuario a la página de inicio\n        me.isRoot = false;\n        me.$router.push('/');\n      }).finally(function () {\n        me.$vs.loading.close(); // Cierra el indicador de carga\n      });\n    },\n    clear: function clear() {\n      this.lastData = [];\n      localStorage.removeItem('lastData');\n    },\n    openForm: function openForm() {\n      this.$router.push({\n        name: 'biblioteca-form'\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.$vs.loading();\n    this.getLibros();\n    this.checkRole();\n  },\n  watch: {\n    serie: function serie() {\n      // Verifica si 'serie' está vacío, si es así, establece 'serie' en 'todas' y realiza otras acciones\n      if (!this.serie) {\n        this.serie = 'todas';\n        this.lastFilter = false;\n        this.libroSeleccionado = null;\n        this.unidadSeleccionada = null;\n      }\n      var ls = localStorage.getItem('serie'); // Obtiene el valor de 'serie' almacenado en el almacenamiento local (localStorage)\n\n      // Compara 'serie' con el valor almacenado en el almacenamiento local y toma acciones si son diferentes\n      if (this.serie !== ls) {\n        this.lastFilter = false;\n        this.libroSeleccionado = null;\n        this.unidadSeleccionada = null;\n      }\n      this.filtrar(); // Llama a la función 'filtrar' para actualizar la lista de libros según los cambios en 'serie'\n    },\n    search: function search() {\n      var _this3 = this;\n      // Wait 500ms before calling the function once the user has stopped typing\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        _this3.getContenidos();\n      }, 500);\n    },\n    lastFilter: function lastFilter() {\n      this.lastFilter = true; // Establece 'lastFilter' en 'true' cuando cambia esta propiedad\n    },\n    libroSeleccionado: function libroSeleccionado() {\n      var ls = JSON.parse(localStorage.getItem('libroSeleccionado')); // Obtiene el valor de 'libroSeleccionado' almacenado en el almacenamiento local (localStorage)\n\n      // Comprueba si 'libroSeleccionado' no existe o si ha cambiado en comparación con el valor almacenado\n      if (!this.libroSeleccionado || ls && this.libroSeleccionado.id !== ls.id) {\n        this.unidadSeleccionada = null; // Si no existe o ha cambiado, establece 'unidadSeleccionada' en 'null'\n      }\n\n      // Llama a las funciones 'getUnidades' y 'getContenidos' para actualizar los datos relacionados con el libro seleccionado\n      this.getUnidades();\n      this.getContenidos();\n    },\n    unidadSeleccionada: function unidadSeleccionada() {\n      this.getContenidos(); // Llama a la función 'getContenidos' para actualizar los contenidos relacionados con la unidad seleccionada\n    },\n    filterContent: function filterContent() {\n      this.getContenidos(); // Llama a la función 'getContenidos' para actualizar los contenidos según los cambios en 'filterContent'\n    }\n  }\n};",{"version":3,"names":["vSelect","Libros","FormatForm","ContenidoCard","TablaContenido","LoadingIndicator","LibroModel","components","props","area","type","Object","required","created","currentUser","JSON","parse","localStorage","getItem","serie","search","libroSeleccionado","unidadSeleccionada","filterContentFromLocalStorage","filterContent","lastData","lastQueryUrl","buildGetContentUrl","data","series","libros","librosFiltrados","arregloLibros","unidades","contenidos","popupActivo","modalContent","modalTitle","lastFilter","isRoot","hasFormat","isSearching","getContentUrl","timeout","methods","me","propList","concat","$server_url","$props","idarea","push","id","id_unidad_libro","map","prop","index","length","seleccionarLibro","libro","getUnidades","getContenidos","$http","get","then","res","state","setItem","stringify","catch","err","$vs","notify","title","text","message","color","position","finally","loading","close","getLibros","_this","l","_toConsumableArray","Set","item","_objectSpread","label","toUpperCase","trim","nombre","find","filtrar","u","unidad","_this2","filter","openModal","content","checkRole","idusuario","$router","clear","removeItem","openForm","name","mounted","watch","ls","_this3","clearTimeout","setTimeout"],"sources":["src/views/biblioteca/content/Contenidos/Contenidos.vue"],"sourcesContent":["<template>\r\n  <div class=\"w-full flex flex-col mt-2\">\r\n    <LoadingIndicator :loading=\"isSearching\" />\r\n\r\n    <div v-if=\"currentUser.id_group === 30\" class=\"w-full flex flex-col space-y-2 items-start\">\r\n      <vs-input class=\"w-full\" icon-after=\"true\" label-placeholder=\"icon-after\" icon=\"search\"\r\n        placeholder=\"Buscar contenidos\" v-model=\"search\" />\r\n      <!-- Check box -->\r\n      <div class=\"flex items-center\">\r\n        <input type=\"checkbox\" class=\"form-checkbox h-5 w-5 text-gray-600\" v-model=\"filterContent\">\r\n        <span class=\"ml-2 text-gray-700\">Buscar en contenido</span>\r\n      </div>\r\n    </div>\r\n    <span v-if=\"filterContent\" class=\"text-sm text-gray-700 mb-2\">La búsqueda se realizará en el contenido de los\r\n      libros, por lo que puede tardar un poco más.</span>\r\n\r\n    <div\r\n      class=\"w-full flex flex-col-reverse sm:flex-row sm:justify-between space-y-2 md:space-y-0 items-start sm:items-center\">\r\n      <v-select class=\"w-48\" label=\"Tipo de campo\" :options=\"series\" :reduce=\"series => series\" v-model=\"serie\">\r\n        <template #header>Series</template>\r\n      </v-select>\r\n      <div v-if=\"currentUser.id_group !== 30\" class=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2\">\r\n        <vs-button v-if=\"isRoot\" class=\"mb-0 h-16 m-0\" color=\"dark\" type=\"border\" @click=\"openModal('formato')\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" fill=\"#000\" viewBox=\"0 0 384 512\">\r\n            <path\r\n              d=\"M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM112 256H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16z\" />\r\n          </svg>\r\n          &nbsp;\r\n          &nbsp;\r\n          Administrar formato\r\n        </vs-button>\r\n        <vs-button v-if=\"hasFormat\" class=\"mb-0 h-16 m-0\" color=\"dark\" type=\"border\" @click=\"openForm\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 576 512\">\r\n            <path\r\n              d=\"M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384v38.6C310.1 219.5 256 287.4 256 368c0 59.1 29.1 111.3 73.7 143.3c-3.2 .5-6.4 .7-9.7 .7H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128zm48 96a144 144 0 1 1 0 288 144 144 0 1 1 0-288zm16 80c0-8.8-7.2-16-16-16s-16 7.2-16 16v48H368c-8.8 0-16 7.2-16 16s7.2 16 16 16h48v48c0 8.8 7.2 16 16 16s16-7.2 16-16V384h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H448V304z\" />\r\n          </svg>\r\n          &nbsp;\r\n          &nbsp;\r\n          Agregar contenido\r\n        </vs-button>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"!hasFormat && !isRoot\" class=\"flex flex-col items-center\">\r\n      <h3 class=\"text-xl font-bold\">No se ha creado un formato de contenido para ésta área. Contacte con soporte</h3>\r\n    </div>\r\n    <div v-if=\"currentUser.id_group === 30\">\r\n      <Libros v-if=\"serie !== ''\" :libros=\"librosFiltrados\" :seleccionar-libro=\"seleccionarLibro\"\r\n        :libro-seleccionado=\"libroSeleccionado\" />\r\n      <div v-if=\"lastData.length > 0\" class=\"flex justify-between items-end mt-2\">\r\n        <span class=\"text-2xl font-bold text-gray-900\">Última consulta</span>\r\n        <vs-button type=\"border\" color=\"dark\" @click=\"clear\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 576 512\">\r\n            <path\r\n              d=\"M566.6 9.4c12.5 12.5 12.5 32.8 0 45.3l-192 192 34.7 34.7c4.2 4.2 6.6 10 6.6 16c0 12.5-10.1 22.6-22.6 22.6H364.3L256 211.7V182.6c0-12.5 10.1-22.6 22.6-22.6c6 0 11.8 2.4 16 6.6l34.7 34.7 192-192c12.5-12.5 32.8-12.5 45.3 0zm-344 225.5L341.1 353.4c3.7 42.7-11.7 85.2-42.3 115.8C271.4 496.6 234.2 512 195.5 512L22.1 512C9.9 512 0 502.1 0 489.9c0-6.3 2.7-12.3 7.3-16.5L133.7 359.7c4.2-3.7-.4-10.4-5.4-7.9L77.2 377.4c-6.1 3-13.2-1.4-13.2-8.2c0-31.5 12.5-61.7 34.8-84l8-8c30.6-30.6 73.1-45.9 115.8-42.3zM464 352a80 80 0 1 1 0 160 80 80 0 1 1 0-160z\" />\r\n          </svg>\r\n          Limpiar registros</vs-button>\r\n      </div>\r\n      <div v-if=\"lastData.length > 0\" class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4\">\r\n        <ContenidoCard v-for=\"contenido, index of contenidos\" :key=\"index\" :contenido=\"contenido\" />\r\n      </div>\r\n      <div v-if=\"lastData.length === 0\" class=\"flex flex-col items-center\">\r\n        <img src=\"@/assets/icons/empty-folder.png\" alt=\"empty icon\" class=\"h-48 w-48\">\r\n        <h3 class=\"text-xl font-bold\">Sin datos para mostrar</h3>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"currentUser !== 30\" class=\"mt-4 flex flex-col space-y-1\">\r\n      <v-select :options=\"arregloLibros\" v-model=\"libroSeleccionado\">\r\n        <template #header>\r\n          <span class=\"font-bold\">Filtrar por libros</span>\r\n        </template>\r\n      </v-select>\r\n      <v-select :options=\"unidades\" v-model=\"unidadSeleccionada\">\r\n        <template #header>\r\n          <span class=\"font-bold\">Filtrar por unidades</span>\r\n        </template>\r\n      </v-select>\r\n      <TablaContenido :contenidos=\"contenidos\" :selected-serie=\"serie\" :selected-libro=\"libroSeleccionado\"\r\n        :selected-unidad=\"unidadSeleccionada\" @update=\"getContenidos\" />\r\n    </div>\r\n\r\n    <vs-popup :title=\"modalTitle\" :active.sync=\"popupActivo\">\r\n      <FormatForm v-if=\"modalContent === 'formato'\" :area=\"area\" />\r\n      <ContenidoForm v-if=\"modalContent === 'form'\" :area=\"area\" />\r\n    </vs-popup>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport vSelect from 'vue-select';\r\nimport Libros from './Libros.vue';\r\nimport FormatForm from '../FormFormat/Form.vue';\r\nimport ContenidoCard from '../../components/ContenidoCard.vue';\r\nimport TablaContenido from './TablaContenido.vue';\r\nimport LoadingIndicator from '../../components/LoadingIndicator.vue';\r\n\r\nimport LibroModel from '@/models/LibroModel'\r\n\r\nexport default ({\r\n  components: {\r\n    vSelect,\r\n    Libros,\r\n    FormatForm,\r\n    ContenidoCard,\r\n    TablaContenido,\r\n    LoadingIndicator,\r\n  },\r\n  props: {\r\n    area: {\r\n      type: Object,\r\n      required: false,\r\n    },\r\n  },\r\n  created() {\r\n    // Lógica que se ejecuta cuando se crea el componente\r\n    // Recuperación de datos del almacenamiento local (localStorage)\r\n    this.currentUser = JSON.parse(localStorage.getItem('usuario'));\r\n    this.serie = localStorage.getItem('serie') || 'todas';\r\n    this.search = localStorage.getItem('lastSearch') || '';\r\n    this.libroSeleccionado = JSON.parse(localStorage.getItem('libroSeleccionado')) || null;\r\n    this.unidadSeleccionada = JSON.parse(localStorage.getItem('unidadSeleccionada')) || null;\r\n    const filterContentFromLocalStorage = localStorage.getItem('filterContent');\r\n    this.filterContent = filterContentFromLocalStorage !== null ? filterContentFromLocalStorage === 'true' : true;\r\n    this.lastData = JSON.parse(localStorage.getItem('lastData')) || [];\r\n    this.lastQueryUrl = localStorage.getItem('lastQueryUrl') || '';\r\n    this.buildGetContentUrl();\r\n  },\r\n  data() {\r\n    // Definición de datos del componente (estado)\r\n    return {\r\n      serie: '',\r\n      series: ['todas'],\r\n      libros: [],\r\n      librosFiltrados: [],\r\n      arregloLibros: [],\r\n      libroSeleccionado: null,\r\n      unidades: [],\r\n      unidadSeleccionada: null,\r\n      contenidos: [],\r\n      popupActivo: false,\r\n      modalContent: '',\r\n      modalTitle: '',\r\n      search: '',\r\n      currentUser: null,\r\n      lastFilter: true,\r\n      isRoot: false,\r\n      hasFormat: true,\r\n      isSearching: false,\r\n      filterContent: null,\r\n      getContentUrl: '',\r\n      timeout: null,\r\n      lastData: [],\r\n      lastQueryUrl: '',\r\n    };\r\n  },\r\n  methods: {\r\n    buildGetContentUrl() {\r\n      const me = this;\r\n      let propList = [];\r\n      me.getContentUrl = `${me.$server_url}biblioteca/contenidos?`\r\n\r\n      if (me.$props.area.idarea) propList.push(`idArea=${me.$props.area.idarea}`);\r\n      if (me.serie != 'todas') propList.push(`serie=${me.serie}`);\r\n      if (me.libroSeleccionado) propList.push(`idLibro=${me.libroSeleccionado.id}`);\r\n      if (me.search != '') propList.push(`param=${me.search}`);\r\n      if (me.filterContent) propList.push(`filterContent=${me.filterContent}`);\r\n      if (me.unidadSeleccionada) propList.push(`idUnidad=${me.unidadSeleccionada.id_unidad_libro}`);\r\n\r\n      propList.map((prop, index) => {\r\n        me.getContentUrl += `${prop}${index < propList.length - 1 ? '&' : ''}`\r\n      });\r\n    },\r\n    // Métodos y funciones utilizados en el componente\r\n    seleccionarLibro(libro) {\r\n      // Comprueba si ya hay un libro seleccionado y si es el mismo libro que se hace clic\r\n      this.libroSeleccionado && this.libroSeleccionado.id === libro.id\r\n        ? this.libroSeleccionado = null // Si el libro seleccionado es el mismo que se hizo clic nuevamente,se de-selecciona\r\n        : this.libroSeleccionado = libro; // Si el libro seleccionado no es el mismo que se hizo clic, establece el nuevo libro como seleccionado\r\n\r\n      // Después de seleccionar o de-seleccionar el libro, llama a las siguientes dos funciones\r\n      this.getUnidades();    // Obtiene las unidades relacionadas con el libro seleccionado\r\n      this.getContenidos();  // Obtiene los contenidos relacionados con el libro seleccionado\r\n    },\r\n    getContenidos() {\r\n      const me = this;\r\n\r\n      me.buildGetContentUrl();\r\n\r\n      if (me.getContentUrl === me.lastQueryUrl) {\r\n        me.contenidos = me.lastData;\r\n        return;\r\n      }\r\n\r\n      me.isSearching = true; // Indica que se está realizando una búsqueda\r\n      if (me.search != localStorage.getItem('lastSearch')) me.lastFilter = false; // Comprueba si la búsqueda ha cambiado desde la última vez\r\n\r\n      // Realiza una solicitud HTTP para obtener contenidos\r\n      me.$http\r\n        .get(me.getContentUrl)\r\n        .then((res) => {\r\n          me.hasFormat = res.data.state ? false : true;// Establece la variable 'hasFormat' según el estado de los datos de respuesta\r\n          me.contenidos = res.data.data; // Asigna los contenidos obtenidos a la variable 'contenidos'\r\n          me.lastData = res.data.data; // Almacena los contenidos en la variable 'lastData'\r\n\r\n          // Asignar valores a las variables de almacenamiento local\r\n          localStorage.setItem('lastSearch', me.search); // Almacena la búsqueda actual en el almacenamiento local\r\n          localStorage.setItem('libroSeleccionado', me.libroSeleccionado ? JSON.stringify(me.libroSeleccionado) : null); // Almacena el libro seleccionado en el almacenamiento local\r\n          localStorage.setItem('unidadSeleccionada', me.unidadSeleccionada ? JSON.stringify(me.unidadSeleccionada) : null); // Almacena la unidad seleccionada en el almacenamiento local\r\n          localStorage.setItem('filterContent', me.filterContent); // Almacena el estado de 'filterContent' en el almacenamiento local\r\n          localStorage.setItem('lastData', JSON.stringify(me.lastData)); // Almacena los contenidos en el almacenamiento local\r\n          localStorage.setItem('lastQueryUrl', me.getContentUrl); // Almacena la URL de la última consulta en el almacenamiento local\r\n\r\n          me.isSearching = false; // Indica que la búsqueda ha finalizado\r\n        })\r\n        .catch((err) => {\r\n          // En caso de error, muestra una notificación de error\r\n          me.$vs.notify({\r\n            title: 'Error',\r\n            text: err.message,\r\n            color: 'danger',\r\n            position: 'top-right',\r\n          });\r\n          me.isSearching = false; // Indica que la búsqueda ha finalizado debido a un error\r\n        })\r\n        .finally(() => {\r\n          me.$vs.loading.close(); // Cierra el indicador de carga después de que la búsqueda haya terminado\r\n        });\r\n    },\r\n    getLibros() {\r\n      this.$vs.loading(); // Muestra un indicador de carga\r\n      const area = this.$props.area;// Obtiene el área actual desde las propiedades del componente\r\n\r\n      // Realiza una solicitud HTTP para obtener la lista de libros\r\n      this.$http\r\n        .get(`${this.$server_url}biblioteca/libros?idArea=${area.idarea}`)\r\n        .then((res) => {\r\n          this.libros = res.data.data.map((l) => new LibroModel(l)); // Transforma los datos de respuesta en objetos LibroModel y los almacena en 'libros'\r\n\r\n          this.series = [...new Set(this.libros.map((l) => l.serie))]; // Crea una lista de series únicas a partir de los libros y la almacena en 'series'\r\n\r\n          this.serie = this.serie || this.series[0]; // Si 'serie' no está definida, asigna la primera serie de la lista 'series'\r\n\r\n          this.librosFiltrados = this.libros; // Establece 'librosFiltrados' como la lista completa de libros\r\n\r\n          // Crea un nuevo arreglo 'arregloLibros' con formato especial\r\n          this.arregloLibros = this.librosFiltrados.map((item) => {\r\n            return { ...item, label: `${item.serie.toUpperCase().trim()} - ${item.nombre.toUpperCase().trim()}` }\r\n          });\r\n\r\n          // Verifica si 'libroSeleccionado' sigue siendo válido\r\n          if (this.libroSeleccionado) {\r\n            const libro = this.arregloLibros.find((l) => l.id === this.libroSeleccionado.id);\r\n            if (!libro) {\r\n              this.libroSeleccionado = null;\r\n            } else {\r\n              this.getUnidades(); // Si el libro seleccionado sigue siendo válido, obtiene las unidades relacionadas con el libro\r\n            }\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          // En caso de error, muestra una notificación de error\r\n          this.$vs.notify({\r\n            title: 'Error',\r\n            text: err.message,\r\n            color: 'danger',\r\n            position: 'top-right',\r\n          });\r\n        })\r\n        .finally(() => {\r\n          this.filtrar(); // Ejecuta la función 'filtrar' al finalizar la solicitud\r\n          this.$vs.loading.close(); // Cierra el indicador de carga\r\n        });\r\n    },\r\n    getUnidades() {\r\n      const me = this; // Guarda una referencia al componente en una variable local\r\n\r\n      // Verifica si se ha seleccionado un libro\r\n      if (me.libroSeleccionado) {\r\n        me.$vs.loading(); // Muestra un indicador de carga\r\n\r\n        // Realiza una solicitud HTTP para obtener las unidades relacionadas con el libro seleccionado\r\n        me.$http.get(`${me.$server_url}biblioteca/libros/${me.libroSeleccionado.id}/unidades`).then((res) => {\r\n          me.unidades = res.data.data; // Almacena los datos de unidades en la variable 'unidades'\r\n\r\n          // Transforma los datos de unidades en un formato especial\r\n          me.unidades = res.data.data.map((u) => {\r\n            return { ...u, label: `${u.unidad.toUpperCase().trim()}` }\r\n          });\r\n\r\n          // Verifica si 'unidadSeleccionada' sigue siendo válida\r\n          if (me.unidadSeleccionada) {\r\n            const unidad = me.unidades.find((u) => u.id === me.unidadSeleccionada.id);\r\n            if (!unidad) {\r\n              me.unidadSeleccionada = null; // Si 'unidadSeleccionada' ya no es válida, se establece en 'null'\r\n            }\r\n          }\r\n        }).catch((err) => {\r\n          // En caso de error, muestra una notificación de error\r\n          me.$vs.notify({\r\n            title: 'Error',\r\n            text: err.message,\r\n            color: 'danger',\r\n            position: 'top-right',\r\n          });\r\n        }).finally(() => {\r\n          me.$vs.loading.close(); // Cierra el indicador de carga\r\n        });\r\n      }\r\n    },\r\n    filtrar() {\r\n      localStorage.setItem('serie', this.serie); // Almacena la serie seleccionada en el almacenamiento local\r\n\r\n      // Filtra los libros en función de la serie seleccionada o selecciona todos ('todas')\r\n      if (this.serie === 'todas') {\r\n        this.librosFiltrados = this.libros; // Si se selecciona 'todas', muestra todos los libros\r\n      } else {\r\n        this.librosFiltrados = this.libros.filter((l) => l.serie === this.serie); // Si se selecciona una serie específica, filtra los libros por esa serie\r\n      }\r\n\r\n      // Crea un nuevo arreglo 'arregloLibros' con formato especial\r\n      this.arregloLibros = this.librosFiltrados.map((item) => {\r\n        return { ...item, label: `${item.serie.toUpperCase().trim()} - ${item.nombre.toUpperCase().trim()}` }\r\n      });\r\n\r\n      this.getContenidos(); // Llama a la función 'getContenidos' para obtener los contenidos actualizados\r\n    },\r\n    openModal(content) {\r\n      this.modalContent = content;\r\n      this.popupActivo = true;\r\n      switch (content) {\r\n        case 'formato':\r\n          this.modalTitle = 'Administrar formato';\r\n          break;\r\n        case 'form':\r\n          this.modalTitle = 'Agregar contenido';\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    },\r\n    checkRole() {\r\n      const me = this; // Almacena una referencia al componente en una variable local\r\n\r\n      me.$vs.loading(); // Muestra un indicador de carga\r\n\r\n      // Realiza una solicitud HTTP para verificar los permisos del usuario actual\r\n      me.$http\r\n        .get(`${this.$server_url}permisos/${this.currentUser.idusuario}`)\r\n        .then((res) => {\r\n          // Comprueba si la respuesta contiene datos (permisos)\r\n          res.data.length !== 0\r\n            ? me.isRoot = true // Si el usuario tiene permisos, establece 'isRoot' en 'true'\r\n            : me.isRoot = false; // Si el usuario no tiene permisos, establece 'isRoot' en 'false'\r\n        })\r\n        .catch((err) => {\r\n          // En caso de error, muestra una notificación de error\r\n          me.$vs.notify({\r\n            title: 'Error',\r\n            text: err.message,\r\n            color: 'danger',\r\n            position: 'top-right',\r\n          });\r\n\r\n          // Establece 'isRoot' en 'false' y redirige al usuario a la página de inicio\r\n          me.isRoot = false;\r\n          me.$router.push('/');\r\n        })\r\n        .finally(() => {\r\n          me.$vs.loading.close(); // Cierra el indicador de carga\r\n        });\r\n    },\r\n    clear() {\r\n      this.lastData = [];\r\n      localStorage.removeItem('lastData');\r\n    },\r\n    openForm() {\r\n      this.$router.push({ name: 'biblioteca-form' });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$vs.loading();\r\n    this.getLibros();\r\n    this.checkRole();\r\n\r\n\r\n  },\r\n  watch: {\r\n    serie() {\r\n      // Verifica si 'serie' está vacío, si es así, establece 'serie' en 'todas' y realiza otras acciones\r\n      if (!this.serie) {\r\n        this.serie = 'todas';\r\n        this.lastFilter = false;\r\n        this.libroSeleccionado = null;\r\n        this.unidadSeleccionada = null;\r\n      }\r\n\r\n      const ls = localStorage.getItem('serie'); // Obtiene el valor de 'serie' almacenado en el almacenamiento local (localStorage)\r\n\r\n      // Compara 'serie' con el valor almacenado en el almacenamiento local y toma acciones si son diferentes\r\n      if (this.serie !== ls) {\r\n        this.lastFilter = false;\r\n        this.libroSeleccionado = null;\r\n        this.unidadSeleccionada = null;\r\n      }\r\n      this.filtrar(); // Llama a la función 'filtrar' para actualizar la lista de libros según los cambios en 'serie'\r\n    },\r\n    search() {\r\n      // Wait 500ms before calling the function once the user has stopped typing\r\n      clearTimeout(this.timeout);\r\n      this.timeout = setTimeout(() => {\r\n        this.getContenidos();\r\n      }, 500);\r\n    },\r\n    lastFilter() {\r\n      this.lastFilter = true; // Establece 'lastFilter' en 'true' cuando cambia esta propiedad\r\n    },\r\n    libroSeleccionado() {\r\n      const ls = JSON.parse(localStorage.getItem('libroSeleccionado')); // Obtiene el valor de 'libroSeleccionado' almacenado en el almacenamiento local (localStorage)\r\n\r\n      // Comprueba si 'libroSeleccionado' no existe o si ha cambiado en comparación con el valor almacenado\r\n      if (!this.libroSeleccionado || (ls && this.libroSeleccionado.id !== ls.id)) {\r\n        this.unidadSeleccionada = null; // Si no existe o ha cambiado, establece 'unidadSeleccionada' en 'null'\r\n      }\r\n\r\n      // Llama a las funciones 'getUnidades' y 'getContenidos' para actualizar los datos relacionados con el libro seleccionado\r\n      this.getUnidades();\r\n      this.getContenidos();\r\n    },\r\n    unidadSeleccionada() {\r\n      this.getContenidos(); // Llama a la función 'getContenidos' para actualizar los contenidos relacionados con la unidad seleccionada\r\n    },\r\n    filterContent() {\r\n      this.getContenidos(); // Llama a la función 'getContenidos' para actualizar los contenidos según los cambios en 'filterContent'\r\n    }\r\n  },\r\n});\r\n</script>\r\n"],"mappings":"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","ignoreList":[]}]}