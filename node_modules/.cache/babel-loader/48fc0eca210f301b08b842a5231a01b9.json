{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\grafitex\\components\\GenerarCodigosGrafitex.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\grafitex\\components\\GenerarCodigosGrafitex.vue","mtime":1712682815666},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\babel.config.js","mtime":1712682813877},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\.babelrc","mtime":1712682813750},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/laragon/www/PRY_NEW_JEYSON/LOCAL/plataformaprolipa_vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport vSelect from 'vue-select';\nimport moment from 'moment';\nexport default {\n  data: function data() {\n    return {\n      usuario: [],\n      arregloCodigos: [],\n      codigosNoIngresados: [],\n      cantidad: 0,\n      estadoProceso: 0,\n      porcentaje: 0,\n      progressInterActivo: 0,\n      textAlertCant: '',\n      popupProblemas: false,\n      //varaibles para exportar excel\n      fileName: null,\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\n      cellAutoWidth: true,\n      selectedFormat: 'xlsx',\n      exportado: 0,\n      arregloSeries: [],\n      arregloLibros: [],\n      serieSelect: '',\n      libroSelect: '',\n      conActivacion: true,\n      conDiagnostica: true,\n      palabraDiagnostico: 'P',\n      codeA: '',\n      codeD: '',\n      tipoCodigo: '1',\n      contadorActivacion: 1,\n      contadorDiagnostico: 1,\n      codigo_liquidacion: '',\n      msgError: '',\n      fecha: '',\n      preCodigos: [],\n      preActivacion: []\n    };\n  },\n  components: {\n    vSelect: vSelect\n  },\n  created: function created() {\n    var me = this;\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n  },\n  mounted: function mounted() {\n    var me = this;\n    me.getSeries();\n    // moment.lang(\"es\")\n    // me.day        = ().format('DD');\n    // me.mes        = moment().format('MMMM');\n    // me.year       = moment().format('YYYY')\n    // let preFecha  = me.day+'-'+me.mes+'-'+me.year\n    // me.fecha      = preFecha.toUpperCase()\n  },\n  methods: {\n    getSeries: function getSeries() {\n      var _this = this;\n      var me = this;\n      this.$http.get(this.$server_url + 'series').then(function (res) {\n        _this.arregloSeries = res.data;\n      });\n    },\n    getLibros: function getLibros() {\n      var _this2 = this;\n      var me = this;\n      me.arregloLibros = [];\n      me.arregloCodigos = [];\n      me.libroSelect = '';\n      me.estadoProceso = 0;\n      me.exportado = 0;\n      if (me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined) {\n        me.$vs.notify({\n          text: 'Seleccione una serie por favor',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n        return;\n      }\n      this.$http.get(this.$server_url + 'libros_series/' + me.serieSelect.id_serie).then(function (res) {\n        _this2.arregloLibros = res.data;\n      });\n    },\n    //obtener el estado del ultimo codigo el contador\n    estadoContador: function estadoContador() {\n      var me = this;\n      if (me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined) {\n        me.contadorActivacion = 1;\n        me.contadorDiagnostico = 1;\n        return;\n      }\n      this.$http.get(this.$server_url + 'contadorCodigo?libro=' + me.libroSelect.idLibro).then(function (res) {\n        me.contadorActivacion = res.data.contador;\n        me.contadorDiagnostico = res.data.contadorDiagnostica;\n      }).catch(function (error) {\n        console.log(error + ' error');\n      });\n    },\n    //generar codigos\n    generarCodigos: function generarCodigos(fin) {\n      var me = this;\n      me.preCodigos = [];\n      me.preActivacion = [];\n      me.msgError = \"\";\n      if (me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined) {\n        me.$vs.notify({\n          text: 'Seleccione una serie por favor',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n        return;\n      }\n      if (me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined) {\n        me.$vs.notify({\n          text: 'Seleccione un libro por favor',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n        return;\n      }\n      this.codigo_liquidacion = me.libroSelect.codigo_liquidacion;\n      if (me.codigo_liquidacion == null || me.codigo_liquidacion == \"null\" || me.codigo_liquidacion == \"SIN CODIGO\") {\n        me.msgError = \"Este libro no tiene código de liquidación, comuníquese con soporte\";\n        return;\n      }\n      //activacion\n      this.codeA = this.codigo_liquidacion + \"-\";\n      //diagnostico\n      this.codeD = this.palabraDiagnostico + this.codigo_liquidacion + \"-\";\n      this.textAlertCant = '';\n      this.exportado = 0, this.arregloCodigos = [];\n      this.estadoProceso = 0;\n      this.porcentajeA = 0;\n      this.porcentajeD = 0;\n      if (fin > 3000) {\n        me.$vs.notify({\n          color: 'warning',\n          title: 'Mensaje',\n          text: 'Máximo 3000 códigos se puede generar para el excel'\n        });\n        return false;\n      }\n      if (fin == 0) {\n        me.$vs.notify({\n          color: 'warning',\n          title: 'Mensaje',\n          text: 'Debe escribir al menos 1 código para generar'\n        });\n        return false;\n      }\n      me.arregloCodigos = [];\n      var formData = new FormData();\n      formData.append('longitud', this.serieSelect.longitud_codigo);\n      formData.append('codeA', this.codeA);\n      formData.append('codeD', this.codeD);\n      formData.append('cantidad', fin);\n      me.$vs.loading();\n      this.$http.post(this.$server_url + 'grafitex/generarCodigosGrafitex', formData).then(function (res) {\n        me.$vs.loading.close();\n        var datos = res.data.codigos;\n        datos.map(function (p) {\n          me.arregloCodigos.push({\n            codigo_activacion: p.codigo_activacion,\n            codigo_diagnostico: p.codigo_diagnostico,\n            libro: me.libroSelect.nombre_imprimir,\n            serie: me.serieSelect.nombre_serie,\n            anio: me.libroSelect.year,\n            libro_idlibro: me.libroSelect.idLibro,\n            contadorCodigoA: '',\n            contadorCodigoD: ''\n          });\n          me.generarNombreFile();\n        });\n        // codigos ahora contiene los códigos de activación y diagnóstico en fila\n        me.estadoProceso = 1;\n        me.$vs.notify({\n          color: 'primary',\n          title: 'Mensaje',\n          text: 'Codigos Cargados'\n        });\n      }).catch(function (error) {\n        console.log(error + ' error');\n        me.$vs.loading.close();\n      });\n    },\n    formatCode: function formatCode() {\n      var me = this;\n      me.preCodigos = [];\n      me.preActivacion = [];\n      var nuevaData = me.arregloCodigos;\n      nuevaData.forEach(function (dato) {\n        me.preCodigos.push(dato.codigo_activacion);\n        me.preCodigos.push(dato.codigo_diagnostico);\n        me.preActivacion.push(dato.codigo_activacion);\n      });\n    },\n    generarNombreFile: function generarNombreFile() {\n      var me = this;\n      var currentDate = new Date();\n      var currenFecha = moment(currentDate, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\n      me.fileName = \"\".concat(this.arregloCodigos.length, \"c-\").concat(this.libroSelect.nombrelibro, \"-\").concat(currenFecha);\n    },\n    //Guardar codigos en la BD\n    guardarCodigos: function () {\n      var _guardarCodigos = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n        var me, formData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              me = this;\n              this.progressInterActivo = 1;\n              //tipoCodigo => 1 = activacion; 2 = diagnostica ; 3 = ambos\n              if (me.conActivacion && !me.conDiagnostica) me.tipoCodigo = 1;\n              if (!me.conActivacion && me.conDiagnostica) me.tipoCodigo = 2;\n              if (me.conActivacion && me.conDiagnostica) me.tipoCodigo = 3;\n              //enviar solo activacion\n              if (me.tipoCodigo == 1) {\n                me.arregloCodigos.forEach(function (p) {\n                  p.codigo_diagnostico = '';\n                });\n              }\n              //enviar solo diagnostica\n              if (me.tipoCodigo == 2) {\n                me.arregloCodigos.forEach(function (p) {\n                  p.codigo_activacion = null;\n                });\n              }\n              this.openLoadingColor();\n              formData = new FormData();\n              formData.append('tipoCodigo', me.tipoCodigo);\n              formData.append(\"user_created\", me.usuario.idusuario);\n              formData.append(\"data_codigos\", JSON.stringify(me.arregloCodigos));\n              formData.append(\"contadorActivacion\", me.contadorActivacion);\n              formData.append(\"contadorDiagnostico\", me.contadorDiagnostico);\n              me.$vs.loading();\n              //SE GENERA LOS CODIGOS PERO NO SE VERIFICA CON LA BASE\n              this.$http.post(this.$server_url + 'grafitex/codigos', formData).then(function (res) {\n                //porcentaje\n                me.arregloCodigos = [];\n                me.arregloCodigos = res.data.codigosGuardados;\n                me.codigosNoIngresados = res.data.codigosNoIngresados;\n                me.porcentajeA = res.data.porcentajeA;\n                me.porcentajeD = res.data.porcentajeD;\n                me.estadoProceso = 2;\n                me.codigos;\n                _this3.$vs.loading.close();\n                _this3.progressInterActivo = '';\n                if (_this3.codigosNoIngresados > 0) {\n                  me.popupProblemas = true;\n                } else {\n                  me.exportToExcel();\n                }\n              }).catch(function (error) {\n                this.$vs.loading.close();\n                alert('Error no existen códigos disponibles ' + error);\n              });\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function guardarCodigos() {\n        return _guardarCodigos.apply(this, arguments);\n      }\n      return guardarCodigos;\n    }(),\n    //METODOS PARA EXPORTAR EXCEL\n    exportToExcel: function exportToExcel() {\n      var _this4 = this;\n      var me = this;\n      //setear array\n      var printArray = [];\n      me.arregloCodigos.forEach(function (element) {\n        var cal = new Object();\n        cal.activacion_barras = \"*\" + element.codigo_activacion + \"*\";\n        cal.codigo_activacion = element.codigo_activacion;\n        cal.codigo_diagnostico = element.codigo_diagnostico;\n        cal.diagnostica_barras = \"*\" + element.codigo_diagnostico + \"*\";\n        cal.libro = element.libro;\n        cal.contadorCodigoA = element.contadorCodigoA + \" -\";\n        cal.contadorCodigoD = element.contadorCodigoD + \" -\";\n        printArray.push(cal);\n      });\n      var headerTitle = \"\";\n      var headerVal = \"\";\n      headerTitle = ['Activación barras', 'Código activación', 'Contador Activación', 'Activación', 'Diagnóstico barras', 'Prueba diagnóstico', 'Contador Diagnóstico', 'Diagnóstico'];\n      headerVal = ['activacion_barras', 'codigo_activacion', 'contadorCodigoA', '', 'diagnostica_barras', 'codigo_diagnostico', 'contadorCodigoD', ''];\n      var codigoSelectedMayus = printArray;\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\n        for (var key in codigoSelectedMayus[i]) {\n          if (typeof codigoSelectedMayus[i][key] == \"string\") {\n            codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\n          }\n        }\n      }\n      import('@/vendor/Export2Excel').then(function (excel) {\n        var list = codigoSelectedMayus;\n        var data = _this4.formatJson(headerVal, list);\n        for (var i = 0; i < data.length; i++) {\n          data[i][3] = \"Activación \" + me.libroSelect.nombre_imprimir;\n          data[i][7] = \"Diagnóstico \" + me.libroSelect.nombre_imprimir;\n        }\n        excel.export_json_to_excel({\n          header: headerTitle,\n          data: data,\n          filename: _this4.fileName,\n          autoWidth: _this4.cellAutoWidth,\n          bookType: _this4.selectedFormat\n        });\n        _this4.clearFields();\n        // this.textAlertCant  = '';\n        _this4.cantidad = '';\n        _this4.exportado = 1;\n        me.$vs.notify({\n          text: 'Se exporto corectamente',\n          color: 'success',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n      });\n    },\n    formatJson: function formatJson(filterVal, jsonData) {\n      return jsonData.map(function (v) {\n        return filterVal.map(function (j) {\n          return v[j];\n        });\n      });\n    },\n    clearFields: function clearFields() {\n      this.fileName = '';\n      this.cellAutoWidth = true;\n      this.selectedFormat = 'xls';\n    },\n    openLoadingColor: function openLoadingColor(libro) {\n      this.$vs.loading({\n        color: '#1A76F2'\n      });\n    }\n  }\n};",{"version":3,"names":["vSelect","moment","data","usuario","arregloCodigos","codigosNoIngresados","cantidad","estadoProceso","porcentaje","progressInterActivo","textAlertCant","popupProblemas","fileName","formats","cellAutoWidth","selectedFormat","exportado","arregloSeries","arregloLibros","serieSelect","libroSelect","conActivacion","conDiagnostica","palabraDiagnostico","codeA","codeD","tipoCodigo","contadorActivacion","contadorDiagnostico","codigo_liquidacion","msgError","fecha","preCodigos","preActivacion","components","created","me","JSON","parse","localStorage","getItem","mounted","getSeries","methods","_this","$http","get","$server_url","then","res","getLibros","_this2","undefined","$vs","notify","text","color","iconPack","icon","id_serie","estadoContador","idLibro","contador","contadorDiagnostica","catch","error","console","log","generarCodigos","fin","porcentajeA","porcentajeD","title","formData","FormData","append","longitud_codigo","loading","post","close","datos","codigos","map","p","push","codigo_activacion","codigo_diagnostico","libro","nombre_imprimir","serie","nombre_serie","anio","year","libro_idlibro","contadorCodigoA","contadorCodigoD","generarNombreFile","formatCode","nuevaData","forEach","dato","currentDate","Date","currenFecha","format","concat","length","nombrelibro","guardarCodigos","_guardarCodigos","_asyncToGenerator","regeneratorRuntime","mark","_callee","_this3","wrap","_callee$","_context","prev","next","openLoadingColor","idusuario","stringify","codigosGuardados","exportToExcel","alert","stop","apply","arguments","_this4","printArray","element","cal","Object","activacion_barras","diagnostica_barras","headerTitle","headerVal","codigoSelectedMayus","i","key","toUpperCase","excel","list","formatJson","export_json_to_excel","header","filename","autoWidth","bookType","clearFields","filterVal","jsonData","v","j"],"sources":["src/views/codigos/grafitex/components/GenerarCodigosGrafitex.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!--SELECT LIBRO-->\r\n    <div class=\"vx-row\">\r\n      <div class=\"vx-col sm:w-1/2 w-full mb-2\">\r\n        <span>Serie:</span>\r\n        <v-select @input=\"getLibros()\" :options=\"arregloSeries\" :reduce=\"arregloSeries => arregloSeries\" label=\"nombre_serie\" class=\"w-full\" v-model=\"serieSelect\" />\r\n      </div>\r\n      <div class=\"vx-col sm:w-1/2 w-full mb-2\">\r\n        <span>Libro:</span>\r\n        <v-select @input=\"arregloCodigos = [];estadoContador();estadoProceso=0;exportado=0;\" :options=\"arregloLibros\" :reduce=\"arregloLibros => arregloLibros\" label=\"nombrelibro\" class=\"w-full\" v-model=\"libroSelect\" />\r\n      </div>\r\n    </div>\r\n    <p class=\"text-danger text-2xl font-bold mt-2 text-center\" v-if=\"msgError\">{{ msgError }}</p>\r\n    <br>\r\n    <!--TOTAL GUARDADOS-->\r\n    <div class=\"flex justify-center\" v-if=\"estadoProceso == 2\">\r\n      <ul class=\"features flex justify-center\" >\r\n        <li>\r\n          <span class=\"icon\">\r\n            <svg height=\"24\" width=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n              <path fill=\"currentColor\" d=\"M10 15.172l9.192-9.193 1.415 1.414L10 18l-6.364-6.364 1.414-1.414z\"></path>\r\n            </svg>\r\n          </span>\r\n          <span><strong>Códigos Activación Ingresados: {{ porcentajeA }} </strong></span>\r\n        </li>\r\n        <li>\r\n          <span class=\"icon\">\r\n            <svg height=\"24\" width=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n              <path fill=\"currentColor\" d=\"M10 15.172l9.192-9.193 1.415 1.414L10 18l-6.364-6.364 1.414-1.414z\"></path>\r\n            </svg>\r\n          </span>\r\n          <span><strong>Códigos Diágnostico Ingresados: {{ porcentajeD }} </strong></span>\r\n        </li>\r\n        <li>\r\n          <span class=\"icon\">\r\n            <svg height=\"24\" width=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n              <path fill=\"currentColor\" d=\"M10 15.172l9.192-9.193 1.415 1.414L10 18l-6.364-6.364 1.414-1.414z\"></path>\r\n            </svg>\r\n          </span>\r\n          <span><strong>Total Ingresados: {{ porcentajeA+ porcentajeD }} </strong></span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <br>\r\n    <!--FIN SELECT LIBRO-->\r\n    <vs-progress v-if=\"porcentaje === 100 && estadoProceso > 0\" :height=\"8\" :percent=\"porcentaje\" color=\"success\"></vs-progress>\r\n    <vs-progress v-if=\"progressInterActivo != ''\" indeterminate color=\"primary\"></vs-progress>\r\n    <p class=\"text-center text-success font-bold text-3xl mt-3\" v-if=\"exportado == 1\"><ion-icon name=\"star-outline\"></ion-icon> Se exporto el archivo <b>{{ filename }}</b></p>\r\n    <!--GENERAR CODIGOS-->\r\n    <div class=\"flex mt-5\" style=\"flex-wrap:wrap;\">\r\n      <!--DESPUES DE IMPRIMIR-->\r\n      <div v-if=\"exportado == 1\">\r\n        <ul class=\"flex mt-2\">\r\n          <li>\r\n            <vs-checkbox color=\"#49D18F\" disabled v-model=\"conActivacion\">Activación</vs-checkbox>\r\n          </li>\r\n          <li>\r\n            <vs-checkbox color=\"#49D18F\" disabled v-model=\"conDiagnostica\">Diagnóstica</vs-checkbox>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <!--ANTES DE IMPRIMIR-->\r\n      <div v-else>\r\n        <ul class=\"flex mt-2\">\r\n          <li>\r\n            <vs-checkbox color=\"#49D18F\" v-model=\"conActivacion\">Activación</vs-checkbox>\r\n          </li>\r\n          <li>\r\n            <vs-checkbox color=\"#49D18F\" v-model=\"conDiagnostica\">Diagnóstica</vs-checkbox>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <span class=\"mt-3 ml-5 font-bold\">Cantidad:</span>\r\n      <div class=\"mt-1\">\r\n        <vx-tooltip color=\"warning\" text=\"Ingrese la cantidad de códigos que desea generar (máximo 3000)\">\r\n          <vs-input type=\"number\" class=\"inputx ml-2\" @keyup.enter=\"generarCodigos(cantidad);\" style=\"width: 150px; text-align: center;margin-top:-3px;\" v-model=\"cantidad\" />\r\n        </vx-tooltip>\r\n      </div>\r\n      <div>\r\n        <vs-button color=\"primary\" class=\"generarBoton ml-4\" size=\"small\" style=\"font-size: 13px;margin-top: 5px;\" @click=\"generarCodigos(cantidad);\"  v-if=\"cantidad<=3000\">Generar Códigos</vs-button>\r\n      </div>\r\n      <div>\r\n        <div v-if=\"estadoProceso == 1 && arregloCodigos[0]\" style=\"display:flex;\">\r\n          <vs-button color=\"success\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;margin-top: 5px;\" @click=\"guardarCodigos(); estadoProceso = 0;\">Guardar</vs-button>\r\n          <vx-tooltip color=\"warning\" text=\"Generar codigos de barras\" style=\"margin-left:20px;border-radius:20px;\">\r\n          </vx-tooltip>\r\n        </div>\r\n        <vx-tooltip v-if=\"estadoProceso == 2\" color=\"warning\" text=\"Antes de exportar seleccione los codigos deseados.\">\r\n            <vs-button color=\"dark\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;margin-top: 5px;\" @click=\"generarNombreFile();exportToExcel();\">Exportar</vs-button>\r\n        </vx-tooltip>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"preCodigos.length > 0\" class=\"vx-row mt-3\">\r\n      <div >\r\n        <div v-for=\"(item,key) in preCodigos\" :key=\"key\">\r\n          <p>{{ item }}</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"ml-5\">\r\n        <div v-for=\"(item,key2) in preActivacion\" :key=\"key2\">\r\n          <p>{{ item }}</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"ml-4\">\r\n        <div v-for=\"(item,key3) in preCodigos\" :key=\"key3\">\r\n          <p>OR codigo='{{ item }}'</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!--TABLA-->\r\n    <!-- <b style=\"color: #0AD68C;\">{{ textAlertCant }}</b> -->\r\n    <vs-table pagination max-items=\"25\" search :data=\"arregloCodigos\">\r\n      <template slot=\"header\">\r\n        <ion-icon name=\"eye-off-outline\" v-if=\"preCodigos.length > 0\" @click=\"preCodigos = []\"></ion-icon>\r\n        <p @click=\"formatCode()\" v-if=\"usuario.name_usuario =='sguacan'\">\r\n          <vs-chip>Cantidad {{ arregloCodigos.length  }}</vs-chip>\r\n        </p>\r\n        <vs-chip v-else>Cantidad {{ arregloCodigos.length  }}</vs-chip>\r\n      </template>\r\n      <template slot=\"thead\">\r\n        <vs-th sort-key=\"codigo_activacion\"  v-if=\"conActivacion\">Código activación</vs-th>\r\n        <vs-th sort-key=\"codigo_diagnostico\" v-if=\"conDiagnostica\">Código diagnóstico</vs-th>\r\n        <vs-th sort-key=\"libro\">Libro</vs-th>\r\n        <vs-th sort-key=\"anio\">Año</vs-th>\r\n        <vs-th sort-key=\"contador\"          v-if=\"conActivacion\">Contador A.</vs-th>\r\n        <vs-th sort-key=\"contador\"          v-if=\"conDiagnostica\">Contador D.</vs-th>\r\n      </template>\r\n      <template slot-scope=\"{data}\">\r\n        <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n          <vs-td v-if=\"conActivacion\">\r\n              {{ data[indextr].codigo_activacion }}\r\n          </vs-td>\r\n          <vs-td v-if=\"conDiagnostica\">\r\n            {{ data[indextr].codigo_diagnostico }}\r\n          </vs-td>\r\n          <vs-td>\r\n            {{ data[indextr].libro }}\r\n          </vs-td>\r\n          <vs-td>\r\n            {{ data[indextr].anio }}\r\n          </vs-td>\r\n          <vs-td v-if=\"conActivacion\">\r\n            {{ data[indextr].contadorCodigoA }}\r\n          </vs-td>\r\n          <vs-td v-if=\"conDiagnostica\">\r\n            {{ data[indextr].contadorCodigoD }}\r\n          </vs-td>\r\n        </vs-tr>\r\n      </template>\r\n    </vs-table>\r\n    <!--MODAL-->\r\n    <!--MODAL PROBLEMA CODIGOS-->\r\n    <vs-popup classContent=\"popup-example\" title=\"códigos que no se pudieron ingresar\" :active.sync=\"popupProblemas\">\r\n      <vs-table multiple pagination max-items=\"10\" search :data=\"codigosNoIngresados\" v-if=\"popupProblemas\">\r\n        <template slot=\"header\">\r\n        </template>\r\n        <template slot=\"thead\">\r\n          <vs-th sort-key=\"codigo\">Código activación</vs-th>\r\n          <vs-th sort-key=\"codigo\">Código Diagnóstico</vs-th>\r\n          <vs-th sort-key=\"codigo\">Motivo</vs-th>\r\n        </template>\r\n        <template slot-scope=\"{data}\">\r\n          <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n            <vs-td :data=\"data[indextr].codigo_activacion\">\r\n                {{ data[indextr].codigo_activacion }}\r\n            </vs-td>\r\n            <vs-td :data=\"data[indextr].codigo_diagnostico\">\r\n              {{ data[indextr].codigo_diagnostico }}\r\n            </vs-td>\r\n            <vs-td :data=\"data[indextr].message\">\r\n              {{ data[indextr].message }}\r\n            </vs-td>\r\n          </vs-tr>\r\n        </template>\r\n      </vs-table>\r\n    </vs-popup>\r\n  </div>\r\n</template>\r\n<script>\r\nimport vSelect from 'vue-select'\r\nimport moment from 'moment'\r\nexport default{\r\n  data(){\r\n    return{\r\n      usuario:[],\r\n      arregloCodigos:[],\r\n      codigosNoIngresados:[],\r\n      cantidad:0,\r\n      estadoProceso:0,\r\n      porcentaje:0,\r\n      progressInterActivo:0,\r\n      textAlertCant:'',\r\n      popupProblemas:false,\r\n      //varaibles para exportar excel\r\n      fileName: null,\r\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n      cellAutoWidth: true,\r\n      selectedFormat: 'xlsx',\r\n      exportado:0,\r\n      arregloSeries:[],\r\n      arregloLibros:[],\r\n      serieSelect:'',\r\n      libroSelect:'',\r\n      conActivacion:true,\r\n      conDiagnostica:true,\r\n      palabraDiagnostico:'P',\r\n      codeA:'',\r\n      codeD:'',\r\n      tipoCodigo:'1',\r\n      contadorActivacion:1,\r\n      contadorDiagnostico:1,\r\n      codigo_liquidacion:'',\r\n      msgError:'',\r\n      fecha:'',\r\n      preCodigos:[],\r\n      preActivacion:[],\r\n    }\r\n  },\r\n  components:{\r\n    vSelect,\r\n  },\r\n  created(){\r\n    let me = this;\r\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n  },\r\n  mounted(){\r\n    let me = this;\r\n    me.getSeries()\r\n    // moment.lang(\"es\")\r\n    // me.day        = ().format('DD');\r\n    // me.mes        = moment().format('MMMM');\r\n    // me.year       = moment().format('YYYY')\r\n    // let preFecha  = me.day+'-'+me.mes+'-'+me.year\r\n    // me.fecha      = preFecha.toUpperCase()\r\n  },\r\n  methods:{\r\n    getSeries(){\r\n      let me = this;\r\n      this.$http.get(this.$server_url + 'series').then(res => {\r\n        this.arregloSeries = res.data;\r\n      })\r\n    },\r\n    getLibros(){\r\n      let me = this;\r\n      me.arregloLibros  = []\r\n      me.arregloCodigos = []\r\n      me.libroSelect    = ''\r\n      me.estadoProceso  = 0;\r\n      me.exportado      = 0;\r\n      if(me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined){\r\n        me.$vs.notify({\r\n        text:'Seleccione una serie por favor',\r\n        color:'warning',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n        return\r\n      }\r\n      this.$http.get(this.$server_url + 'libros_series/' + me.serieSelect.id_serie).then(res => {\r\n        this.arregloLibros  = res.data;\r\n      })\r\n    },\r\n    //obtener el estado del ultimo codigo el contador\r\n    estadoContador(){\r\n      let me = this;\r\n      if(me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined){\r\n        me.contadorActivacion  = 1\r\n        me.contadorDiagnostico = 1\r\n        return\r\n      }\r\n      this.$http.get(this.$server_url+'contadorCodigo?libro='+me.libroSelect.idLibro)\r\n      .then(function (res) {\r\n        me.contadorActivacion  = res.data.contador\r\n        me.contadorDiagnostico = res.data.contadorDiagnostica\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error + ' error');\r\n      })\r\n    },\r\n    //generar codigos\r\n    generarCodigos(fin) {\r\n      let me = this;\r\n      me.preCodigos     = []\r\n      me.preActivacion  = []\r\n      me.msgError = \"\"\r\n      if(me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined){\r\n        me.$vs.notify({\r\n        text:'Seleccione una serie por favor',\r\n        color:'warning',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n        return\r\n      }\r\n      if(me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined){\r\n        me.$vs.notify({\r\n        text:'Seleccione un libro por favor',\r\n        color:'warning',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n        return\r\n      }\r\n      this.codigo_liquidacion = me.libroSelect.codigo_liquidacion\r\n      if(me.codigo_liquidacion == null || me.codigo_liquidacion == \"null\" || me.codigo_liquidacion == \"SIN CODIGO\"){\r\n        me.msgError = \"Este libro no tiene código de liquidación, comuníquese con soporte\"\r\n        return\r\n      }\r\n      //activacion\r\n      this.codeA             = this.codigo_liquidacion + \"-\";\r\n      //diagnostico\r\n      this.codeD             = this.palabraDiagnostico+this.codigo_liquidacion + \"-\";\r\n      this.textAlertCant     = '';\r\n      this.exportado         = 0,\r\n      this.arregloCodigos    = []\r\n      this.estadoProceso     = 0\r\n      this.porcentajeA       = 0\r\n      this.porcentajeD       = 0\r\n      if (fin > 3000) {\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'Máximo 3000 códigos se puede generar para el excel'\r\n        })\r\n        return false;\r\n      }\r\n      if(fin == 0 ){\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'Debe escribir al menos 1 código para generar'\r\n        })\r\n        return false;\r\n      }\r\n      me.arregloCodigos              = [];\r\n      let formData = new FormData();\r\n      formData.append('longitud',  this.serieSelect.longitud_codigo);\r\n      formData.append('codeA',     this.codeA);\r\n      formData.append('codeD',     this.codeD);\r\n      formData.append('cantidad',  fin);\r\n      me.$vs.loading();\r\n      this.$http.post(this.$server_url+'grafitex/generarCodigosGrafitex', formData)\r\n      .then(function (res) {\r\n        me.$vs.loading.close()\r\n        let datos         = res.data.codigos\r\n        datos.map(p => {\r\n          me.arregloCodigos.push({\r\n            codigo_activacion   : p.codigo_activacion,\r\n            codigo_diagnostico  : p.codigo_diagnostico,\r\n            libro               : me.libroSelect.nombre_imprimir,\r\n            serie               : me.serieSelect.nombre_serie,\r\n            anio                : me.libroSelect.year,\r\n            libro_idlibro       : me.libroSelect.idLibro,\r\n            contadorCodigoA     : '',\r\n            contadorCodigoD     : '',\r\n          });\r\n          me.generarNombreFile()\r\n        })\r\n        // codigos ahora contiene los códigos de activación y diagnóstico en fila\r\n        me.estadoProceso = 1;\r\n        me.$vs.notify({\r\n          color: 'primary',\r\n          title: 'Mensaje',\r\n          text: 'Codigos Cargados'\r\n        })\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error + ' error');\r\n        me.$vs.loading.close()\r\n      })\r\n    },\r\n    formatCode(){\r\n      let me = this\r\n      me.preCodigos     = []\r\n      me.preActivacion  = []\r\n      let nuevaData = me.arregloCodigos\r\n      nuevaData.forEach((dato) => {\r\n        me.preCodigos.push(dato.codigo_activacion);\r\n        me.preCodigos.push(dato.codigo_diagnostico);\r\n        me.preActivacion.push(dato.codigo_activacion);\r\n      });\r\n    },\r\n    generarNombreFile(){\r\n      let me = this;\r\n      const currentDate = new Date();\r\n      const currenFecha = moment(currentDate, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\r\n      me.fileName = `${this.arregloCodigos.length}c-${this.libroSelect.nombrelibro}-${currenFecha}`\r\n    },\r\n    //Guardar codigos en la BD\r\n    async guardarCodigos() {\r\n      let me = this;\r\n      this.progressInterActivo     = 1;\r\n      //tipoCodigo => 1 = activacion; 2 = diagnostica ; 3 = ambos\r\n      if(me.conActivacion   && !me.conDiagnostica)  me.tipoCodigo = 1\r\n      if(!me.conActivacion  && me.conDiagnostica)   me.tipoCodigo = 2\r\n      if(me.conActivacion   && me.conDiagnostica)   me.tipoCodigo = 3\r\n      //enviar solo activacion\r\n      if(me.tipoCodigo == 1){\r\n        me.arregloCodigos.forEach(p => {\r\n          p.codigo_diagnostico = '';\r\n        });\r\n      }\r\n      //enviar solo diagnostica\r\n      if(me.tipoCodigo == 2){\r\n        me.arregloCodigos.forEach(p => {\r\n          p.codigo_activacion = null;\r\n        });\r\n      }\r\n      this.openLoadingColor()\r\n      var formData = new FormData();\r\n      formData.append('tipoCodigo',           me.tipoCodigo)\r\n      formData.append(\"user_created\",         me.usuario.idusuario);\r\n      formData.append(\"data_codigos\",         JSON.stringify(me.arregloCodigos));\r\n      formData.append(\"contadorActivacion\",   me.contadorActivacion);\r\n      formData.append(\"contadorDiagnostico\",  me.contadorDiagnostico);\r\n      me.$vs.loading();\r\n      //SE GENERA LOS CODIGOS PERO NO SE VERIFICA CON LA BASE\r\n      this.$http.post(this.$server_url + 'grafitex/codigos', formData)\r\n      .then(res => {\r\n        //porcentaje\r\n        me.arregloCodigos           = []\r\n        me.arregloCodigos           = res.data.codigosGuardados\r\n        me.codigosNoIngresados      = res.data.codigosNoIngresados\r\n        me.porcentajeA              = res.data.porcentajeA\r\n        me.porcentajeD              = res.data.porcentajeD\r\n        me.estadoProceso            = 2;\r\n        me.codigos\r\n        this.$vs.loading.close()\r\n        this.progressInterActivo    = '';\r\n        if(this.codigosNoIngresados > 0){\r\n          me.popupProblemas         = true\r\n        }else{\r\n          me.exportToExcel()\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        this.$vs.loading.close()\r\n        alert('Error no existen códigos disponibles ' + error);\r\n      });\r\n    },\r\n    //METODOS PARA EXPORTAR EXCEL\r\n    exportToExcel() {\r\n      let me = this\r\n      //setear array\r\n      var printArray = []\r\n      me.arregloCodigos.forEach(element => {\r\n        var cal = new Object()\r\n        cal.activacion_barras   = \"*\"+element.codigo_activacion+\"*\"\r\n        cal.codigo_activacion   = element.codigo_activacion\r\n        cal.codigo_diagnostico  = element.codigo_diagnostico\r\n        cal.diagnostica_barras  = \"*\"+element.codigo_diagnostico+\"*\"\r\n        cal.libro               = element.libro\r\n        cal.contadorCodigoA     = element.contadorCodigoA +\" -\"\r\n        cal.contadorCodigoD     = element.contadorCodigoD +\" -\"\r\n        printArray.push(cal)\r\n     });\r\n      let headerTitle = \"\"\r\n      let headerVal = \"\"\r\n        headerTitle = [\r\n          'Activación barras',\r\n          'Código activación',\r\n          'Contador Activación',\r\n          'Activación',\r\n          'Diagnóstico barras',\r\n          'Prueba diagnóstico',\r\n          'Contador Diagnóstico',\r\n          'Diagnóstico',\r\n        ];\r\n        headerVal = [\r\n          'activacion_barras',\r\n          'codigo_activacion',\r\n          'contadorCodigoA',\r\n          '',\r\n          'diagnostica_barras',\r\n          'codigo_diagnostico',\r\n          'contadorCodigoD',\r\n          ''\r\n        ];\r\n      let codigoSelectedMayus = printArray\r\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n        for (var key in codigoSelectedMayus[i]) {\r\n            if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n                codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n            }\r\n        }\r\n      }\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const list = codigoSelectedMayus\r\n        const data = this.formatJson(headerVal, list)\r\n        for (var i = 0; i < data.length; i++) {\r\n          data[i][3]   =\"Activación \"+me.libroSelect.nombre_imprimir\r\n          data[i][7]   =\"Diagnóstico \"+me.libroSelect.nombre_imprimir\r\n        }\r\n        excel.export_json_to_excel({\r\n          header: headerTitle,\r\n          data,\r\n          filename: this.fileName,\r\n          autoWidth: this.cellAutoWidth,\r\n          bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n        // this.textAlertCant  = '';\r\n        this.cantidad       = '';\r\n        this.exportado      = 1\r\n        me.$vs.notify({\r\n        text:'Se exporto corectamente',\r\n        color:'success',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => {\r\n            return v[j]\r\n        }))\r\n    },\r\n    clearFields() {\r\n        this.fileName = ''\r\n        this.cellAutoWidth = true\r\n        this.selectedFormat = 'xls'\r\n    },\r\n    openLoadingColor(libro) {\r\n      this.$vs.loading({\r\n          color: '#1A76F2'\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n<style scoped>\r\n/*CSS IMPORTADOS*/\r\n.features {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.features li {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n.features li + * {\r\n  margin-top: 0.75rem;\r\n}\r\n.features .icon {\r\n  background-color: #1FCAC5;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  border-radius: 50%;\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n.features .icon svg {\r\n  width: 14px;\r\n  height: 14px;\r\n}\r\n.features + * {\r\n  margin-top: 1.25rem;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]}]}