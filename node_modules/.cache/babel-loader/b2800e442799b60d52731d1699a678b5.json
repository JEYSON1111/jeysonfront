{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\EvaluacionesComponent.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\EvaluacionesComponent.vue","mtime":1712682815857},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\babel.config.js","mtime":1712682813877},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\.babelrc","mtime":1712682813750},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-nan\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.regexp.split\";\nimport crearPreguntas from \"./PreguntasComponent.vue\";\nimport flatPickr from 'vue-flatpickr-component';\nimport 'flatpickr/dist/flatpickr.css';\nimport Vue from 'vue';\nimport axios from 'axios';\nimport vSelect from 'vue-select';\nimport moment from 'moment';\nimport VueRouter from 'vue-router';\nimport $ from 'jquery';\nexport default {\n  data: function data() {\n    return {\n      fileName: null,\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\n      cellAutoWidth: true,\n      selectedFormat: 'xls',\n      activePrompt: false,\n      popupGrupos: false,\n      evaluaciones: [],\n      evaluacion: {\n        nombre: '',\n        asignatura: '',\n        descripcion: '',\n        fecha_inicio: '',\n        fecha_fin: '',\n        estado: '',\n        puntos: '',\n        duracion: ''\n      },\n      preguntas: [],\n      //preguntas disponibles para cada evaluacion\n      pregunta: {\n        descripcion: '',\n        respuesta: '',\n        opcion1: '',\n        opcion2: '',\n        opcion3: ''\n      },\n      preguntasEvaluaciones: [],\n      //preguntas cargadas a las evaluaciones\n      preguntaEvaluacion: {\n        descripcion: '',\n        respuesta: '',\n        opcion1: '',\n        opcion2: '',\n        opcion3: ''\n      },\n      preguntasEvaluacionesResponder: [],\n      preguntaEvaluacioneResponder: {\n        descripcion: '',\n        id_tema: '',\n        respuesta: '',\n        opcion1: '',\n        opcion2: '',\n        opcion3: '',\n        img_pregunta: '',\n        img_respuesta: '',\n        img_opcion1: '',\n        img_opcion2: '',\n        img_opcion3: ''\n      },\n      asignaturas: [],\n      asignatura: {\n        id: '',\n        label: ''\n      },\n      asignaturaSelected: {\n        id: '',\n        label: ''\n      },\n      editarActivo: false,\n      date: new Date().toJSON(),\n      datetime: null,\n      agregarActivo: false,\n      popupEditEval: false,\n      popupSelecPreg: false,\n      popupResolver: false,\n      estado_evaluacion: ['inactiva'],\n      evalSelected: [],\n      pregSelected: [],\n      'tableList': ['vs-th: Component', 'vs-tr: Component', 'vs-td: Component', 'thread: Slot', 'tbody: Slot', 'header: Slot'],\n      usuario: [],\n      docente: null,\n      nombre_docente: null,\n      apellido_docente: null,\n      active1: true,\n      calificaciones: [],\n      calificacionesSelected: [],\n      evaluacionestabla: [],\n      respuestas: [],\n      estudiantes: [],\n      alumnos: [],\n      urlOrigen: '',\n      id_evaluacion: '',\n      guardadoActivo: false,\n      unidadSelectedFiltrar: '',\n      unidSelect: [],\n      unidadesFiltrar: [],\n      unidadSelected: [],\n      unidades: [{\n        id: \"1\",\n        label: \"Unidad 1\"\n      }, {\n        id: \"2\",\n        label: \"Unidad 2\"\n      }, {\n        id: \"3\",\n        label: \"Unidad 3\"\n      }, {\n        id: \"4\",\n        label: \"Unidad 4\"\n      }, {\n        id: \"5\",\n        label: \"Unidad 5\"\n      }, {\n        id: \"6\",\n        label: \"Unidad 6\"\n      }],\n      tipoSelected: '',\n      tipos: [{\n        id: \"1\",\n        label: \"Opción múltiple\"\n      }, {\n        id: \"2\",\n        label: \"Respuesta cerrada\"\n      }, {\n        id: \"3\",\n        label: \"Verdadero/Falso\"\n      }, {\n        id: \"5\",\n        label: \"Selección simple\"\n      }, {\n        id: \"6\",\n        label: \"Respuesta abierta\"\n      }],\n      tiposeval: [],\n      tipoevaluacionselect: '',\n      grupo_selected: '',\n      grupo_opciones: [{\n        id: '1',\n        label: '1 grupo'\n      }, {\n        id: '2',\n        label: '2 grupos'\n      }, {\n        id: '3',\n        label: '3 grupos'\n      }, {\n        id: '4',\n        label: '4 grupos'\n      }, {\n        id: '5',\n        label: '5 grupos'\n      }],\n      cant_grupos_select: '',\n      radios1: 1,\n      grupoEstudianteSelec: '',\n      gruposEstudiantes: [{\n        id: '1',\n        label: 'Grupo 1'\n      }, {\n        id: '2',\n        label: 'Grupo 2'\n      }, {\n        id: '3',\n        label: 'Grupo 3'\n      }, {\n        id: '4',\n        label: 'Grupo 4'\n      }, {\n        id: '5',\n        label: 'Grupo 5'\n      }],\n      estudiantesEval: [],\n      activePromptGrupo: false,\n      textoConfirmgrup: '',\n      puntajeTotalGrupo: 0,\n      popupEvalAleatoria: false,\n      tipospreguntas: [],\n      configdateTimePicker: {\n        enableTime: true,\n        dateFormat: 'Y-m-d H:i:s'\n      },\n      bancoSelected: {\n        id: '3',\n        label: 'Ambas'\n      },\n      bancos: [{\n        id: '1',\n        label: 'Preguntas de Prolipa'\n      }, {\n        id: '2',\n        label: 'Solo mis preguntas'\n      }, {\n        id: '3',\n        label: 'Ambas'\n      }],\n      cant_gruposSelec: [1],\n      cant_preguntast1: 0,\n      cant_preguntast2: 0,\n      cant_preguntast3: 0,\n      cant_preguntast4: 0,\n      cant_preguntast5: 0,\n      puntajeIngresado: 0,\n      tiposPregAl: [1, 2, 3, 5, 6],\n      puntajetipo: [1, 2, 0.5, 1, 2],\n      cantidadesField: [0, 0, 0, 0, 0],\n      indexCantField: 0,\n      evalElimin: [],\n      activePromptEliminar: false,\n      local_idasignatura: '',\n      local_nombreasignatura: '',\n      popupCrearPreguntas: false\n    };\n  },\n  components: {\n    'v-select': vSelect,\n    'crear-preguntas': crearPreguntas,\n    flatPickr: flatPickr\n  },\n  created: function created() {\n    var me = this;\n    me.usuario = JSON.parse(localStorage.getItem('usuario'));\n    me.docente = me.usuario.idusuario;\n    me.nombre_docente = me.usuario.nombres;\n    me.apellido_docente = me.usuario.apellidos;\n    var urlBack = window.location.href;\n    var urlV = urlBack.split('/');\n    me.urlOrigen = urlV[0] + '/' + urlV[1] + '/' + urlV[2];\n    me.local_idasignatura = localStorage.idasignatura;\n    me.local_nombreasignatura = localStorage.nombreasignatura;\n    console.log(me.local_idasignatura + '--' + me.local_nombreasignatura);\n    me.getEvalDoc();\n    this.$http.get(this.$server_url + 'asignaturasDoc/' + me.docente).then(function (res) {\n      me.asignaturas = res.data;\n    }).catch(function (error) {\n      console.log(error);\n    }), this.$http.get(this.$server_url + 'tipoevaluacion').then(function (res) {\n      me.tiposeval = res.data;\n    }).catch(function (error) {\n      console.log(error);\n    });\n  },\n  methods: {\n    exportToExcel: function exportToExcel() {\n      var _this = this;\n      var headerTitle = ['Cédula', 'Estudiante'];\n      var headerVal = ['Cedula', 'Estudiante'];\n      for (var index = 0; index < this.alumnos[0].total.length; index++) {\n        headerTitle.push(\"Evaluación\" + index);\n        headerVal.push(\"Evaluacion\" + index);\n      }\n      import('@/vendor/Export2Excel').then(function (excel) {\n        var list = _this.respuestas;\n        var data = _this.formatJson(headerVal, list);\n        excel.export_json_to_excel({\n          header: headerTitle,\n          data: data,\n          filename: _this.fileName,\n          autoWidth: _this.cellAutoWidth,\n          bookType: _this.selectedFormat\n        });\n        _this.clearFields();\n        _this.guardarActivo = '';\n        _this.generarActivo = ' ';\n        _this.textAlertCant = '';\n        _this.cantidad = '';\n        _this.codigoSelected = [];\n      });\n    },\n    formatJson: function formatJson(filterVal, jsonData) {\n      return jsonData.map(function (v) {\n        return filterVal.map(function (j) {\n          return v[j];\n        });\n      });\n    },\n    clearFields: function clearFields() {\n      this.fileName = '';\n      this.cellAutoWidth = true;\n      this.selectedFormat = 'xls';\n    },\n    onResize: function onResize() {\n      if (window.innerWidth < 769) this.isMobile = true;else this.isMobile = false;\n    },\n    getEvalDoc: function getEvalDoc() {\n      var me = this;\n      me.$vs.loading();\n      var formData1 = new FormData();\n      formData1.append('docente', me.docente);\n      formData1.append('codigo', localStorage.codigo);\n      me.$http.post(this.$server_url + 'evaluacionesDocente', formData1).then(function (res) {\n        me.evaluaciones = res.data;\n        me.$vs.loading.close();\n        // console.log(me.evaluaciones)\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    limpiar: function limpiar() {\n      this.evaluacion.nombre = '';\n      this.evaluacion.duracion = '';\n      this.evaluacion.descripcion = '';\n      this.evaluacion.fecha_inicio = '';\n      this.evaluacion.fecha_fin = '';\n      this.evaluacion.estado = '';\n      this.evaluacion.puntos = '';\n      this.preguntas = [];\n      this.preguntasEvaluaciones = [];\n      this.evaluacion.id = '';\n      this.guardadoActivo = false;\n      this.unidadSelected = [];\n      this.grupo_selected = '';\n      this.radios1 = 1;\n      this.puntajeIngresado = 0;\n      this.cantidadesField = [0, 0, 0, 0, 0];\n      this.id_evaluacion = '';\n    },\n    agregar: function agregar() {\n      var me = this;\n      if (me.evaluacion.puntos === '' || me.evaluacion.duracion === '' || me.tipoevaluacionselect.id === '' || me.grupo_selected.id === '' || me.unidadSelected.id === '') {\n        me.$vs.notify({\n          text: 'Debe completar todos los campos antes de guardar',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        return;\n      }\n      if (me.evaluacion.fecha_inicio == \"\" || me.evaluacion.fecha_inicio == null || me.evaluacion.fecha_inicio == undefined) {\n        me.$vs.notify({\n          text: 'Debe seleccionar una fecha de inicio',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        return;\n      }\n      if (me.evaluacion.fecha_fin == \"\" || me.evaluacion.fecha_fin == null || me.evaluacion.fecha_fin == undefined) {\n        me.$vs.notify({\n          text: 'Debe seleccionar una fecha fin',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        return;\n      }\n      if (me.grupo_selected === '' || me.grupo_selected === null || me.grupo_selected === undefined) {\n        me.$vs.notify({\n          text: 'Debe seleccionar la cantidad de grupos',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        return;\n      }\n      var idunidades = [];\n      for (var i = 0; i < this.unidadSelected.length; i++) {\n        idunidades.push(this.unidadSelected[i].id);\n      }\n      me.$vs.loading();\n      var estado;\n      if (me.evaluacion.estado == true) {\n        estado = 1;\n      } else {\n        estado = 0;\n      }\n      var descripVal = me.evaluacion.descripcion;\n      if (me.evaluacion.descripcion === '' || me.evaluacion.descripcion === null || me.evaluacion.descripcion === 'null') {\n        descripVal = ' ';\n      }\n      var formData = new FormData();\n      formData.append('nombre', me.evaluacion.nombre);\n      formData.append('asignatura', me.local_idasignatura);\n      formData.append('descripcion', descripVal);\n      formData.append('puntos', me.evaluacion.puntos);\n      formData.append('duracion', me.evaluacion.duracion);\n      formData.append('fecha_inicio', me.evaluacion.fecha_inicio);\n      formData.append('fecha_fin', me.evaluacion.fecha_fin);\n      formData.append('estado', estado);\n      formData.append('docente', me.docente);\n      formData.append('codigo', localStorage.codigo);\n      formData.append('idtipoeval', me.tipoevaluacionselect.id);\n      formData.append('id_grupo_opciones', me.grupo_selected.id);\n      formData.append('cant_unidades', idunidades);\n      me.$http.post(this.$server_url + 'evaluacion', formData).then(function (res) {\n        me.getEvalDoc();\n        //me.clasifGrupEstEval(me.evaluacion);\n        me.$vs.loading.close();\n        me.unidSelect = idunidades;\n        me.agregarActivo = false;\n        me.guardadoActivo = true;\n        me.editarActivo = true;\n        me.evaluacion.id = res.data.id;\n        me.id_evaluacion = res.data.id;\n        //me.popupEditEval = false\n        me.cant_gruposSelec = [];\n        for (var i = 1; i <= me.grupo_selected.id; i++) {\n          me.cant_gruposSelec.push(i);\n        }\n        me.$vs.notify({\n          text: 'Evaluación guardada exitosamente',\n          color: 'success',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n      }).catch(function (error) {\n        me.$vs.loading.close();\n        console.log(error + ' agregar');\n      });\n    },\n    openConfirmEliminar: function openConfirmEliminar(item) {\n      var me = this;\n      me.evalElimin = item;\n      me.activePromptEliminar = true;\n    },\n    eliminarEvaluacion: function eliminarEvaluacion() {\n      var me = this;\n      me.$http.get(this.$server_url + \"eliminar_evaluacion/\".concat(me.evalElimin.id)).then(function (res) {\n        if (res.data === 0) {\n          me.$vs.notify({\n            text: 'No se puede eliminar esta evaluación porque ya esta siendo utilizada por sus estudiantes.',\n            color: 'warning',\n            iconPack: 'feather',\n            icon: 'icon-alert-triangle'\n          });\n        } else {\n          me.getEvalDoc();\n        }\n      }).catch(function (error) {\n        me.$vs.notify({\n          text: 'No se puede eliminar esta evaluación porque ya esta siendo utilizada por sus estudiantes!' + error,\n          color: 'danger',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n      });\n    },\n    editarFormulario: function editarFormulario(item) {\n      var me = this;\n      me.cantidadesField = [0, 0, 0, 0, 0];\n      me.radios1 = 1;\n      me.asignaturaSelected = {\n        id: item.id_asignatura,\n        label: item.nombreasignatura\n      };\n      me.evaluacion.nombre = item.nombre_evaluacion;\n      me.evaluacion.descripcion = item.descripcion;\n      me.evaluacion.puntos = item.puntos;\n      me.evaluacion.fecha_inicio = item.fecha_inicio;\n      me.evaluacion.fecha_fin = item.fecha_fin;\n      me.evaluacion.duracion = item.duracion;\n      me.evaluacion.estado = item.estado;\n      me.evaluacion.id = item.id;\n      me.tipoevaluacionselect = {\n        id: item.id_tipoeval,\n        label: item.tipo_nombre\n      };\n      me.grupo_selected = {\n        id: item.grupos_evaluacion,\n        label: item.grupos_evaluacion + ' grupos'\n      };\n      me.cant_gruposSelec = [];\n      for (var i = 1; i <= me.grupo_selected.id; i++) {\n        me.cant_gruposSelec.push(i);\n      }\n      me.editarActivo = true; //activa el form editar\n\n      me.unidSelect = item.cant_unidades.split(',');\n      me.cant_grupos_select = me.grupo_selected.id; //cantidad de grupos o filas de evaluaciones desde la base\n      me.unidadSelected = [];\n      for (var i = 0; i < me.unidSelect.length; i++) {\n        me.unidadSelected.push({\n          id: me.unidSelect[i],\n          label: 'Unidad ' + me.unidSelect[i]\n        });\n      }\n      me.verPreguntasxEval(item.id);\n      me.verEstudiantesEval();\n    },\n    openConfirmgrupo: function openConfirmgrupo(item) {\n      var me = this;\n      this.popupEditEval = false;\n      if (me.grupo_selected.id < me.cant_grupos_select) {\n        me.textoConfirmgrup = 'Ha seleccionado un grupo menor de evaluaciones, las preguntas asignadas a los grupos restantes, se ocultarán';\n      } else {\n        me.textoConfirmgrup = 'Ha seleccionado un grupo mayor de evaluaciones, debe asignar preguntas a los nuevos grupos.';\n      }\n      me.activePromptGrupo = true;\n    },\n    editarEvaluacion: function editarEvaluacion(item) {\n      var me = this;\n      item = me.evaluacion;\n      if (me.grupo_selected === '' || me.grupo_selected === null || me.grupo_selected === undefined) {\n        me.$vs.notify({\n          text: 'Debe seleccionar la cantidad de grupos',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        return;\n      }\n      if (me.evaluacion.fecha_inicio === '' || me.evaluacion.fecha_fin === '' || me.evaluacion.puntos === '' || me.evaluacion.duracion === '' || me.tipoevaluacionselect === null || me.tipoevaluacionselect === '' || me.grupo_selected.id === '') {\n        me.$vs.notify({\n          text: 'Debe completar todos los campos antes de guardar',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        return;\n      }\n      var idunidades = [];\n      for (var i = 0; i < this.unidadSelected.length; i++) {\n        idunidades.push(this.unidadSelected[i].id);\n      }\n      me.$vs.loading();\n      var estado;\n      if (me.evaluacion.estado == true) {\n        estado = 1;\n      } else {\n        estado = 0;\n      }\n      var descripVal = me.evaluacion.descripcion;\n      if (me.evaluacion.descripcion === '' || me.evaluacion.descripcion === null || me.evaluacion.descripcion === 'null') {\n        descripVal = ' ';\n      }\n      var formData = new FormData();\n      formData.append('id', item.id);\n      formData.append('nombre', me.evaluacion.nombre);\n      formData.append('asignatura', me.local_idasignatura);\n      formData.append('descripcion', descripVal);\n      formData.append('puntos', me.evaluacion.puntos);\n      formData.append('duracion', me.evaluacion.duracion);\n      formData.append('fecha_inicio', me.evaluacion.fecha_inicio);\n      formData.append('fecha_fin', me.evaluacion.fecha_fin);\n      formData.append('estado', estado);\n      formData.append('docente', me.docente);\n      formData.append('codigo', localStorage.codigo);\n      formData.append('idtipoeval', me.tipoevaluacionselect.id);\n      formData.append('id_grupo_opciones', me.grupo_selected.id);\n      formData.append('cant_unidades', idunidades);\n      me.$http.post(this.$server_url + 'evaluacion', formData).then(function (res) {\n        var index = me.evaluaciones.findIndex(function (evaluacionBuscar) {\n          return evaluacionBuscar.id === res.data.id;\n        });\n        me.evaluacion[index] = res.data;\n        me.getEvalDoc();\n        //me.clasifGrupEstEval(item);\n        me.editarActivo = false; //desactiva el form editar\n        //me.popupEditEval = false\n        me.cant_gruposSelec = [];\n        for (var i = 1; i <= me.grupo_selected.id; i++) {\n          me.cant_gruposSelec.push(i);\n        }\n        me.$vs.loading.close();\n        me.$vs.notify({\n          text: 'Evaluación editada exitosamente',\n          color: 'success',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    verPreguntas: function verPreguntas() {\n      var me = this;\n      me.preguntas = [];\n      // me.id_evaluacion = id;\n      me.tipoSelected = '';\n      me.$vs.loading();\n      me.unidadesFiltrar = [];\n      for (var i = 0; i < me.unidadSelected.length; i++) {\n        me.unidadesFiltrar.push({\n          id: me.unidadSelected[i].id,\n          label: 'Unidad ' + me.unidadSelected[i].id\n        });\n      }\n      me.unidadSelectedFiltrar = {\n        id: me.unidadSelected[0].id,\n        label: 'Unidad ' + me.unidadSelected[0].id\n      };\n      me.filtrarPreguntasxUnidad();\n    },\n    cargarPregunta: function cargarPregunta(item, index) {\n      var me = this;\n      me.$vs.loading();\n      var formData = new FormData();\n      formData.append('id_evaluacion', me.evaluacion.id);\n      formData.append('id_pregunta', item.id);\n      formData.append('grupo', me.radios1);\n      me.$http.post(this.$server_url + 'pregEvaluacion', formData).then(function (res) {\n        me.filtrarBancos();\n\n        /*if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n            console.log('no hay preguntas para mostrar');\r\n        }else{\r\n            if( me.tipoSelected.id === '' || me.tipoSelected === null || me.tipoSelected.id === undefined){\r\n                me.filtrarPreguntasxUnidad()\r\n            }else{\r\n                me.filtrarTipos()\r\n            }\r\n        }*/\n\n        me.verPreguntasxEval(me.evaluacion.id);\n        me.$vs.notify({\n          text: 'Pregunta asignada a esta evaluación',\n          color: 'success',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    quitarPregunta: function quitarPregunta(index, id) {\n      var me = this;\n      me.$vs.loading();\n      me.$http.get(this.$server_url + \"quitarPregEvaluacion/\".concat(id)).then(function () {\n        me.verPreguntasxEval(index.id_evaluacion);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    backEndDateFormat: function backEndDateFormat(date) {\n      return moment(date, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\n    },\n    removeItemFromArr: function removeItemFromArr(arr, item) {\n      var i = arr.indexOf(item);\n      arr.splice(i, 1);\n    },\n    irPreguntas: function irPreguntas() {\n      if (this.id_evaluacion === '') {\n        this.id_evaluacion = 0;\n      }\n      localStorage.id_desde_eval = this.evaluacion.id;\n      localStorage.grupo_desde_eval = this.radios1;\n      localStorage.crea_desde_eval = true;\n      this.popupSelecPreg = false;\n      this.popupCrearPreguntas = true;\n      // window.location.href = this.urlOrigen+'/preguntas/'+this.id_evaluacion;\n    },\n    verCalificaciones: function verCalificaciones() {\n      var me = this;\n      me.$vs.loading();\n      me.$http.get(this.$server_url + \"verCalificacionEval/\".concat(localStorage.codigo)).then(function (response) {\n        me.respuestas = [];\n        var respuesta = response.data;\n        me.estudiantes = response.data;\n        if (response.data.length != 0) {\n          me.alumnos = response.data.items;\n          me.alumnos.forEach(function (element) {\n            var cal = new Object();\n            cal.idusuario = element.usuario_idusuario;\n            cal.Cedula = element.cedula;\n            cal.Estudiante = element.nombres + \" \" + element.apellidos;\n            cal.calificaciones = new Object();\n            for (var index = 0; index < element.total.length; index++) {\n              try {\n                if (element.calificaciones[index].calificacion === null) {\n                  element.calificaciones[index].calificacion = 0;\n                  cal.calificaciones[index] = element.calificaciones[index].calificacion + '/' + element.calificaciones[index].puntos;\n                } else {\n                  cal.calificaciones[index] = element.calificaciones[index].calificacion + '/' + element.calificaciones[index].puntos;\n                }\n                eval(\"cal.Evaluacion\" + index + \"=\" + element.calificaciones[index].calificacion);\n              } catch (error) {\n                element.calificaciones[index].calificacion = 0;\n                cal.calificaciones[index] = element.calificaciones[index].calificacion + '/' + element.calificaciones[index].puntos;\n                eval(\"cal.Evaluacion\" + index + \"=\" + 0);\n              }\n            }\n            me.respuestas.push(cal);\n          });\n        }\n        me.$vs.loading.close();\n      }).catch(function (error) {\n        me.$vs.loading.close();\n        console.log(error);\n      });\n      me.$http.get(this.$server_url + \"verEvalCursoExport/\".concat(localStorage.codigo)).then(function (res) {\n        me.evaluacionestabla = res.data;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    filtrarPreguntasxUnidad: function filtrarPreguntasxUnidad() {\n      var me = this;\n      if (me.unidadSelectedFiltrar === '' || me.unidadSelectedFiltrar === null || me.unidadSelectedFiltrar.id === undefined) {\n        return;\n      }\n      me.bancoSelected = {\n        id: '3',\n        label: 'Ambas'\n      };\n      var tipo;\n      if (me.tipoSelected === null || me.tipoSelected === '') {\n        tipo = 'null';\n      } else {\n        tipo = me.tipoSelected.id;\n      }\n      me.$vs.loading();\n      var formData = new FormData();\n      formData.append('evaluacion', me.id_evaluacion);\n      formData.append('unidad', me.unidadSelectedFiltrar.id);\n      formData.append('grupo', me.radios1);\n      formData.append('tipo', tipo);\n      formData.append('idusuario', me.usuario.idusuario);\n      formData.append('usuario', me.usuario.idusuario);\n      formData.append('id_group', me.usuario.id_group);\n      formData.append('institucion_id', me.usuario.institucion_idInstitucion);\n      formData.append('preguntasAll', 1);\n      this.$http.post(this.$server_url + 'preguntasxunidad', formData).then(function (res) {\n        me.preguntas = res.data;\n        console.log(\"uwu\", me.preguntas);\n        me.$vs.loading.close();\n      }).catch(function (error) {\n        me.$vs.loading.close();\n        console.log(error);\n      });\n    },\n    filtrarTipos: function filtrarTipos() {\n      var me = this;\n      if (me.unidadSelectedFiltrar === '' || me.unidadSelectedFiltrar === null || me.unidadSelectedFiltrar.id === undefined) {\n        return;\n      }\n      if (me.tipoSelected === '' || me.tipoSelected === null || me.tipoSelected.id === undefined) {\n        me.filtrarPreguntasxUnidad();\n        return;\n      }\n      me.$vs.loading();\n      var formData = new FormData();\n      formData.append('evaluacion', me.id_evaluacion);\n      formData.append('unidad', me.unidadSelectedFiltrar.id);\n      formData.append('tipo', me.tipoSelected.id);\n      formData.append('grupo', me.radios1);\n      formData.append('idusuario', me.usuario.idusuario);\n      formData.append('usuario', me.usuario.idusuario);\n      formData.append('id_group', me.usuario.id_group);\n      formData.append('institucion_id', me.usuario.institucion_idInstitucion);\n      formData.append('preguntasAll', 1);\n      me.$http.post(this.$server_url + 'preguntasxunidad', formData).then(function (res) {\n        // me.$http.post(this.$server_url+'preguntasevaltipounidad', formData).then(res => {\n        me.preguntas = res.data;\n        console.log(\"uwu2\", me.preguntas);\n        me.bancoSelected = {};\n        me.$vs.loading.close();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    verPreguntasxEval: function verPreguntasxEval(id_evaluacion) {\n      var me = this;\n      me.verTiposPreguntas();\n      var formData = new FormData();\n      formData.append('evaluacion', id_evaluacion);\n      formData.append('grupo', me.radios1);\n      me.$vs.loading();\n      me.$http.post(this.$server_url + \"pregEvaluacionGrupo\", formData).then(function (res) {\n        me.preguntasEvaluaciones = res.data;\n        if (me.preguntasEvaluaciones.items === undefined) {\n          console.log('no existen preguntas para el grupo seleccionado');\n        } else {\n          me.puntajeTotalGrupo = 0;\n          for (var i = 0; i < me.preguntasEvaluaciones.items.length; i++) {\n            me.puntajeTotalGrupo += me.preguntasEvaluaciones.items[i].puntaje_pregunta;\n          }\n        }\n        me.$vs.loading.close();\n      }).catch(function (error) {\n        me.$vs.loading.close();\n        console.log(error + 'verPreguntasxEval');\n      });\n    },\n    verEstudiantesEval: function verEstudiantesEval() {\n      var me = this;\n      me.$vs.loading();\n      me.$http.get(this.$server_url + \"verEstCursoEval/\".concat(localStorage.codigo)).then(function (res) {\n        me.estudiantesEval = res.data;\n        me.$vs.loading.close();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    asignarGrupoEst: function asignarGrupoEst(item) {\n      var me = this;\n      var formData = new FormData();\n      formData.append('estudiante', item.idusuario);\n      formData.append('grupo', item.grupo);\n      formData.append('codigo', localStorage.codigo);\n      me.$http.post(this.$server_url + \"asignarGrupoEst\", formData).then(function (res) {}).catch(function (error) {\n        console.log(error);\n      });\n    },\n    /*clasifGrupEstEval(item){\r\n        let me = this;\r\n        let estudiantes = [];\r\n        for( var i=0; i<me.estudiantesEval.length; i++ ){\r\n            estudiantes.push(me.estudiantesEval[i].idusuario);\r\n        }\r\n        estudiantes.sort(function() { return Math.random() - 0.5 });\r\n        //alert(estudiantes);\r\n        let formData = new FormData();\r\n            formData.append('grupos', me.grupo_selected.id);\r\n            formData.append('codigo', localStorage.codigo);\r\n            formData.append('cantidad', me.estudiantesEval.length);\r\n            formData.append('estudiantes', estudiantes);\r\n        this.$http.post(`http://localhostpEstEval`, formData).then(res => {\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n    },*/\n    irRevision: function irRevision(item, val) {\n      localStorage.removeItem('nombresImprimir');\n      localStorage.setItem('id_evalRevisar', item.id);\n      localStorage.setItem('previsualizar_eval', val);\n      //this.$router.push('/revisarevaluacion')\n\n      window.location.href = this.urlOrigen + '/revisarevaluacion';\n    },\n    contarPuntosIngresados: function contarPuntosIngresados() {\n      var me = this;\n      me.puntajeIngresado = 0;\n      var cantField = 0;\n      for (var i = 0; i < me.cantidadesField.length; i++) {\n        if (Number.isNaN(parseInt(me.cantidadesField[i]))) {\n          cantField = 0;\n        } else {\n          cantField = parseInt(me.cantidadesField[i]);\n        }\n        me.puntajeIngresado += me.puntajetipo[i] * parseInt(cantField);\n      }\n    },\n    cargarPreguntasAleatorias: function cargarPreguntasAleatorias() {\n      var me = this;\n      me.puntajeIngresado = 0;\n      var cantField = 0;\n      for (var i = 0; i < me.cantidadesField.length; i++) {\n        if (Number.isNaN(parseInt(me.cantidadesField[i]))) {\n          cantField = 0;\n        } else {\n          cantField = parseInt(me.cantidadesField[i]);\n        }\n        me.puntajeIngresado += me.puntajetipo[i] * parseInt(cantField);\n      }\n      if (me.puntajeIngresado <= 0) {\n        return;\n      }\n      if (me.puntajeIngresado > me.evaluacion.puntos || me.puntajeTotalGrupo + me.puntajeIngresado > me.evaluacion.puntos) {\n        me.$vs.notify({\n          text: 'El puntaje de las preguntas excede al puntaje de esta evaluación',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        return;\n      }\n      me.$vs.loading();\n      var cantidad = me.cantidadesField;\n      var unidades = [];\n      for (var i = 0; i < me.unidadSelected.length; i++) {\n        unidades.push(me.unidadSelected[i].id);\n      }\n      var formData = new FormData();\n      formData.append('evaluacion', me.evaluacion.id);\n      formData.append('puntos', me.evaluacion.puntos);\n      formData.append('grupos', me.grupo_selected.id);\n      formData.append('cant_pregs', cantidad);\n      formData.append('unidades', unidades);\n      formData.append('tipos', me.tiposPregAl);\n      formData.append('usuario', me.usuario.idusuario);\n      formData.append('id_group', me.usuario.id_group);\n      formData.append('institucion_id', me.usuario.institucion_idInstitucion);\n      me.$http.post(this.$server_url + \"cargarPregsRand\", formData).then(function (res) {\n        me.popupEvalAleatoria = false;\n        me.verPreguntasxEval(me.evaluacion.id);\n        me.$vs.notify({\n          text: 'Preguntas cargadas correctamente',\n          color: 'success',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n        me.cantidadesField = [0, 0, 0, 0, 0];\n        me.puntajeIngresado = 0;\n        me.$vs.loading.close();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    filtrarBancos: function filtrarBancos() {\n      var me = this;\n      if (me.unidadSelectedFiltrar === '' || me.unidadSelectedFiltrar === null || me.unidadSelectedFiltrar.id === undefined) {\n        return;\n      }\n      if (me.bancoSelected === null) {\n        var bancoSel = 3;\n      } else {\n        var bancoSel = me.bancoSelected.id;\n      }\n      switch (bancoSel) {\n        case '1':\n          me.filtrarxProlipa();\n          break;\n        case '2':\n          me.filtrarxDocente();\n          break;\n        default:\n          me.filtrarPreguntasxUnidad();\n      }\n    },\n    filtrarxDocente: function filtrarxDocente() {\n      var me = this;\n      me.$vs.loading();\n      var tipo;\n      if (me.tipoSelected === null || me.tipoSelected === '') {\n        tipo = 'null';\n      } else {\n        tipo = me.tipoSelected.id;\n      }\n      var formData = new FormData();\n      formData.append('evaluacion', me.id_evaluacion);\n      formData.append('unidad', me.unidadSelectedFiltrar.id);\n      formData.append('grupo', me.radios1);\n      formData.append('usuario', me.usuario.idusuario);\n      formData.append('tipo', tipo);\n      formData.append('id_group', me.usuario.id_group);\n      formData.append('institucion_id', me.usuario.institucion_idInstitucion);\n      formData.append('preguntasDocentes', 1);\n      me.$http.post(this.$server_url + 'preguntasxunidad', formData).then(function (res) {\n        // me.$http.post(this.$server_url+'preguntasxbancoDocente', formData).then(res => {\n        me.preguntas = res.data;\n        console.log(\"uwu3\", me.preguntas.items.filter(function (p) {\n          return p.id_tema == 41;\n        }));\n        me.$vs.loading.close();\n      }).catch(function (error) {\n        me.$vs.loading.close();\n        console.log(error);\n      });\n    },\n    filtrarxProlipa: function filtrarxProlipa() {\n      var me = this;\n      me.$vs.loading();\n      var tipo;\n      if (me.tipoSelected === null || me.tipoSelected === '') {\n        tipo = 'null';\n      } else {\n        tipo = me.tipoSelected.id;\n      }\n      var formData = new FormData();\n      formData.append('evaluacion', me.id_evaluacion);\n      formData.append('unidad', me.unidadSelectedFiltrar.id);\n      formData.append('usuario', me.usuario.idusuario);\n      formData.append('grupo', me.radios1);\n      formData.append('tipo', tipo);\n      formData.append('id_group', me.usuario.id_group);\n      formData.append('institucion_id', me.usuario.institucion_idInstitucion);\n      formData.append('preguntasProlipa', 1);\n      me.$http.post(this.$server_url + 'preguntasxunidad', formData).then(function (res) {\n        // me.$http.post(this.$server_url+'preguntasxbancoProlipa', formData).then(res => {\n        me.preguntas = res.data;\n        console.log(\"uwu4\");\n        me.$vs.loading.close();\n      }).catch(function (error) {\n        me.$vs.loading.close();\n        console.log(error);\n      });\n    },\n    copiarLink: function copiarLink(item) {\n      var me = this;\n      var date = new Date();\n      var fecha_actual = moment(date, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\n\n      //if( fecha_actual < item.fecha_inicio || fecha_actual > item.fecha_fin ){\n      if (fecha_actual > item.fecha_fin) {\n        me.$vs.notify({\n          text: 'Esta evaluación aún no está disponible. Verifique las fechas de inicio y fin.',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        return;\n      }\n      if (item.estado != 1) {\n        me.$vs.notify({\n          text: 'Esta evaluación está inactiva',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        return;\n      }\n      var link = me.urlOrigen + '/responderEvaluacion/' + item.id + '-' + localStorage.codigo + '-' + me.usuario.institucion_idInstitucion;\n      var aux = document.createElement(\"input\");\n      aux.setAttribute(\"value\", link);\n      document.body.appendChild(aux);\n      aux.select();\n      try {\n        var status = document.execCommand('copy');\n        if (!status) {\n          me.$vs.notify({\n            text: 'Error al copiar el link',\n            color: 'warning',\n            iconPack: 'feather',\n            icon: 'icon-alert-triangle'\n          });\n        } else {\n          me.$vs.notify({\n            text: 'Link copiado',\n            color: 'success',\n            iconPack: 'feather',\n            icon: 'icon-check'\n          });\n        }\n      } catch (err) {\n        console.log('No se pudo copiar');\n      }\n      document.body.removeChild(aux);\n    },\n    verTiposPreguntas: function verTiposPreguntas() {\n      var me = this;\n      var v_unidades = [];\n      $.each(me.unidadSelected, function (key, value) {\n        v_unidades.push(value.id);\n      });\n      me.$http.get(this.$server_url + 'tipospreguntas/' + localStorage.idasignatura + '/' + v_unidades + '/' + me.usuario.id_group + '/' + me.usuario.institucion_idInstitucion).then(function (res) {\n        me.tipospreguntas = res.data;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n};",{"version":3,"names":["crearPreguntas","flatPickr","Vue","axios","vSelect","moment","VueRouter","$","data","fileName","formats","cellAutoWidth","selectedFormat","activePrompt","popupGrupos","evaluaciones","evaluacion","nombre","asignatura","descripcion","fecha_inicio","fecha_fin","estado","puntos","duracion","preguntas","pregunta","respuesta","opcion1","opcion2","opcion3","preguntasEvaluaciones","preguntaEvaluacion","preguntasEvaluacionesResponder","preguntaEvaluacioneResponder","id_tema","img_pregunta","img_respuesta","img_opcion1","img_opcion2","img_opcion3","asignaturas","id","label","asignaturaSelected","editarActivo","date","Date","toJSON","datetime","agregarActivo","popupEditEval","popupSelecPreg","popupResolver","estado_evaluacion","evalSelected","pregSelected","usuario","docente","nombre_docente","apellido_docente","active1","calificaciones","calificacionesSelected","evaluacionestabla","respuestas","estudiantes","alumnos","urlOrigen","id_evaluacion","guardadoActivo","unidadSelectedFiltrar","unidSelect","unidadesFiltrar","unidadSelected","unidades","tipoSelected","tipos","tiposeval","tipoevaluacionselect","grupo_selected","grupo_opciones","cant_grupos_select","radios1","grupoEstudianteSelec","gruposEstudiantes","estudiantesEval","activePromptGrupo","textoConfirmgrup","puntajeTotalGrupo","popupEvalAleatoria","tipospreguntas","configdateTimePicker","enableTime","dateFormat","bancoSelected","bancos","cant_gruposSelec","cant_preguntast1","cant_preguntast2","cant_preguntast3","cant_preguntast4","cant_preguntast5","puntajeIngresado","tiposPregAl","puntajetipo","cantidadesField","indexCantField","evalElimin","activePromptEliminar","local_idasignatura","local_nombreasignatura","popupCrearPreguntas","components","created","me","JSON","parse","localStorage","getItem","idusuario","nombres","apellidos","urlBack","window","location","href","urlV","split","idasignatura","nombreasignatura","console","log","getEvalDoc","$http","get","$server_url","then","res","catch","error","methods","exportToExcel","_this","headerTitle","headerVal","index","total","length","push","excel","list","formatJson","export_json_to_excel","header","filename","autoWidth","bookType","clearFields","guardarActivo","generarActivo","textAlertCant","cantidad","codigoSelected","filterVal","jsonData","map","v","j","onResize","innerWidth","isMobile","$vs","loading","formData1","FormData","append","codigo","post","close","limpiar","agregar","notify","text","color","iconPack","icon","undefined","idunidades","i","descripVal","formData","openConfirmEliminar","item","eliminarEvaluacion","concat","editarFormulario","id_asignatura","nombre_evaluacion","id_tipoeval","tipo_nombre","grupos_evaluacion","cant_unidades","verPreguntasxEval","verEstudiantesEval","openConfirmgrupo","editarEvaluacion","findIndex","evaluacionBuscar","verPreguntas","filtrarPreguntasxUnidad","cargarPregunta","filtrarBancos","quitarPregunta","backEndDateFormat","format","removeItemFromArr","arr","indexOf","splice","irPreguntas","id_desde_eval","grupo_desde_eval","crea_desde_eval","verCalificaciones","response","items","forEach","element","cal","Object","usuario_idusuario","Cedula","cedula","Estudiante","calificacion","eval","tipo","id_group","institucion_idInstitucion","filtrarTipos","verTiposPreguntas","puntaje_pregunta","asignarGrupoEst","grupo","irRevision","val","removeItem","setItem","contarPuntosIngresados","cantField","Number","isNaN","parseInt","cargarPreguntasAleatorias","bancoSel","filtrarxProlipa","filtrarxDocente","filter","p","copiarLink","fecha_actual","link","aux","document","createElement","setAttribute","body","appendChild","select","status","execCommand","err","removeChild","v_unidades","each","key","value"],"sources":["src/views/evaluaciones/EvaluacionesComponent.vue"],"sourcesContent":["<template>\r\n\r\n<div>\r\n    <!---==============MODALES============-->\r\n    <vs-popup fullscreen title=\"Crear preguntas\" :active.sync=\"popupCrearPreguntas\" @accept=\"verPreguntas(evaluacion.id)\" @close=\"verPreguntas(evaluacion.id)\">\r\n        <crear-preguntas/>\r\n    </vs-popup>\r\n    <vs-popup title=\"Evaluación Aleatoria\" :active.sync=\"popupEvalAleatoria\">\r\n        <div align=\"center\" style=\"padding: 5px; border-radius: 5px; background-color: #FFDCD1; color: #D6623A;\" class=\"mb-2\">\r\n            Si modificó las unidades, guarde la evaluación antes de continuar.\r\n        </div>\r\n        <div align=\"center\" style=\"padding: 5px; border-radius: 5px; background-color: #C8E1FF; color: #1360BA;\" class=\"mb-2\">\r\n            Las preguntas aleatorias serán obtenidas únicamente del banco de preguntas de Prolipa\r\n        </div>\r\n        <table style=\"width: 100%;\">\r\n          <tr style=\"background-color: #e5e5e5;\">\r\n              <td><b>Tipo de pregunta</b></td>\r\n              <td align=\"center\"><b>Puntaje</b></td>\r\n              <td align=\"center\"><b>Disponibles</b></td>\r\n              <td align=\"center\"><b>Cantidad</b></td>\r\n          </tr>\r\n          <tbody>\r\n            <tr v-for=\"(itemop, indexch) in tipospreguntas\" :key=\"indexch\">\r\n                <td>\r\n                    {{ itemop.label }}\r\n                </td>\r\n                <td align=\"center\">\r\n                    {{itemop.puntaje}} pts.\r\n                </td>\r\n                <td align=\"center\">{{itemop.cantidad}}</td>\r\n                <td align=\"center\">\r\n                    <vs-input type=\"number\" min=\"0\" v-model=\"cantidadesField[indexch]\" @input=\"contarPuntosIngresados()\" class=\"mb-4\" style=\"width: 80px; text-align: center;\" />\r\n                </td>\r\n            </tr>\r\n            <tr style=\"background-color: #e5e5e5;\">\r\n                <td colspan=\"3\" style=\"vertical-align: middle;\"><b>Puntaje preguntas actuales:</b></td>\r\n                <td align=\"center\">\r\n                    <vs-button type=\"border\" color=\"success\">{{puntajeTotalGrupo}}</vs-button>\r\n                </td>\r\n            </tr>\r\n              <tr style=\"background-color: #e5e5e5;\">\r\n                <td colspan=\"3\" style=\"vertical-align: middle;\"><b>Puntaje total:</b></td>\r\n                <td align=\"center\">\r\n                  <vs-button type=\"border\" color=\"success\" v-if=\"(puntajeIngresado+puntajeTotalGrupo)<=evaluacion.puntos\" style=\"color: green;\">{{puntajeIngresado+puntajeTotalGrupo}}</vs-button>\r\n                  <vs-button type=\"border\" color=\"danger\" v-else style=\"color: red;\">{{puntajeIngresado+puntajeTotalGrupo}}</vs-button>\r\n                </td>\r\n              </tr>\r\n          </tbody>\r\n        </table>\r\n        <vs-button class=\"w-full mt-3 mb-2\" color=\"success\" type=\"gradient\" @click=\"cargarPreguntasAleatorias()\">Generar preguntas</vs-button>\r\n    </vs-popup>\r\n    <vs-prompt\r\n      @cancel=\"popupEditEval=true; activePromptGrupo=false;\"\r\n      @accept=\"popupEditEval=true; editarEvaluacion()\"\r\n      @close=\"popupEditEval=true; activePromptGrupo=false;\"\r\n      :active.sync=\"activePromptGrupo\">\r\n      <div class=\"con-exemple-prompt\">\r\n        <vs-alert color=\"danger\" active=\"true\">\r\n            {{textoConfirmgrup}}\r\n        </vs-alert>\r\n      </div>\r\n    </vs-prompt>\r\n    <vs-prompt\r\n      @cancel=\"activePromptEliminar=false;\"\r\n      @accept=\"eliminarEvaluacion()\"\r\n      @close=\"activePromptEliminar=false;\"\r\n      :active.sync=\"activePromptEliminar\" color=\"danger\">\r\n      <div class=\"con-exemple-prompt\">\r\n        <h5 class=\"mb-4 mt-4\">¿Está seguro de eliminar esta evaluación?</h5>\r\n      </div>\r\n    </vs-prompt>\r\n    <!----modal exportar--------->\r\n    <vs-prompt title=\"Exportar a Excel\" class=\"export-options\" @cancle=\"clearFields\" @accept=\"exportToExcel\" accept-text=\"Exportar\" @close=\"clearFields\" :active.sync=\"activePrompt\">\r\n\r\n        <vs-input v-model=\"fileName\" placeholder=\"Ingrese el nombre del archivo\" class=\"w-full\" />\r\n        <v-select v-model=\"selectedFormat\" :options=\"formats\" class=\"my-4\" />\r\n\r\n    </vs-prompt>\r\n    <!----fin modal exportar--------->\r\n    <!-- modal de aceptar cambio de grupos de evaluaciones si es menor al de la base -->\r\n    <vs-prompt title=\"Alerta\" class=\"export-options\" @cancel=\"clearFields\" accept-text=\"Aceptar\" @close=\"clearFields\" :active.sync=\"popupGrupos\">\r\n        <vs-alert class=\"mb-3\" color=\"danger\" icon-pack=\"feather\" icon=\"icon-info\">\r\n            <span>Ha seleccionado un grupo menor de evaluaciones, las preguntas asignadas a los grupos restantes, se ocultarán</span>\r\n        </vs-alert>\r\n    </vs-prompt>\r\n    <!---==============FIN MODALES============-->\r\n    <!-----===PROCESO====-->\r\n    <vx-card>\r\n      <h2 style=\"color:#7F7E7E\" class=\"mb-4\" v-if=\"evaluaciones[0]!=null\">Curso: {{evaluaciones[0].nombre_curso}} &nbsp;-&nbsp;\r\n      Aula: {{evaluaciones[0].aula}}</h2>\r\n      <vs-tabs alignment=\"fixed\">\r\n        <vs-tab label=\"Evaluaciones\" @click=\"getEvalDoc()\">\r\n            <!--LISTADO DE EVALUACIONES-->\r\n            <div align=\"center\" class=\"mt-4\">\r\n                <vs-table stripe v-if=\"evaluaciones!=0\" v-model=\"evalSelected\" pagination max-items=\"25\" search :data=\"evaluaciones\">\r\n                    <template slot=\"header\">\r\n                        <vs-button color=\"primary\" type=\"border\" class=\"m-1\" @click=\"$router.go(-1)\"><b>← Volver</b></vs-button>\r\n                        <vs-button @click=\"limpiar(); popupEditEval=true; agregarActivo=true;\" color=\"dark\" type=\"filled\"  class=\"m-1\">Crear mi evaluación</vs-button>\r\n                        <!-- <vs-button @click=\"irPreguntas\" size=\"small\" style=\"font-size: 14px;\" color=\"primary\" type=\"filled\" class=\"mr-1\">Crear Pregunta</vs-button> -->\r\n                    </template>\r\n\r\n                    <template slot=\"thead\">\r\n                        <vs-th sort-key=\"nombre_evaluacion\">Evaluación</vs-th>\r\n                        <vs-th sort-key=\"fecha\">Fecha</vs-th>\r\n                        <vs-th>Acciones</vs-th>\r\n                    </template>\r\n\r\n                    <template slot-scope=\"{data}\">\r\n                    <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n\r\n                        <vs-td :data=\"data[indextr].tipo_nombre\">\r\n                            <b>Asignatura:</b> {{ data[indextr].nombreasignatura }}<br>\r\n                            <b>Puntos:</b> {{ data[indextr].puntos }} &nbsp;&nbsp;-&nbsp;&nbsp;\r\n                            <b>Duración:</b> {{ data[indextr].duracion }} min<br>\r\n                            <b>Tipo:</b> {{ data[indextr].tipo_nombre }}\r\n                        </vs-td>\r\n\r\n                        <vs-td>\r\n                            <b>Inicio:</b> {{ data[indextr].fecha_inicio }}<br>\r\n                            <b>Fin:</b> {{ data[indextr].fecha_fin }}<br>\r\n                            <vs-switch disabled color=\"success\" v-model=\"data[indextr].estado\" style=\"width: 70px;\">\r\n                                <span slot=\"on\">Activa</span>\r\n                                <span slot=\"off\">Inactiva</span>\r\n                            </vs-switch>\r\n                        </vs-td>\r\n\r\n                        <vs-td :data=\"data[indextr].id\" style=\"width: 260px;\">\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Editar evaluación\" position=\"top\" color=\"success\">\r\n                                <vs-button size=\"large\" radius icon-pack=\"feather\" icon=\"icon-edit\" @click=\"agregarActivo=false; editarFormulario(data[indextr]); popupEditEval=true; id_evaluacion=data[indextr].id;\" color=\"success\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Previsualizar\" position=\"top\" color=\"dark\">\r\n                                <vs-button size=\"large\" class=\"ml-2\" radius icon-pack=\"feather\" icon=\"icon-eye\" @click=\"irRevision(data[indextr], 1);\" color=\"dark\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Revisar evaluación\" position=\"top\" color=\"primary\">\r\n                                <vs-button size=\"large\" class=\"ml-2\" radius icon-pack=\"feather\" icon=\"icon-check-circle\" @click=\"irRevision(data[indextr], 0);\" color=\"primary\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Eliminar evaluación\" position=\"top\" color=\"danger\">\r\n                                <vs-button size=\"large\" class=\"ml-2\" radius icon-pack=\"feather\" icon=\"icon-trash\" @click=\"openConfirmEliminar(data[indextr]);\" color=\"danger\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Copiar link de evaluación\" position=\"top\" color=\"warning\">\r\n                                <vs-button size=\"large\" radius icon-pack=\"feather\" icon=\"icon-link\" @click=\"copiarLink(data[indextr]);\" color=\"warning\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n\r\n                        </vs-td>\r\n                    </vs-tr>\r\n                    </template>\r\n                </vs-table>\r\n\r\n                <vs-button v-if=\"evaluaciones==0\" class=\"mt-6 mb-6\" type=\"line\" @click=\"limpiar(); popupEditEval=true; agregarActivo=true;\" color=\"primary\">Crear evaluación</vs-button>\r\n\r\n            </div>\r\n        </vs-tab>\r\n        <vs-tab label=\"Calificaciones\" @click=\"verCalificaciones()\">\r\n            <div v-if=\"respuestas.length===0\" class=\"mt-6\">No existen calificaciones para este curso</div>\r\n            <vs-table stripe v-else pagination max-items=\"25\" search :data=\"respuestas\">\r\n                <template slot=\"header\">\r\n                    <vs-button color=\"warning\" size=\"small\" style=\"font-size: 14px;\" @click=\"activePrompt=true\">Exportar</vs-button>\r\n                </template>\r\n                <template slot=\"thead\">\r\n                    <vs-th sort-key=\"nombres\">Estudiante</vs-th>\r\n                    <vs-th v-for=\"(item, index) in respuestas[0].calificaciones\" :key=\"index\">\r\n                        Ev{{index}}\r\n                    </vs-th>\r\n\r\n                </template>\r\n                <template slot-scope=\"{data}\">\r\n                <vs-tr :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                    <vs-td :data=\"tr\">\r\n                        {{ tr.Estudiante }}\r\n                    </vs-td>\r\n\r\n                    <vs-td :key=\"$indexs\" v-for=\"(item, $indexs) in tr.calificaciones\">\r\n                        <span v-if=\"item\">{{item}}</span>\r\n                        <span v-else>0</span>\r\n                    </vs-td>\r\n\r\n                </vs-tr>\r\n                </template>\r\n            </vs-table>\r\n        </vs-tab>\r\n      </vs-tabs>\r\n    </vx-card>\r\n    <!--========NUEVOS MODALES==========-->\r\n    <!-- Modal Editar Evaluaciones-->\r\n    <div class=\"demo-alignment\">\r\n        <vs-popup fullscreen classContent=\"popup-example\" v-bind:title=\"'Evaluación - GRUPO '+radios1\" :active.sync=\"popupEditEval\">\r\n        <vs-tabs alignment=\"fixed\">\r\n          <vs-tab label=\"Evaluación\">\r\n            <div class=\"vx-row mt-4\">\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px; margin-top: 15px;\">Asignatura: </div>\r\n                <vs-input disabled class=\"w-full\" :value=\"local_nombreasignatura\"></vs-input>\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px; margin-top: 15px;\">Unidades </div>\r\n                <v-select multiple :closeOnSelect=\"false\" v-model=\"unidadSelected\" class=\"mb-4\" :options=\"unidades\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px;\">Tipo de evaluación: </div>\r\n                <v-select class=\"mb-4 w-full\" v-model=\"tipoevaluacionselect\" :options=\"tiposeval\" :value=\"tipoevaluacionselect\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px;\">Cuántos grupos de evaluaciones desea crear </div>\r\n                <v-select class=\"mb-4\" v-if=\"agregarActivo===true\" v-model=\"grupo_selected\" :options=\"grupo_opciones\" :value=\"grupo_selected\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n                <v-select class=\"mb-4\" v-else v-model=\"grupo_selected\" :options=\"grupo_opciones\" :value=\"grupo_selected\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" @input=\"openConfirmgrupo(evaluacion)\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <div style=\"font-size: 12px;\">Fecha inicio: </div>\r\n                <flat-pickr class=\"mb-4 w-full\" :config=\"configdateTimePicker\" v-model=\"evaluacion.fecha_inicio\" placeholder=\"Fecha inicio\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px;\">Fecha fin: </div>\r\n                <flat-pickr class=\"mb-4 w-full\" :config=\"configdateTimePicker\" v-model=\"evaluacion.fecha_fin\" placeholder=\"Fecha fin\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <vs-input type=\"number\" class=\"inputx w-full mb-4\" label=\"Duración (minutos)\" v-model=\"evaluacion.duracion\"/>\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <vs-input type=\"number\" class=\"inputx w-full mb-6\" label=\"Puntos\" v-model=\"evaluacion.puntos\"/>\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <vs-textarea class=\"inputx w-full mb-6\" label=\"Descripción\" v-model=\"evaluacion.descripcion\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full mt-4\" align=\"center\">\r\n                <vs-switch vs-icon-on=\"check\" color=\"success\" v-model=\"evaluacion.estado\" style=\"width: 120px;\" class=\"mt-6 mb-4\">\r\n                  <span slot=\"on\">Activa</span>\r\n                  <span slot=\"off\">Inactiva</span>\r\n                </vs-switch>\r\n              </div>\r\n              <vs-divider/>\r\n              <!--CARGAR PREGUNTAS ALEATORIAS-->\r\n              <div class=\"vx-col sm:w-1/2 w-full mt-4\" align=\"center\">\r\n                <vs-button class=\"mt-2 mb-2 w-full\" v-if=\"agregarActivo===false\" color=\"warning\" type=\"border\" @click=\"verPreguntasxEval(evaluacion.id); puntajeTotalGrupo=0; popupEvalAleatoria=true\">Cargar preguntas aleatorias</vs-button>\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full mt-4\" align=\"center\">\r\n                <vs-button class=\"mt-2 mb-2 w-full\" v-if=\"agregarActivo===false\" color=\"primary\" type=\"gradient\" @click=\"editarEvaluacion(evaluacion)\">Guardar</vs-button>\r\n                <div v-else>\r\n                <vs-button class=\"mt-2 mb-2 w-full\" v-if=\"guardadoActivo===false\" color=\"success\" type=\"gradient\" @click=\"agregar()\">Guardar</vs-button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </vs-tab>\r\n          <vs-tab label=\"Preguntas\">\r\n            <!------lista preguntas por evaluacion----->\r\n            <div v-if=\"evaluacion.id===undefined || evaluacion.id===''\"></div>\r\n            <ul align=\"center\" v-else class=\"mt-6 mb-2\" style=\"border: 1px solid #D5D5D5; border-radius: 5px;\">\r\n              <vs-radio v-for=\"(itemp, indexp) in cant_gruposSelec\" :key=\"indexp\" v-model=\"radios1\" v-bind:vs-value=\"indexp+1\" class=\"m-3\" @input=\"verPreguntasxEval(evaluacion.id)\">\r\n                  Grupo {{indexp+1}}\r\n              </vs-radio>\r\n            </ul>\r\n            <vs-table stripe v-if=\"preguntasEvaluaciones!=0\" v-model=\"pregSelected\" pagination max-items=\"25\" search :data=\"preguntasEvaluaciones.items\">\r\n              <template slot=\"header\">\r\n                <vs-button @click=\"popupEditEval=false; popupSelecPreg=true; verPreguntas();\" class=\"mr-1\" size=\"small\" style=\"font-size: 14px;\" color=\"dark\" type=\"filled\">Cargar preguntas</vs-button>\r\n                <vs-button @click=\"irPreguntas\" size=\"small\" style=\"font-size: 14px;\" color=\"primary\" type=\"filled\" class=\"mr-3\">Crear mis preguntas</vs-button>\r\n              </template>\r\n              <template slot=\"thead\">\r\n                <vs-th sort-key=\"descripcion\" style=\"font-size: 15px; color: #18DE8A;\">Preguntas de mi evaluación - Cantidad: {{preguntasEvaluaciones.items.length}}  - Puntaje: {{puntajeTotalGrupo}}\r\n                    </vs-th>\r\n                <vs-th sort-key=\"nombre_tipo\">Detalle</vs-th>\r\n                <vs-th>Acciones</vs-th>\r\n              </template>\r\n              <template slot-scope=\"{data}\">\r\n                  <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                      <vs-td :data=\"data[indextr].descripcion\">\r\n                          Tema: {{ data[indextr].nombre_tema}}<br>\r\n                          {{ data[indextr].descripcion }}\r\n                          <img v-if=\"data[indextr].img_pregunta!='' && data[indextr].img_pregunta!='null' && data[indextr].img_pregunta!=null\" v-bind:src=\"$data_url+'archivos/img/img_preguntas/'+data[indextr].img_pregunta\" class=\"img-responsive\" style=\"border-radius: 5px;\" width=\"100px\">\r\n                          <vs-collapse>\r\n                          <vs-collapse-item>\r\n                              <div slot=\"header\">\r\n                                  Opciones\r\n                              </div>\r\n                              <div class=\"mb-5\" :key=\"indexitem\" v-for=\"(item, indexitem) in data[indextr].opciones\">\r\n                              <div style=\"width: 100%; font-size: 12px; color: #0DCD88;\" v-if=\"item.tipo===1\">Respuesta correcta<br></div>\r\n                              <div style=\"width: 100%; font-size: 12px; color: #FD5858;\" v-else>Respuesta incorrecta<br></div>\r\n                              <div style=\"width: 100%\"> {{ item.opcion }}<br></div>\r\n                              <div style=\"width: 100%\" ><img v-if=\"item.img_opcion!='' && item.img_opcion!='null' && item.img_opcion!=null\" v-bind:src=\"$data_url+'archivos/img/img_preguntas/'+item.img_opcion\" class=\"img-responsive\" style=\"border-radius: 5px;\" width=\"100px\"></div>\r\n                              </div>\r\n                          </vs-collapse-item>\r\n                          </vs-collapse>\r\n                      </vs-td>\r\n\r\n                      <vs-td :data=\"data[indextr].nombre_tipo\">\r\n                          {{data[indextr].clasificacion}}<br>\r\n                          <b>Puntaje:</b> {{data[indextr].puntaje_pregunta}}<br>\r\n                          <b>Tipo:</b> {{data[indextr].nombre_tipo}}\r\n                      </vs-td>\r\n\r\n                      <vs-td>\r\n                          <vs-button @click=\"quitarPregunta(data[indextr], data[indextr].id_pre_evas)\" color=\"danger\" style=\"font-size: 13px;\" type=\"filled\" size=\"small\">eliminar</vs-button>\r\n                      </vs-td>\r\n                  </vs-tr>\r\n              </template>\r\n            </vs-table>\r\n            <div align=\"center\" class=\"mb-5 mt-5\" color=\"#842993\" v-if=\"preguntasEvaluaciones==0\">\r\n                <div class=\"mt-6\" v-if=\"evaluacion.id===undefined || evaluacion.id===''\">\r\n                    Debe crear una evaluación antes de cargar preguntas.\r\n                </div>\r\n                <div v-else class=\"mt-6\">\r\n                    <vs-button color=\"primary\" type=\"line\" class=\"ml-4\" @click=\"popupEditEval=false; popupSelecPreg=true; verPreguntas(evaluacion.id);\">Cargar preguntas</vs-button>\r\n                    <vs-button @click=\"irPreguntas\" color=\"primary\" type=\"line\" class=\"ml-3\">Crear mis preguntas</vs-button>\r\n                </div>\r\n            </div>\r\n          </vs-tab>\r\n          <!-----------fin lista preguntas por evaluacion------------->\r\n        </vs-tabs>\r\n        </vs-popup>\r\n    </div>\r\n    <!----fin modal editar--->\r\n    <!-- Modal Preguntas-->\r\n    <div class=\"demo-alignment\">\r\n      <vs-popup fullscreen classContent=\"popup-example\" v-bind:title=\"'Seleccione las preguntas para esta Evaluación - GRUPO '+radios1\" :active.sync=\"popupSelecPreg\">\r\n          <b>Asignaturas:</b> {{ local_nombreasignatura }}<br>\r\n          <div v-if=\"preguntas!=0\"> <b>Cantidad preguntas:</b> {{  preguntas.items.length }}</div>\r\n          <vs-table stripe v-if=\"preguntas!=0\" v-model=\"pregSelected\" pagination max-items=\"25\" search :data=\"preguntas.items\">\r\n\r\n              <template slot=\"header\">\r\n                  <vs-button @click=\"popupSelecPreg=false; popupEditEval=true;\" class=\"mr-2\" size=\"small\" style=\"font-size: 14px;\" color=\"primary\" type=\"filled\"> ← Volver</vs-button>\r\n\r\n                  <v-select v-model=\"unidadSelectedFiltrar\" class=\"mr-2\" :options=\"unidadesFiltrar\" @input=\"filtrarPreguntasxUnidad()\" style=\"width: 180px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n                  <v-select v-model=\"tipoSelected\" class=\"mr-2\" :options=\"tipos\" @input=\"filtrarTipos()\" style=\"width: 250px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n                  <v-select v-model=\"bancoSelected\" class=\"mr-2\" :options=\"bancos\" @input=\"filtrarBancos()\" style=\"width: 250px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n              </template>\r\n\r\n              <template slot=\"thead\">\r\n              <vs-th width=\"60%\" sort-key=\"descripcion\">Pregunta</vs-th>\r\n              <vs-th width=\"20%\" sort-key=\"tipo\">Tipo</vs-th>\r\n              <vs-th width=\"20%\">Acciones</vs-th>\r\n              </template>\r\n\r\n              <template slot-scope=\"{data}\">\r\n              <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n              <vs-td :data=\"data[indextr].descripcion\">\r\n                  Tema: {{ data[indextr].nombre_tema }} <br>\r\n                  {{ data[indextr].descripcion }}\r\n                  <img v-if=\"data[indextr].img_pregunta!='' && data[indextr].img_pregunta!='null' && data[indextr].img_pregunta!=null\" v-bind:src=\"$data_url+'archivos/img/img_preguntas/'+data[indextr].img_pregunta\" class=\"img-responsive\" width=\"100px\" style=\"border-radius: 5px;\">\r\n\r\n                  <vs-collapse>\r\n                  <vs-collapse-item>\r\n                      <div slot=\"header\">\r\n                          Opciones\r\n                      </div>\r\n                      <div class=\"mb-5\" :key=\"indexitem\" v-for=\"(item, indexitem) in data[indextr].opciones\">\r\n                      <div style=\"width: 100%; font-size: 12px; color: #0DCD88;\" v-if=\"item.tipo===1\">Respuesta correcta<br></div>\r\n                      <div style=\"width: 100%; font-size: 12px; color: #FD5858;\" v-else>Respuesta incorrecta<br></div>\r\n                      <div style=\"width: 100%\"> {{ item.opcion }}<br></div>\r\n                      <div style=\"width: 100%\" ><img v-if=\"item.img_opcion!='' && item.img_opcion!='null' && item.img_opcion!=null\" v-bind:src=\"$data_url+'archivos/img/img_preguntas/'+item.img_opcion\" class=\"img-responsive\" style=\"border-radius: 5px;\" width=\"100px\"></div>\r\n                      </div>\r\n                  </vs-collapse-item>\r\n                  </vs-collapse>\r\n              </vs-td>\r\n\r\n              <vs-td :data=\"data[indextr].nombre_tipo\">\r\n                  {{data[indextr].clasificacion}}<br>\r\n                  <b>Puntaje:</b> {{data[indextr].puntaje_pregunta}}<br>\r\n                  <b>Tipo:</b> {{data[indextr].nombre_tipo}}\r\n              </vs-td>\r\n\r\n              <vs-td :data=\"data[indextr].id\">\r\n                  <vs-button @click=\"cargarPregunta(data[indextr], data[indextr])\" size=\"small\" style=\"font-size: 13px;\" color=\"success\" type=\"filled\">Agregar</vs-button>\r\n              </vs-td>\r\n\r\n              </vs-tr>\r\n              </template>\r\n          </vs-table>\r\n\r\n          <div class=\"mb-6 mt-5\" color=\"#842993\" v-if=\"preguntas==0\">\r\n              <vs-button @click=\"popupSelecPreg=false; popupEditEval=true;\" class=\"mr-2\" size=\"small\" style=\"font-size: 14px;\" color=\"primary\" type=\"filled\"> ← Volver</vs-button>\r\n\r\n              <v-select v-model=\"unidadSelectedFiltrar\" class=\"mr-2\" :options=\"unidadesFiltrar\" @input=\"filtrarPreguntasxUnidad()\" style=\"display: inline-block; width: 180px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n              <v-select v-model=\"tipoSelected\" class=\"mb-6\" :options=\"tipos\" @input=\"filtrarTipos()\" style=\"width: 250px; min-width: 60px; display: inline-block;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n              <v-select v-model=\"bancoSelected\" class=\"mr-2\" :options=\"bancos\" @input=\"filtrarBancos()\" style=\"display: inline-block; width: 250px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n              <div class=\"w-full mt-6\" align=\"center\" style=\"height: 700px;\" v-if=\"unidadSelected===''\">Seleccione una unidad</div>\r\n\r\n              <div class=\"w-full mt-6\" align=\"center\" style=\"height: 700px;\" v-else>No existen preguntas para esta unidad.</div>\r\n\r\n              <div class=\"w-full mt-6\" align=\"center\" style=\"height: 700px;\" v-if=\"tipoSelected==='' && unidadSelected!=''\">Seleccione un tipo</div>\r\n\r\n              <div class=\"w-full mt-6\" align=\"center\" style=\"height: 700px;\" v-else>No existen preguntas para el tipo seleccionado</div>\r\n          </div>\r\n\r\n      </vs-popup>\r\n    </div>\r\n    <!----fin modal preguntas--->\r\n    <!--========FIN NUEVOS MODALES==========-->\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport crearPreguntas from './PreguntasComponent.vue'\r\nimport flatPickr from 'vue-flatpickr-component'\r\nimport 'flatpickr/dist/flatpickr.css';\r\nimport Vue from 'vue'\r\nimport axios from 'axios'\r\nimport vSelect from 'vue-select'\r\nimport moment from 'moment'\r\nimport VueRouter from 'vue-router'\r\nimport $ from 'jquery'\r\nexport default {\r\n    data() {\r\n        return {\r\n            fileName: null,\r\n            formats:['xls', 'xlsx', 'csv', 'txt'],\r\n            cellAutoWidth: true,\r\n            selectedFormat: 'xls',\r\n            activePrompt: false,\r\n            popupGrupos: false,\r\n\r\n            evaluaciones: [],\r\n            evaluacion: {\r\n                nombre: '',\r\n                asignatura: '',\r\n                descripcion: '',\r\n                fecha_inicio: '',\r\n                fecha_fin: '',\r\n                estado: '',\r\n                puntos: '',\r\n                duracion: '',\r\n            },\r\n            preguntas: [], //preguntas disponibles para cada evaluacion\r\n            pregunta: {\r\n                descripcion: '',\r\n                respuesta: '',\r\n                opcion1: '',\r\n                opcion2: '',\r\n                opcion3: ''\r\n            },\r\n            preguntasEvaluaciones: [], //preguntas cargadas a las evaluaciones\r\n            preguntaEvaluacion: {\r\n                descripcion: '',\r\n                respuesta: '',\r\n                opcion1: '',\r\n                opcion2: '',\r\n                opcion3: ''\r\n            },\r\n            preguntasEvaluacionesResponder: [],\r\n            preguntaEvaluacioneResponder: {\r\n                descripcion: '',\r\n                id_tema: '',\r\n                respuesta: '',\r\n                opcion1: '',\r\n                opcion2: '',\r\n                opcion3: '',\r\n                img_pregunta: '',\r\n                img_respuesta: '',\r\n                img_opcion1: '',\r\n                img_opcion2: '',\r\n                img_opcion3: ''\r\n            },\r\n            asignaturas: [],\r\n            asignatura: {id: '', label: ''},\r\n            asignaturaSelected: {id: '', label: ''},\r\n            editarActivo: false,\r\n            date: new Date().toJSON(),\r\n            datetime: null,\r\n\r\n            agregarActivo: false,\r\n            popupEditEval: false,\r\n            popupSelecPreg: false,\r\n            popupResolver: false,\r\n            estado_evaluacion:['inactiva'],\r\n            evalSelected: [],\r\n            pregSelected: [],\r\n            'tableList': [\r\n                'vs-th: Component',\r\n                'vs-tr: Component',\r\n                'vs-td: Component',\r\n                'thread: Slot',\r\n                'tbody: Slot',\r\n                'header: Slot'\r\n            ],\r\n            usuario: [],\r\n            docente: null,\r\n            nombre_docente: null,\r\n            apellido_docente: null,\r\n            active1: true,\r\n            calificaciones: [],\r\n            calificacionesSelected: [],\r\n            evaluacionestabla: [],\r\n            respuestas: [],\r\n            estudiantes: [],\r\n            alumnos: [],\r\n            urlOrigen: '',\r\n            id_evaluacion: '',\r\n            guardadoActivo: false,\r\n            unidadSelectedFiltrar: '',\r\n            unidSelect: [],\r\n            unidadesFiltrar: [],\r\n            unidadSelected: [],\r\n            unidades: [\r\n                { id: \"1\", label: \"Unidad 1\" },\r\n                { id: \"2\", label: \"Unidad 2\" },\r\n                { id: \"3\", label: \"Unidad 3\" },\r\n                { id: \"4\", label: \"Unidad 4\" },\r\n                { id: \"5\", label: \"Unidad 5\" },\r\n                { id: \"6\", label: \"Unidad 6\" }\r\n            ],\r\n            tipoSelected: '',\r\n            tipos: [\r\n                { id: \"1\", label: \"Opción múltiple\", }, { id: \"2\", label: \"Respuesta cerrada\", }, { id: \"3\", label: \"Verdadero/Falso\", }, { id: \"5\", label: \"Selección simple\"}, { id: \"6\", label: \"Respuesta abierta\" }\r\n            ],\r\n            tiposeval:[],\r\n            tipoevaluacionselect:'',\r\n            grupo_selected:'',\r\n            grupo_opciones:[\r\n                {id:'1',label:'1 grupo'},\r\n                {id:'2',label:'2 grupos'},\r\n                {id:'3',label:'3 grupos'},\r\n                {id:'4',label:'4 grupos'},\r\n                {id:'5',label:'5 grupos'}\r\n            ],\r\n            cant_grupos_select:'',\r\n            radios1: 1,\r\n            grupoEstudianteSelec: '',\r\n            gruposEstudiantes: [\r\n                {id:'1',label:'Grupo 1'},\r\n                {id:'2',label:'Grupo 2'},\r\n                {id:'3',label:'Grupo 3'},\r\n                {id:'4',label:'Grupo 4'},\r\n                {id:'5',label:'Grupo 5'}\r\n            ],\r\n            estudiantesEval: [],\r\n            activePromptGrupo: false,\r\n            textoConfirmgrup: '',\r\n            puntajeTotalGrupo: 0,\r\n            popupEvalAleatoria: false,\r\n            tipospreguntas: [],\r\n            configdateTimePicker: {\r\n                enableTime: true,\r\n                dateFormat: 'Y-m-d H:i:s'\r\n            },\r\n            bancoSelected: {id:'3',label:'Ambas'},\r\n            bancos: [\r\n                {id:'1',label:'Preguntas de Prolipa'},\r\n                {id:'2',label:'Solo mis preguntas'},\r\n                {id:'3',label:'Ambas'},\r\n            ],\r\n            cant_gruposSelec: [1],\r\n            cant_preguntast1: 0,\r\n            cant_preguntast2: 0,\r\n            cant_preguntast3: 0,\r\n            cant_preguntast4: 0,\r\n            cant_preguntast5: 0,\r\n            puntajeIngresado: 0,\r\n            tiposPregAl: [1,2,3,5,6],\r\n            puntajetipo: [1,2,0.5,1,2],\r\n            cantidadesField: [0,0,0,0,0],\r\n            indexCantField: 0,\r\n            evalElimin: [],\r\n            activePromptEliminar: false,\r\n            local_idasignatura: '',\r\n            local_nombreasignatura: '',\r\n            popupCrearPreguntas: false,\r\n        }\r\n    },\r\n    components: {\r\n        'v-select': vSelect,\r\n        'crear-preguntas': crearPreguntas,\r\n        flatPickr\r\n    },\r\n    created() {\r\n        let me = this;\r\n        me.usuario = JSON.parse(localStorage.getItem('usuario'));\r\n        me.docente = me.usuario.idusuario\r\n        me.nombre_docente = me.usuario.nombres\r\n        me.apellido_docente = me.usuario.apellidos\r\n        var urlBack = window.location.href\r\n        var urlV = urlBack.split('/')\r\n        me.urlOrigen = urlV[0]+'/'+urlV[1]+'/'+urlV[2]\r\n\r\n        me.local_idasignatura = localStorage.idasignatura\r\n        me.local_nombreasignatura = localStorage.nombreasignatura\r\n        console.log(me.local_idasignatura+'--'+me.local_nombreasignatura);\r\n\r\n        me.getEvalDoc();\r\n        this.$http.get(this.$server_url+'asignaturasDoc/'+me.docente).then(res => {\r\n            me.asignaturas = res.data;\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        }),\r\n        this.$http.get(this.$server_url+'tipoevaluacion').then(res=>{\r\n            me.tiposeval = res.data\r\n        })\r\n        .catch(function (error){\r\n            console.log(error)\r\n        })\r\n    },\r\n    methods: {\r\n        exportToExcel () {let headerTitle = ['Cédula', 'Estudiante'];\r\n            let headerVal = ['Cedula', 'Estudiante'];\r\n\r\n            for (let index = 0; index < this.alumnos[0].total.length; index++) {\r\n                headerTitle.push(\"Evaluación\" + index)\r\n                headerVal.push(\"Evaluacion\" + index)\r\n            }\r\n\r\n            import('@/vendor/Export2Excel').then(excel => {\r\n                const list = this.respuestas\r\n                const data = this.formatJson(headerVal, list)\r\n                excel.export_json_to_excel({\r\n                    header: headerTitle,\r\n                    data,\r\n                    filename: this.fileName,\r\n                    autoWidth: this.cellAutoWidth,\r\n                    bookType: this.selectedFormat\r\n                })\r\n                this.clearFields()\r\n                this.guardarActivo = '';\r\n                this.generarActivo = ' ';\r\n                this.textAlertCant = '';\r\n                this.cantidad = '';\r\n                this.codigoSelected = [];\r\n            })\r\n        },\r\n        formatJson(filterVal, jsonData) {\r\n            return jsonData.map(v => filterVal.map(j => {\r\n                return v[j]\r\n            }))\r\n        },\r\n        clearFields() {\r\n            this.fileName = ''\r\n            this.cellAutoWidth = true\r\n            this.selectedFormat = 'xls'\r\n        },\r\n        onResize() {\r\n            if (window.innerWidth < 769)\r\n                this.isMobile = true;\r\n            else\r\n                this.isMobile = false;\r\n        },\r\n        getEvalDoc(){\r\n            let me = this\r\n            me.$vs.loading()\r\n            let formData1 = new FormData();\r\n            formData1.append('docente', me.docente);\r\n            formData1.append('codigo', localStorage.codigo);\r\n            me.$http.post(this.$server_url+'evaluacionesDocente', formData1).then(res => {\r\n                me.evaluaciones = res.data;\r\n                me.$vs.loading.close()\r\n                // console.log(me.evaluaciones)\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        limpiar() {\r\n            this.evaluacion.nombre = '';\r\n            this.evaluacion.duracion = '';\r\n            this.evaluacion.descripcion = '';\r\n            this.evaluacion.fecha_inicio = '';\r\n            this.evaluacion.fecha_fin = '';\r\n            this.evaluacion.estado = '';\r\n            this.evaluacion.puntos = '';\r\n            this.preguntas = [];\r\n            this.preguntasEvaluaciones = [];\r\n            this.evaluacion.id = '';\r\n            this.guardadoActivo = false;\r\n            this.unidadSelected = [];\r\n            this.grupo_selected = '';\r\n            this.radios1 = 1;\r\n            this.puntajeIngresado = 0;\r\n            this.cantidadesField = [0,0,0,0,0];\r\n            this.id_evaluacion = '';\r\n        },\r\n        agregar() {\r\n            let me = this;\r\n            if ( me.evaluacion.puntos === '' || me.evaluacion.duracion === '' || me.tipoevaluacionselect.id === '' || me.grupo_selected.id === '' || me.unidadSelected.id === '' ){\r\n                me.$vs.notify({\r\n                    text:'Debe completar todos los campos antes de guardar',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if(me.evaluacion.fecha_inicio == \"\" || me.evaluacion.fecha_inicio == null || me.evaluacion.fecha_inicio == undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar una fecha de inicio',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if(me.evaluacion.fecha_fin == \"\" || me.evaluacion.fecha_fin == null || me.evaluacion.fecha_fin == undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar una fecha fin',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if(me.grupo_selected === '' || me.grupo_selected === null || me.grupo_selected === undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar la cantidad de grupos',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            var idunidades = [];\r\n            for( var i=0; i<this.unidadSelected.length; i++ ){\r\n                idunidades.push(this.unidadSelected[i].id);\r\n            }\r\n\r\n            me.$vs.loading()\r\n            let estado;\r\n            if( me.evaluacion.estado == true ){\r\n                estado = 1;\r\n            }else{\r\n                estado = 0;\r\n            }\r\n\r\n            let descripVal = me.evaluacion.descripcion;\r\n            if( me.evaluacion.descripcion === '' || me.evaluacion.descripcion === null || me.evaluacion.descripcion === 'null' ){\r\n                descripVal = ' '\r\n            }\r\n\r\n            let formData = new FormData();\r\n                formData.append('nombre', me.evaluacion.nombre);\r\n                formData.append('asignatura',  me.local_idasignatura);\r\n                formData.append('descripcion', descripVal);\r\n                formData.append('puntos', me.evaluacion.puntos);\r\n                formData.append('duracion', me.evaluacion.duracion);\r\n                formData.append('fecha_inicio', me.evaluacion.fecha_inicio);\r\n                formData.append('fecha_fin', me.evaluacion.fecha_fin);\r\n                formData.append('estado', estado);\r\n                formData.append('docente', me.docente);\r\n                formData.append('codigo', localStorage.codigo);\r\n                formData.append('idtipoeval', me.tipoevaluacionselect.id);\r\n                formData.append('id_grupo_opciones', me.grupo_selected.id);\r\n                formData.append('cant_unidades', idunidades);\r\n            me.$http.post(this.$server_url+'evaluacion', formData)\r\n                .then(res => {\r\n                    me.getEvalDoc();\r\n                    //me.clasifGrupEstEval(me.evaluacion);\r\n                    me.$vs.loading.close()\r\n                    me.unidSelect = idunidades\r\n                    me.agregarActivo = false\r\n                    me.guardadoActivo = true\r\n                    me.editarActivo = true\r\n                    me.evaluacion.id = res.data.id\r\n                    me.id_evaluacion = res.data.id\r\n                    //me.popupEditEval = false\r\n                    me.cant_gruposSelec = []\r\n                    for( var i=1; i<=me.grupo_selected.id; i++ ){\r\n                        me.cant_gruposSelec.push(i)\r\n                    }\r\n                    me.$vs.notify({\r\n                    text:'Evaluación guardada exitosamente',\r\n                    color:'success',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'})\r\n                })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error+' agregar');\r\n            })\r\n\r\n        },\r\n        openConfirmEliminar(item){\r\n            let me = this;\r\n            me.evalElimin = item\r\n            me.activePromptEliminar = true;\r\n        },\r\n        eliminarEvaluacion() {\r\n            let me = this;\r\n            me.$http.get(this.$server_url+`eliminar_evaluacion/${me.evalElimin.id}`).then(res => {\r\n                if( res.data === 0 ){\r\n                    me.$vs.notify({\r\n                    text:'No se puede eliminar esta evaluación porque ya esta siendo utilizada por sus estudiantes.',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                }else{\r\n                    me.getEvalDoc()\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.notify({\r\n                    text:'No se puede eliminar esta evaluación porque ya esta siendo utilizada por sus estudiantes!'+error,\r\n                    color:'danger',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'})\r\n            })\r\n        },\r\n        editarFormulario(item) {\r\n            let me = this;\r\n            me.cantidadesField = [0,0,0,0,0];\r\n            me.radios1 = 1;\r\n            me.asignaturaSelected = {id: item.id_asignatura, label: item.nombreasignatura};\r\n            me.evaluacion.nombre = item.nombre_evaluacion;\r\n            me.evaluacion.descripcion = item.descripcion;\r\n            me.evaluacion.puntos = item.puntos;\r\n            me.evaluacion.fecha_inicio = item.fecha_inicio;\r\n            me.evaluacion.fecha_fin = item.fecha_fin;\r\n            me.evaluacion.duracion = item.duracion;\r\n            me.evaluacion.estado = item.estado;\r\n            me.evaluacion.id = item.id;\r\n            me.tipoevaluacionselect = {id: item.id_tipoeval, label: item.tipo_nombre};\r\n            me.grupo_selected = {id: item.grupos_evaluacion, label: item.grupos_evaluacion + ' grupos'};\r\n            me.cant_gruposSelec = []\r\n            for( var i=1; i<=me.grupo_selected.id; i++ ){\r\n                me.cant_gruposSelec.push(i)\r\n            }\r\n            me.editarActivo = true; //activa el form editar\r\n\r\n            me.unidSelect = item.cant_unidades.split(',');\r\n            me.cant_grupos_select = me.grupo_selected.id; //cantidad de grupos o filas de evaluaciones desde la base\r\n            me.unidadSelected=[];\r\n            for(var i=0; i<me.unidSelect.length; i++){\r\n               me.unidadSelected.push({id: me.unidSelect[i], label: 'Unidad '+me.unidSelect[i]});\r\n            }\r\n\r\n            me.verPreguntasxEval(item.id);\r\n            me.verEstudiantesEval();\r\n        },\r\n        openConfirmgrupo(item){\r\n            let me = this;\r\n            this.popupEditEval=false;\r\n            if (me.grupo_selected.id < me.cant_grupos_select) {\r\n               me.textoConfirmgrup = 'Ha seleccionado un grupo menor de evaluaciones, las preguntas asignadas a los grupos restantes, se ocultarán'\r\n            }else{\r\n                me.textoConfirmgrup = 'Ha seleccionado un grupo mayor de evaluaciones, debe asignar preguntas a los nuevos grupos.';\r\n            }\r\n            me.activePromptGrupo = true;\r\n        },\r\n        editarEvaluacion(item) {\r\n            let me = this;\r\n            item = me.evaluacion;\r\n            if(me.grupo_selected === '' || me.grupo_selected === null || me.grupo_selected === undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar la cantidad de grupos',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if (me.evaluacion.fecha_inicio === '' || me.evaluacion.fecha_fin === '' || me.evaluacion.puntos === '' || me.evaluacion.duracion === '' ||  me.tipoevaluacionselect === null ||  me.tipoevaluacionselect === '' || me.grupo_selected.id === '' ) {\r\n                me.$vs.notify({\r\n                    text:'Debe completar todos los campos antes de guardar',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n\r\n\r\n            let idunidades = [];\r\n            for( var i=0; i<this.unidadSelected.length; i++ ){\r\n                idunidades.push(this.unidadSelected[i].id);\r\n            }\r\n\r\n            me.$vs.loading()\r\n            let estado;\r\n            if( me.evaluacion.estado == true ){\r\n                estado = 1;\r\n            }else{\r\n                estado = 0;\r\n            }\r\n\r\n            let descripVal = me.evaluacion.descripcion;\r\n            if( me.evaluacion.descripcion === '' || me.evaluacion.descripcion === null || me.evaluacion.descripcion === 'null' ){\r\n                descripVal = ' '\r\n            }\r\n\r\n            let formData = new FormData();\r\n                formData.append('id', item.id);\r\n                formData.append('nombre', me.evaluacion.nombre);\r\n                formData.append('asignatura',  me.local_idasignatura);\r\n                formData.append('descripcion', descripVal);\r\n                formData.append('puntos', me.evaluacion.puntos);\r\n                formData.append('duracion', me.evaluacion.duracion);\r\n                formData.append('fecha_inicio', me.evaluacion.fecha_inicio);\r\n                formData.append('fecha_fin', me.evaluacion.fecha_fin);\r\n                formData.append('estado', estado);\r\n                formData.append('docente', me.docente);\r\n                formData.append('codigo', localStorage.codigo);\r\n                formData.append('idtipoeval', me.tipoevaluacionselect.id);\r\n                formData.append('id_grupo_opciones', me.grupo_selected.id);\r\n                formData.append('cant_unidades', idunidades);\r\n\r\n            me.$http.post(this.$server_url+'evaluacion', formData).then(res => {\r\n                const index = me.evaluaciones.findIndex(\r\n                    evaluacionBuscar => evaluacionBuscar.id === res.data.id)\r\n                me.evaluacion[index] = res.data;\r\n                me.getEvalDoc();\r\n                //me.clasifGrupEstEval(item);\r\n                me.editarActivo = false; //desactiva el form editar\r\n                //me.popupEditEval = false\r\n                me.cant_gruposSelec = []\r\n                for( var i=1; i<=me.grupo_selected.id; i++ ){\r\n                    me.cant_gruposSelec.push(i)\r\n                }\r\n                me.$vs.loading.close()\r\n                me.$vs.notify({\r\n                text:'Evaluación editada exitosamente',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        verPreguntas() {\r\n            let me = this;\r\n            me.preguntas = [];\r\n            // me.id_evaluacion = id;\r\n            me.tipoSelected = '';\r\n            me.$vs.loading()\r\n            me.unidadesFiltrar=[];\r\n\r\n            for(var i=0; i<me.unidadSelected.length; i++){\r\n               me.unidadesFiltrar.push({id: me.unidadSelected[i].id, label: 'Unidad '+me.unidadSelected[i].id});\r\n            }\r\n            me.unidadSelectedFiltrar = {id: me.unidadSelected[0].id, label: 'Unidad '+me.unidadSelected[0].id}\r\n            me.filtrarPreguntasxUnidad()\r\n        },\r\n        cargarPregunta(item, index) {\r\n            let me = this;\r\n            me.$vs.loading()\r\n            let formData = new FormData();\r\n                formData.append('id_evaluacion', me.evaluacion.id);\r\n                formData.append('id_pregunta', item.id);\r\n                formData.append('grupo', me.radios1);\r\n            me.$http.post(this.$server_url+'pregEvaluacion', formData)\r\n            .then(res => {\r\n\r\n\r\n                me.filtrarBancos()\r\n\r\n                /*if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n                    console.log('no hay preguntas para mostrar');\r\n                }else{\r\n                    if( me.tipoSelected.id === '' || me.tipoSelected === null || me.tipoSelected.id === undefined){\r\n                        me.filtrarPreguntasxUnidad()\r\n                    }else{\r\n                        me.filtrarTipos()\r\n                    }\r\n                }*/\r\n\r\n                me.verPreguntasxEval(me.evaluacion.id);\r\n\r\n                me.$vs.notify({\r\n                text:'Pregunta asignada a esta evaluación',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        quitarPregunta(index, id) {\r\n            let me = this;\r\n            me.$vs.loading()\r\n            me.$http.get(this.$server_url+`quitarPregEvaluacion/${id}`).then(() => {\r\n                me.verPreguntasxEval(index.id_evaluacion);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        backEndDateFormat: function(date) {\r\n        \treturn moment(date, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\r\n        },\r\n        removeItemFromArr (arr, item) {\r\n            const i = arr.indexOf(item)\r\n            arr.splice(i, 1)\r\n        },\r\n        irPreguntas(){\r\n            if(this.id_evaluacion===''){\r\n                this.id_evaluacion = 0\r\n            }\r\n\r\n            localStorage.id_desde_eval = this.evaluacion.id\r\n            localStorage.grupo_desde_eval = this.radios1\r\n            localStorage.crea_desde_eval = true\r\n\r\n            this.popupSelecPreg = false\r\n            this.popupCrearPreguntas = true\r\n            // window.location.href = this.urlOrigen+'/preguntas/'+this.id_evaluacion;\r\n        },\r\n        verCalificaciones(){\r\n            let me = this;\r\n            me.$vs.loading()\r\n            me.$http.get(this.$server_url+`verCalificacionEval/${localStorage.codigo}`).then(response => {\r\n                me.respuestas = []\r\n                var respuesta = response.data;\r\n                me.estudiantes = response.data;\r\n\r\n                if (response.data.length != 0) {\r\n                    me.alumnos = response.data.items;\r\n                    me.alumnos.forEach(element => {\r\n                        var cal = new Object();\r\n                        cal.idusuario = element.usuario_idusuario\r\n                        cal.Cedula = element.cedula\r\n                        cal.Estudiante = element.nombres + \" \" + element.apellidos\r\n                        cal.calificaciones = new Object();\r\n                        for (let index = 0; index < element.total.length; index++) {\r\n                            try {\r\n                                if(element.calificaciones[index].calificacion===null){\r\n                                    element.calificaciones[index].calificacion = 0\r\n                                    cal.calificaciones[index] = element.calificaciones[index].calificacion+'/'+element.calificaciones[index].puntos\r\n                                }else{\r\n                                    cal.calificaciones[index] = element.calificaciones[index].calificacion+'/'+element.calificaciones[index].puntos\r\n                                }\r\n                                eval(\"cal.Evaluacion\" + index + \"=\" + element.calificaciones[index].calificacion);\r\n\r\n                            } catch (error) {\r\n                                element.calificaciones[index].calificacion = 0\r\n                                cal.calificaciones[index] = element.calificaciones[index].calificacion+'/'+element.calificaciones[index].puntos\r\n                                eval(\"cal.Evaluacion\" + index + \"=\" + 0);\r\n                            }\r\n                        }\r\n                        me.respuestas.push(cal)\r\n                    });\r\n                }\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                  console.log(error);\r\n            })\r\n\r\n            me.$http.get(this.$server_url+`verEvalCursoExport/${localStorage.codigo}`).then(res => {\r\n                me.evaluacionestabla = res.data;\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n\r\n        },\r\n        filtrarPreguntasxUnidad(){\r\n            let me = this;\r\n            if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n                return;\r\n            }\r\n            me.bancoSelected = {id:'3',label:'Ambas'}\r\n\r\n            var tipo;\r\n            if( me.tipoSelected===null || me.tipoSelected==='' ){\r\n                tipo = 'null'\r\n            }else{\r\n                tipo = me.tipoSelected.id\r\n            }\r\n\r\n            me.$vs.loading()\r\n            const formData = new FormData();\r\n                formData.append('evaluacion',       me.id_evaluacion);\r\n                formData.append('unidad',           me.unidadSelectedFiltrar.id);\r\n                formData.append('grupo',            me.radios1);\r\n                formData.append('tipo',             tipo);\r\n                formData.append('idusuario',        me.usuario.idusuario)\r\n                formData.append('usuario',          me.usuario.idusuario)\r\n                formData.append('id_group',         me.usuario.id_group)\r\n                formData.append('institucion_id',   me.usuario.institucion_idInstitucion)\r\n                formData.append('preguntasAll',     1)\r\n                this.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n                me.preguntas = res.data;\r\n                console.log(\"uwu\",me.preguntas)\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error);\r\n            })\r\n\r\n        },\r\n        filtrarTipos(){\r\n            let me = this;\r\n            if( me.unidadSelectedFiltrar === '' || me.unidadSelectedFiltrar === null || me.unidadSelectedFiltrar.id === undefined){\r\n                return;\r\n            }\r\n\r\n            if( me.tipoSelected === '' || me.tipoSelected === null || me.tipoSelected.id === undefined){\r\n                me.filtrarPreguntasxUnidad()\r\n                return;\r\n            }\r\n\r\n            me.$vs.loading()\r\n            const formData = new FormData();\r\n                formData.append('evaluacion',   me.id_evaluacion);\r\n                formData.append('unidad',       me.unidadSelectedFiltrar.id);\r\n                formData.append('tipo',         me.tipoSelected.id);\r\n                formData.append('grupo',        me.radios1);\r\n                formData.append('idusuario',    me.usuario.idusuario)\r\n                formData.append('usuario',      me.usuario.idusuario)\r\n                formData.append('id_group',     me.usuario.id_group)\r\n                formData.append('institucion_id',   me.usuario.institucion_idInstitucion)\r\n                formData.append('preguntasAll', 1)\r\n                me.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n            // me.$http.post(this.$server_url+'preguntasevaltipounidad', formData).then(res => {\r\n                me.preguntas = res.data;\r\n                console.log(\"uwu2\",me.preguntas)\r\n                me.bancoSelected = {}\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n\r\n        },\r\n        verPreguntasxEval(id_evaluacion){\r\n          let me = this;\r\n          me.verTiposPreguntas()\r\n          let formData = new FormData();\r\n          formData.append('evaluacion', id_evaluacion);\r\n          formData.append('grupo', me.radios1);\r\n          me.$vs.loading()\r\n          me.$http.post(this.$server_url+`pregEvaluacionGrupo`, formData).then(res => {\r\n          me.preguntasEvaluaciones = res.data;\r\n          if( me.preguntasEvaluaciones.items === undefined ){\r\n            console.log('no existen preguntas para el grupo seleccionado');\r\n          }else{\r\n            me.puntajeTotalGrupo = 0;\r\n            for(var i=0; i<me.preguntasEvaluaciones.items.length; i++){\r\n              me.puntajeTotalGrupo += me.preguntasEvaluaciones.items[i].puntaje_pregunta;\r\n            }\r\n          }\r\n            me.$vs.loading.close()\r\n          })\r\n          .catch(function (error) {\r\n            me.$vs.loading.close()\r\n            console.log(error+'verPreguntasxEval');\r\n          })\r\n        },\r\n        verEstudiantesEval(){\r\n            let me = this;\r\n            me.$vs.loading()\r\n            me.$http.get(this.$server_url+`verEstCursoEval/${localStorage.codigo}`).then(res => {\r\n                me.estudiantesEval = res.data;\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        asignarGrupoEst(item){\r\n            let me = this;\r\n            let formData = new FormData();\r\n                formData.append('estudiante', item.idusuario);\r\n                formData.append('grupo', item.grupo);\r\n                formData.append('codigo', localStorage.codigo);\r\n            me.$http.post(this.$server_url+`asignarGrupoEst`, formData).then(res => {\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        /*clasifGrupEstEval(item){\r\n            let me = this;\r\n            let estudiantes = [];\r\n            for( var i=0; i<me.estudiantesEval.length; i++ ){\r\n                estudiantes.push(me.estudiantesEval[i].idusuario);\r\n            }\r\n            estudiantes.sort(function() { return Math.random() - 0.5 });\r\n            //alert(estudiantes);\r\n            let formData = new FormData();\r\n                formData.append('grupos', me.grupo_selected.id);\r\n                formData.append('codigo', localStorage.codigo);\r\n                formData.append('cantidad', me.estudiantesEval.length);\r\n                formData.append('estudiantes', estudiantes);\r\n            this.$http.post(`http://localhostpEstEval`, formData).then(res => {\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },*/\r\n        irRevision(item, val){\r\n            localStorage.removeItem('nombresImprimir')\r\n            localStorage.setItem('id_evalRevisar', item.id);\r\n            localStorage.setItem('previsualizar_eval', val);\r\n            //this.$router.push('/revisarevaluacion')\r\n\r\n            window.location.href = this.urlOrigen+'/revisarevaluacion';\r\n        },\r\n        contarPuntosIngresados(){\r\n            let me = this\r\n            me.puntajeIngresado = 0;\r\n            var cantField = 0;\r\n            for( var i=0; i<me.cantidadesField.length; i++ ){\r\n                if( Number.isNaN(parseInt(me.cantidadesField[i])) ){\r\n                    cantField = 0;\r\n                }else{\r\n                    cantField = parseInt(me.cantidadesField[i])\r\n                }\r\n                me.puntajeIngresado += (me.puntajetipo[i]*parseInt(cantField))\r\n            }\r\n        },\r\n        cargarPreguntasAleatorias(){\r\n            let me = this\r\n            me.puntajeIngresado = 0;\r\n            var cantField = 0;\r\n            for( var i=0; i<me.cantidadesField.length; i++ ){\r\n\r\n                if( Number.isNaN(parseInt(me.cantidadesField[i])) ){\r\n                    cantField = 0;\r\n                }else{\r\n                    cantField = parseInt(me.cantidadesField[i])\r\n                }\r\n                me.puntajeIngresado += (me.puntajetipo[i]*parseInt(cantField))\r\n            }\r\n\r\n            if( me.puntajeIngresado <= 0 ){\r\n                return\r\n            }\r\n\r\n            if( me.puntajeIngresado > me.evaluacion.puntos || (me.puntajeTotalGrupo+me.puntajeIngresado) > me.evaluacion.puntos ){\r\n                me.$vs.notify({\r\n                text:'El puntaje de las preguntas excede al puntaje de esta evaluación',\r\n                color:'warning',\r\n                iconPack: 'feather',\r\n                icon:'icon-alert-triangle'})\r\n                return\r\n            }\r\n\r\n            me.$vs.loading()\r\n            let cantidad = me.cantidadesField\r\n            let unidades = []\r\n\r\n            for( var i=0; i<me.unidadSelected.length; i++ ){\r\n                unidades.push(me.unidadSelected[i].id)\r\n            }\r\n\r\n            let formData = new FormData();\r\n                formData.append('evaluacion', me.evaluacion.id);\r\n                formData.append('puntos', me.evaluacion.puntos);\r\n                formData.append('grupos', me.grupo_selected.id);\r\n                formData.append('cant_pregs', cantidad);\r\n                formData.append('unidades', unidades);\r\n                formData.append('tipos', me.tiposPregAl);\r\n                formData.append('usuario', me.usuario.idusuario);\r\n                formData.append('id_group', me.usuario.id_group);\r\n                formData.append('institucion_id', me.usuario.institucion_idInstitucion);\r\n            me.$http.post(this.$server_url+`cargarPregsRand`, formData).then(res => {\r\n                me.popupEvalAleatoria = false\r\n                me.verPreguntasxEval(me.evaluacion.id)\r\n                me.$vs.notify({\r\n                text:'Preguntas cargadas correctamente',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n                me.cantidadesField  = [0,0,0,0,0]\r\n                me.puntajeIngresado = 0\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        filtrarBancos(){\r\n            let me = this\r\n            if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n                return;\r\n            }\r\n\r\n            if( me.bancoSelected === null ){\r\n                var bancoSel = 3\r\n            }else{\r\n                var bancoSel = me.bancoSelected.id;\r\n            }\r\n\r\n            switch(bancoSel) {\r\n            case '1':\r\n                me.filtrarxProlipa()\r\n                break;\r\n            case '2':\r\n                me.filtrarxDocente()\r\n                break;\r\n            default:\r\n                me.filtrarPreguntasxUnidad()\r\n            }\r\n\r\n        },\r\n        filtrarxDocente(){\r\n            let me = this\r\n            me.$vs.loading()\r\n            var tipo;\r\n            if( me.tipoSelected===null || me.tipoSelected==='' ){\r\n                tipo = 'null'\r\n            }else{\r\n                tipo = me.tipoSelected.id\r\n            }\r\n            const formData = new FormData();\r\n                formData.append('evaluacion', me.id_evaluacion);\r\n                formData.append('unidad', me.unidadSelectedFiltrar.id);\r\n                formData.append('grupo', me.radios1);\r\n                formData.append('usuario', me.usuario.idusuario);\r\n                formData.append('tipo', tipo);\r\n                formData.append('id_group', me.usuario.id_group);\r\n                formData.append('institucion_id', me.usuario.institucion_idInstitucion);\r\n                formData.append('preguntasDocentes', 1);\r\n                me.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n            // me.$http.post(this.$server_url+'preguntasxbancoDocente', formData).then(res => {\r\n                me.preguntas = res.data\r\n                console.log(\"uwu3\",me.preguntas.items.filter(p => p.id_tema == 41))\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error);\r\n            })\r\n        },\r\n        filtrarxProlipa(){\r\n            let me = this\r\n            me.$vs.loading()\r\n            var tipo;\r\n            if( me.tipoSelected === null || me.tipoSelected === '' ){\r\n                tipo = 'null'\r\n            }else{\r\n                tipo = me.tipoSelected.id\r\n            }\r\n            const formData = new FormData();\r\n            formData.append('evaluacion', me.id_evaluacion);\r\n            formData.append('unidad', me.unidadSelectedFiltrar.id);\r\n            formData.append('usuario', me.usuario.idusuario);\r\n            formData.append('grupo', me.radios1);\r\n            formData.append('tipo', tipo);\r\n            formData.append('id_group', me.usuario.id_group);\r\n            formData.append('institucion_id', me.usuario.institucion_idInstitucion);\r\n            formData.append('preguntasProlipa', 1);\r\n            me.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n            // me.$http.post(this.$server_url+'preguntasxbancoProlipa', formData).then(res => {\r\n                me.preguntas = res.data;\r\n                console.log(\"uwu4\")\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error);\r\n            })\r\n        },\r\n        copiarLink(item){\r\n            let me = this\r\n            let date = new Date()\r\n            let fecha_actual = moment(date, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss')\r\n\r\n            //if( fecha_actual < item.fecha_inicio || fecha_actual > item.fecha_fin ){\r\n            if( fecha_actual > item.fecha_fin ){\r\n                me.$vs.notify({\r\n                text:'Esta evaluación aún no está disponible. Verifique las fechas de inicio y fin.',\r\n                color:'warning',\r\n                iconPack: 'feather',\r\n                icon:'icon-alert-triangle'})\r\n                return\r\n            }\r\n\r\n            if( item.estado != 1 ){\r\n                me.$vs.notify({\r\n                text:'Esta evaluación está inactiva',\r\n                color:'warning',\r\n                iconPack: 'feather',\r\n                icon:'icon-alert-triangle'})\r\n                return\r\n            }\r\n\r\n\r\n            let link = me.urlOrigen+'/responderEvaluacion/'+item.id+'-'+localStorage.codigo+'-'+me.usuario.institucion_idInstitucion\r\n            var aux = document.createElement(\"input\");\r\n            aux.setAttribute(\"value\", link);\r\n            document.body.appendChild(aux);\r\n            aux.select();\r\n\r\n            try {\r\n                var status = document.execCommand('copy');\r\n                if(!status){\r\n                    me.$vs.notify({\r\n                    text:'Error al copiar el link',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                }else{\r\n                    me.$vs.notify({\r\n                    text:'Link copiado',\r\n                    color:'success',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'})\r\n                }\r\n            } catch (err) {\r\n                console.log('No se pudo copiar');\r\n            }\r\n\r\n            document.body.removeChild(aux);\r\n        },\r\n        verTiposPreguntas(){\r\n            let me = this\r\n            let v_unidades = []\r\n            $.each(me.unidadSelected,function(key, value){\r\n                v_unidades.push(value.id)\r\n            });\r\n\r\n            me.$http.get(this.$server_url+'tipospreguntas/' + localStorage.idasignatura + '/'+ v_unidades+'/'+me.usuario.id_group+'/'+me.usuario.institucion_idInstitucion)\r\n            .then(res=>{\r\n                me.tipospreguntas = res.data\r\n            })\r\n            .catch(function (error){\r\n                console.log(error)\r\n            })\r\n        }\r\n    },\r\n}\r\n</script>\r\n"],"mappings":"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","ignoreList":[]}]}