{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\areas\\areas.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\areas\\areas.vue","mtime":1712682815505},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\babel.config.js","mtime":1712682813877},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\.babelrc","mtime":1712682813750},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport axios from 'axios';\nimport vSelect from 'vue-select';\nimport LibroRepository from \"../../repositories/LibroRepository\";\nexport default {\n  data: function data() {\n    return {\n      areas: [],\n      tipos: [],\n      activeConfirm: false,\n      popupEditArea: false,\n      update: false,\n      id: 0,\n      idarea: 0,\n      popupAddTema: false,\n      area: {\n        nombrearea: '',\n        tipo: ''\n      },\n      estado: '',\n      permisoRoot: false,\n      usuario: []\n    };\n  },\n  components: {\n    'v-select': vSelect\n  },\n  methods: {\n    obtenerAreas: function obtenerAreas() {\n      var _this = this;\n      //para obtener el listado de las areas\n      LibroRepository.getAreas().then(function (r) {\n        _this.areas = r.data.area;\n      });\n      //para obtener el listado de los tipos \n      LibroRepository.getAreas().then(function (r) {\n        _this.tipos = r.data.tipoArea;\n      });\n    },\n    //para obtener el listado de los usuarios root\n    getUserRoot: function getUserRoot() {\n      var me = this;\n      this.$http.get(this.$server_url + 'permisos?permiso=yes&usuario_id=' + me.usuario.idusuario).then(function (res) {\n        if (res.data.status == '1') {\n          me.permisoRoot = true;\n        } else {\n          me.permisoRoot = false;\n        }\n      }).catch(function (error) {\n        console.log(error + ' error');\n      });\n    },\n    //para eliminar la area\n    eliminarArea: function eliminarArea(idarea) {\n      var me = this;\n      var formData = new FormData();\n      formData.append('idarea', me.idarea);\n      formData.append('estado', me.estado);\n      me.$vs.loading();\n      this.$http.post(this.$server_url + 'area-eliminar', formData).then(function (res) {\n        me.obtenerAreas();\n        me.$vs.loading.close();\n        me.$vs.notify({\n          text: 'Area eliminado con exito',\n          color: 'success',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n      });\n    },\n    //para abrir el popup de confimacion para eliminar\n    openConfirm: function openConfirm(idarea, estado) {\n      this.idarea = idarea;\n      this.estado = estado;\n      this.$vs.dialog({\n        type: 'confirm',\n        color: 'danger',\n        title: \"Confirmacion\",\n        text: 'Estas seguro de cambiar de estado.',\n        accept: this.eliminarArea\n      });\n    },\n    //para guardar las areas\n    guardarArea: function guardarArea() {\n      var me = this;\n      //datos que se obtienen de los inputs\n      if (me.area.nombrearea.trim() === '') {\n        this.$vs.notify({\n          text: 'Debe completar todos los campos antes de guardar',\n          color: 'warning',\n          iconPack: 'feather',\n          icon: 'icon-check'\n        });\n        return;\n      }\n      var formData = new FormData();\n      if (me.update) {\n        formData.append('idarea', me.id);\n        formData.append('nombrearea', me.area.nombrearea);\n        formData.append('idtipoarea', me.area.tipo.idtipoarea);\n      } else {\n        formData.append('nombrearea', me.area.nombrearea);\n        formData.append('idtipoarea', me.area.tipo.idtipoarea);\n      }\n      this.$http.post(this.$server_url + 'areas', formData).then(function (res) {\n        me.$vs.notify({\n          text: res.data,\n          color: 'primary',\n          iconPack: 'feather',\n          icon: 'icon-alert-triangle'\n        });\n        me.obtenerAreas();\n        me.popupAddTema = false, me.popupEditArea = false, me.update = false;\n        limpiar();\n      }).catch(function (error) {});\n    },\n    //para editar los campos\n    openModalEditar: function openModalEditar() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var me = this;\n      me.popupEditArea = true;\n      //llenar la data en los campos\n      me.id = data.idarea;\n      me.area.nombrearea = data.nombrearea;\n      me.area.tipo = {\n        idtipoarea: data.tipoareas_idtipoarea,\n        nombretipoarea: data.nombretipoarea\n      };\n    },\n    //para limpiar los campos\n    limpiar: function limpiar() {\n      var me = this;\n      me.area.nombrearea = \"\";\n      me.area.tipo = \"\";\n    }\n  },\n  mounted: function mounted() {\n    this.obtenerAreas();\n  },\n  created: function created() {\n    console.log(\"diseno2\");\n    this.usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n    this.getUserRoot();\n  }\n};",{"version":3,"names":["Vue","axios","vSelect","LibroRepository","data","areas","tipos","activeConfirm","popupEditArea","update","id","idarea","popupAddTema","area","nombrearea","tipo","estado","permisoRoot","usuario","components","methods","obtenerAreas","_this","getAreas","then","r","tipoArea","getUserRoot","me","$http","get","$server_url","idusuario","res","status","catch","error","console","log","eliminarArea","formData","FormData","append","$vs","loading","post","close","notify","text","color","iconPack","icon","openConfirm","dialog","type","title","accept","guardarArea","trim","idtipoarea","limpiar","openModalEditar","arguments","length","undefined","tipoareas_idtipoarea","nombretipoarea","mounted","created","JSON","parse","localStorage","getItem"],"sources":["src/views/areas/areas.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"con-tab-ejemplo\">\r\n            <div v-if=\"areas.length > 0 \">\r\n              <vs-button color=\"dark\" v-if=\"permisoRoot\" @click=\"limpiar();popupAddTema=true;\"   type=\"filled\">Crear Area</vs-button>\r\n                <vs-table max-items=\"10\" search pagination :data=\"areas\">\r\n                    <template slot=\"header\">\r\n                        <vs-chip  color=\"primary\">Cantidad: <b> {{ areas.length }}</b></vs-chip>\r\n                    </template>\r\n                    <template slot=\"thead\">\r\n                        <vs-th>Nombre</vs-th>\r\n                        <vs-th>Tipo de area</vs-th>\r\n                        <vs-th>Estado</vs-th>\r\n                        <vs-th  style=\"width:100px;\">Acciones</vs-th>\r\n                    </template>\r\n                    <template slot-scope=\"{data}\">\r\n                        <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                            <vs-td>\r\n                                {{data[indextr].nombrearea}}<br>\r\n                                \r\n                            </vs-td>\r\n                            <vs-td>\r\n                                {{data[indextr].nombretipoarea}}<br>\r\n                            </vs-td>\r\n                            <vs-td>\r\n                                <vs-chip v-if=\"tr.estado == 1\" color=\"success\">Activo</vs-chip>\r\n                                <vs-chip v-else color=\"danger\">Inactivo</vs-chip>\r\n                            </vs-td>\r\n                            <vs-td>\r\n                                <div style=\"display: flex;\">\r\n                                    <div>\r\n                                        <vx-tooltip style=\"display: inline-block;\" text=\"Editar area\" position=\"top\" color=\"primary\">\r\n                                            <vs-button class=\"modal-default-button\" size=\"small\" color=\"success\" @click=\"update=true;openModalEditar(data[indextr])\" type=\"filled\" icon-pack=\"feather\" icon=\"icon-edit\"> </vs-button>\r\n                                        </vx-tooltip> &nbsp;\r\n                                    </div>\r\n                                    <div>\r\n                                        <vx-tooltip v-if=\"tr.estado == 1\" style=\"display: inline-block;\" text=\"Desactivar area\" position=\"top\" color=\"primary\">\r\n                                            <vs-button class=\"modal-default-button\" size=\"small\" color=\"danger\" @click=\"openConfirm(data[indextr].idarea,0)\" type=\"filled\" icon-pack=\"feather\" icon=\"icon-x-square\"> </vs-button>\r\n                                        </vx-tooltip> &nbsp;\r\n                                        <vx-tooltip v-if=\"tr.estado == 0\" style=\"display: inline-block;\" text=\"activar area\" position=\"top\" color=\"primary\">\r\n                                            <vs-button class=\"modal-default-button\" size=\"small\" color=\"primary\" @click=\"openConfirm(data[indextr].idarea,1)\" type=\"filled\" icon-pack=\"feather\" icon=\"icon-check\"> </vs-button>\r\n                                        </vx-tooltip> &nbsp;\r\n                                    </div>\r\n                                </div>\r\n                            </vs-td> \r\n                        </vs-tr>\r\n                    </template>\r\n                </vs-table>   \r\n            </div>\r\n            <div v-else class=\"p-3\">\r\n                <p> No existe areas aun. </p>\r\n            </div>\r\n        </div>\r\n        <!--PARA LOS MODALES -->\r\n          <!-- Modal Agregar-->\r\n        <div class=\"demo-alignment\">\r\n            <vs-popup classContent=\"popup-example\" title=\"Agregar Area\" :active.sync=\"popupAddTema\">\r\n                <vs-input class=\"inputx mb-3 w-full\" label=\"Nombre Area\" v-model=\"area.nombrearea\" />\r\n                Tipo Area:\r\n                <v-select :options=\"tipos\" :reduce=\"tipos => tipos\" label=\"nombretipoarea\" class=\"w-full\" v-model=\"area.tipo\" />\r\n                 <br><br>       \r\n                <vs-button color=\"success\" class=\"w-full mb-3\" @click=\"guardarArea()\" type=\"gradient\" >Guardar</vs-button>\r\n            </vs-popup>\r\n        </div>\r\n        <!-- Modal Editar-->\r\n        <div class=\"demo-alignment\">\r\n            <vs-popup classContent=\"popup-example\" title=\"Editar Area\" :active.sync=\"popupEditArea\">\r\n                <vs-input class=\"inputx mb-3 w-full\" label=\"Nombre Area\" v-model=\"area.nombrearea\" />\r\n                Tipo Area:\r\n                <v-select :options=\"tipos\" :reduce=\"tipos => tipos\" label=\"nombretipoarea\" class=\"w-full\" v-model=\"area.tipo\" />\r\n                 <br><br>       \r\n                <vs-button color=\"success\" class=\"w-full mb-3\" @click=\"guardarArea()\" type=\"gradient\" >Actualizar</vs-button>\r\n            </vs-popup>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport Vue from 'vue'\r\nimport axios from 'axios'\r\nimport vSelect from 'vue-select'\r\nimport LibroRepository from '../../repositories/LibroRepository';\r\nexport default {\r\n    data() {\r\n        return{\r\n            areas:[],\r\n            tipos:[],\r\n            activeConfirm:false,\r\n            popupEditArea:false,\r\n            update:false,\r\n            id:0,\r\n            idarea:0,\r\n            popupAddTema:false,\r\n            area:{\r\n                nombrearea:'',\r\n                tipo:''\r\n            },\r\n            estado:'',\r\n            permisoRoot:false,\r\n            usuario:[],\r\n        }\r\n    },\r\n    components: {\r\n       'v-select': vSelect,\r\n                \r\n    },\r\n    methods:{\r\n        obtenerAreas(){ \r\n             //para obtener el listado de las areas\r\n            LibroRepository.getAreas().then(r => { this.areas = r.data.area });\r\n             //para obtener el listado de los tipos \r\n            LibroRepository.getAreas().then(r => { this.tipos = r.data.tipoArea }); \r\n        },\r\n         //para obtener el listado de los usuarios root\r\n         getUserRoot() {\r\n            let me = this;\r\n            this.$http.get(this.$server_url+'permisos?permiso=yes&usuario_id='+me.usuario.idusuario)\r\n                .then(function (res) {\r\n                    if(res.data.status == '1'){\r\n                        me.permisoRoot = true\r\n                    }else{\r\n                        me.permisoRoot = false\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error + ' error');\r\n                })\r\n        },\r\n        //para eliminar la area\r\n         eliminarArea(idarea) {\r\n            let me = this;\r\n            let formData = new FormData();\r\n            formData.append('idarea',me.idarea);\r\n            formData.append('estado',me.estado);\r\n            me.$vs.loading()\r\n            this.$http.post(this.$server_url+'area-eliminar', formData)\r\n            .then(res => {\r\n            me.obtenerAreas();\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({\r\n                text:'Area eliminado con exito',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n            })\r\n        },\r\n        //para abrir el popup de confimacion para eliminar\r\n        openConfirm(idarea,estado){\r\n        this.idarea = idarea;\r\n        this.estado = estado\r\n        this.$vs.dialog({\r\n            type:'confirm',\r\n            color: 'danger',\r\n            title: `Confirmacion`,\r\n            text: 'Estas seguro de cambiar de estado.',\r\n            accept:this.eliminarArea\r\n        })\r\n        },\r\n        //para guardar las areas\r\n         guardarArea(){\r\n            let me = this;\r\n             //datos que se obtienen de los inputs\r\n                if(me.area.nombrearea.trim() === ''){\r\n                    this.$vs.notify({\r\n                        text:'Debe completar todos los campos antes de guardar',\r\n                        color:'warning',\r\n                        iconPack: 'feather',\r\n                        icon:'icon-check'})\r\n                    return;\r\n                }\r\n            let formData = new FormData();\r\n            if(me.update){\r\n                formData.append('idarea',     me.id);\r\n                formData.append('nombrearea', me.area.nombrearea);\r\n                formData.append('idtipoarea', me.area.tipo.idtipoarea);\r\n            }else{\r\n                formData.append('nombrearea', me.area.nombrearea);\r\n                formData.append('idtipoarea', me.area.tipo.idtipoarea);\r\n            }\r\n            this.$http.post(this.$server_url+'areas', formData)\r\n                .then(function (res) {\r\n                    me.$vs.notify({\r\n                        text: res.data,\r\n                        color: 'primary',\r\n                        iconPack: 'feather',\r\n                        icon: 'icon-alert-triangle'\r\n                    })\r\n                    me.obtenerAreas()\r\n                    me.popupAddTema=false,\r\n                    me.popupEditArea=false,\r\n                    me.update = false;\r\n                    limpiar()\r\n                  \r\n                })\r\n                .catch(function (error) {})\r\n        },\r\n        //para editar los campos\r\n        openModalEditar(data={}){\r\n            let me = this;\r\n            me.popupEditArea = true;\r\n            //llenar la data en los campos\r\n            me.id = data.idarea;\r\n            me.area.nombrearea = data.nombrearea;\r\n            me.area.tipo = {idtipoarea:data.tipoareas_idtipoarea, nombretipoarea:data.nombretipoarea};\r\n        },\r\n        //para limpiar los campos\r\n        limpiar(){\r\n           let me = this;\r\n           me.area.nombrearea = \"\";\r\n           me.area.tipo = \"\";\r\n        },\r\n    },\r\n    mounted() {\r\n        this.obtenerAreas()\r\n    },\r\n    created(){\r\n        console.log(\"diseno2\")\r\n        this.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n        this.getUserRoot()\r\n    }\r\n}\r\n</script>"],"mappings":"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","ignoreList":[]}]}