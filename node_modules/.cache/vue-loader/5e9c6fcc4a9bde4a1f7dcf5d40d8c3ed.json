{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\pedidos\\components\\milton\\anticiposAnterios.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\pedidos\\components\\milton\\anticiposAnterios.vue","mtime":1712682816306},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\n  import {\r\n    mapState\r\n} from \"vuex\";\r\nimport vSelect from 'vue-select'\r\nexport default{\r\n  components:{\r\n    vSelect,\r\n  },\r\n    data(){\r\n        return{\r\n            arregloValores:[],\r\n            arregloFinal:[],\r\n            arregloConvertido:[],\r\n            arrayNormales:[],\r\n            popupAdd:false,\r\n            pago:{\r\n              doc_valor:0,\r\n              tipo_pago_id:'',\r\n              forma_pago_id:'',\r\n              doc_numero:'',\r\n              doc_observacion:''\r\n            },\r\n            pagoSelect:'',\r\n            arrayTiposPagos:[],\r\n            arrayFormasPagos:[],\r\n        }\r\n    },\r\n    props:{\r\n        arregloIdsCoincidencias:{\r\n            type:Array,\r\n            default:[]\r\n        },\r\n        anticipoAprobado:{\r\n            type:Number,\r\n            default:0,\r\n        },\r\n        tmpPedidos:{\r\n            type:Object,\r\n            default:{}\r\n        },\r\n    },\r\n    computed:{\r\n      ...mapState([\"auth\",'userRoot','susuario','ObjectPedido','userAsesor','groupFacturador']),\r\n    },\r\n    mounted(){\r\n        let me = this;\r\n        me.getAnticiposAnteriores()\r\n        me.sendPedido = me.ObjectPedido\r\n\r\n    },\r\n    methods:{\r\n      editar(){\r\n        let me = this\r\n        me.getTiposPagos()\r\n        me.getFormasPagos()\r\n        me.pago = me.pagoSelect\r\n        me.popupAdd = true;\r\n      },\r\n      getTiposPagos(){\r\n        let me  = this\r\n        var url = \"\"\r\n        url = this.$server_url + 'pedigo_Pagos?getTiposPagos=yes'\r\n        this.$http.get(url)\r\n          .then(res => {\r\n            me.arrayTiposPagos = res.data\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          })\r\n      },\r\n      getFormasPagos(){\r\n        let me  = this\r\n        var url = \"\"\r\n        url = this.$server_url + 'pedigo_Pagos?getFormasPago=yes'\r\n        this.$http.get(url)\r\n          .then(res => {\r\n            me.arrayFormasPagos = res.data\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          })\r\n      },\r\n      actualizar(){\r\n        let me = this\r\n        me.$vs.loading()\r\n        this.$http.post(this.$server_url+'editarDocumentoLiq', me.pago)\r\n        .then(res => {\r\n        me.getAnticiposAnteriores();\r\n        me.$vs.loading.close()\r\n        me.$vs.notify({\r\n            text:res.data.message,\r\n            color:'success',\r\n            iconPack: 'feather',\r\n            icon:'icon-check'})\r\n        })\r\n        me.popupAdd = false\r\n      },\r\n      async getAnticiposAnteriores(){\r\n        let me = this;\r\n        me.arregloConvertido = []\r\n        me.arregloFinal      = []\r\n        me.arrayNormales     = []\r\n        if(me.tmpPedidos.codigo_contrato == null || me.tmpPedidos.codigo_contrato == \"\" || me.tmpPedidos.codigo_contrato == undefined){\r\n          return\r\n        }\r\n        me.$vs.loading()\r\n        try {\r\n          let res = await this.$http.get(this.$server_url+'Get_Cliente_Institucionx3yearanterior?id_institucion='+me.tmpPedidos.id_institucion+'&ven_codigo='+me.tmpPedidos.codigo_contrato.substring(1));\r\n          me.$vs.loading.close()\r\n          if(res.data.status == 0){\r\n            me.$vs.notify({\r\n            text:res.data.message,\r\n            color:'danger',\r\n            iconPack: 'feather',\r\n            icon:'icon-check'})\r\n          }\r\n          me.arregloValores = res.data\r\n          if(me.arregloValores.length > 0){\r\n            let convertidos       = res.data.filter(p => p.ven_convertido != null)\r\n            let datosNormales     = res.data.filter(p => p.ven_convertido == null)\r\n            me.arrayNormales      = await me.renderValores(datosNormales,1)\r\n            me.arregloConvertido  = await me.renderValores(convertidos,0)\r\n            me.resolveFinal()\r\n          }\r\n        } catch (error) {\r\n          console.log(error + ' error');\r\n          me.$vs.loading.close()\r\n        }\r\n      },\r\n      async renderValores(tr,tipo){\r\n        let me = this;\r\n        var agruparPeriodos = []\r\n        var datosSeteados   = []\r\n        tr.forEach(element => {\r\n            var cal     = new Object();\r\n            cal.periodo = element.periodo\r\n            agruparPeriodos.push(cal)\r\n        });\r\n        //QUITAR ARRAYS DUPLICADOS\r\n        let hash = {};\r\n        let resultado = agruparPeriodos.filter(o => hash[o.periodo] ? false : hash[o.periodo] = true);\r\n        datosSeteados  = resultado\r\n        //ingresar valores en el periodo\r\n        datosSeteados.map(p => {\r\n            p[\"valores\"]    = tr.filter(s => s.periodo == p.periodo)\r\n            return p\r\n        });\r\n        let ArregloOrdenar = []\r\n        //separar los anticipos y liquidacion\r\n        datosSeteados.forEach(element => {\r\n          var cal = new Object();\r\n          cal.periodo              = element.periodo\r\n          cal.contrato             = element.valores[0].ven_codigo\r\n          cal.ven_valor            = element.valores[0].venValor\r\n          cal.ven_descuento        = element.valores[0].venDescuento\r\n          cal.ven_convertido       = element.valores[0].ven_convertido\r\n          //doc_ci  1 son tipo anticipos y doc_ci 6 son deudas anteriores\r\n          cal.anticipos            = element.valores.filter(p => p.doc_ci == \"ANT\" || p.doc_ci == \"1\" || p.doc_ci == \"6\")\r\n          cal.liquidados           = element.valores.filter(p => p.doc_ci == \"LIQ\" || p.doc_ci == \"2\")\r\n          cal.deudas               = element.valores.filter(p => p.doc_ci == \"3\")\r\n          cal.convenios            = element.valores.filter(p => p.doc_ci == \"4\")\r\n          cal.periodo_id           = element.valores[0].periodo_id\r\n          ArregloOrdenar.push(cal)\r\n        });\r\n        let mostrarValores=[]\r\n        ArregloOrdenar.forEach(element => {\r\n            var cal = new Object();\r\n            cal.periodo         = element.periodo\r\n            cal.contrato        = element.contrato\r\n            cal.ven_valor       = element.ven_valor\r\n            cal.ven_descuento   = element.ven_descuento\r\n            cal.ven_convertido  = element.ven_convertido\r\n            cal.periodo_id      = element.periodo_id\r\n            let array           = element.anticipos\r\n            let array2          = element.liquidados\r\n            let array3          = element.deudas\r\n            let array4          = element.convenios\r\n            cal.anticipo        = array.reduce((a, b) => parseFloat(a) + parseFloat((b[\"doc_valor\"] || 0)), 0);\r\n            cal.liquidacion     = array2.reduce((a, b) => parseFloat(a) + parseFloat((b[\"doc_valor\"] || 0)), 0);\r\n            cal.deudas          = array3.reduce((a, b) => parseFloat(a) + parseFloat((b[\"doc_valor\"] || 0)), 0);\r\n            cal.convenios       = array4.reduce((a, b) => parseFloat(a) + parseFloat((b[\"doc_valor\"] || 0)), 0);\r\n            mostrarValores.push(cal)\r\n        });\r\n        //ORDENAR LOS PERIODOS\r\n        mostrarValores  = mostrarValores.sort((a, b) => {\r\n        if (a.periodo < b.periodo) {\r\n            return 1;\r\n        }\r\n        if (a.periodo > b.periodo) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n        });\r\n        return mostrarValores\r\n\r\n      },\r\n      resolveFinal(){\r\n        let me = this\r\n        me.arrayNormales.forEach(element => {\r\n          var cal = new Object();\r\n          var anticipoConvertido  = 0\r\n          var liquidadoConvertido = 0\r\n          var descuentoConvertido = 0\r\n          var venValorConvertido  = 0\r\n          var ContratosConvertido = []\r\n          //recorrer los contratos\r\n          if(me.arregloConvertido.length > 0){\r\n            me.arregloConvertido.forEach(p => {\r\n              if(p.ven_convertido == element.contrato){\r\n                anticipoConvertido  = anticipoConvertido + p.anticipo\r\n                liquidadoConvertido = liquidadoConvertido + p.liquidacion\r\n                descuentoConvertido = descuentoConvertido + p.ven_descuento\r\n                venValorConvertido  = venValorConvertido + p.ven_valor\r\n                ContratosConvertido.push(p)\r\n              }\r\n            })\r\n          }\r\n          //PROCESO\r\n          cal.periodo             = element.periodo\r\n          cal.contrato            = element.contrato\r\n          cal.ven_valor           = element.ven_valor + venValorConvertido\r\n          cal.ven_descuento       = element.ven_descuento + descuentoConvertido\r\n          cal.ven_convertido      = element.ven_convertido\r\n          cal.anticipo            = element.anticipo + anticipoConvertido\r\n          cal.liquidacion         = element.liquidacion + liquidadoConvertido\r\n          cal.deudas              = element.deudas\r\n          cal.convenios           = element.convenios\r\n          cal.ContratosConvertido = ContratosConvertido\r\n          cal.periodo_id          = element.periodo_id\r\n          //datos del primer contrato\r\n          cal.anticipoContrato    = element.anticipo\r\n          cal.liquidacionContrato = element.liquidacion\r\n          cal.descuentoContrato   = element.ven_descuento\r\n          cal.venValorContrato    = element.ven_valor\r\n          me.arregloFinal.push(cal)\r\n        })\r\n        //ORDENAR ARRAY DETALLE\r\n        me.arregloValores = me.arregloValores.sort((a, b) => {\r\n          if (a.periodo < b.periodo) {\r\n              return 1;\r\n          }\r\n          if (a.periodo > b.periodo) {\r\n              return -1;\r\n          }\r\n          return 0;\r\n        });\r\n        //====DEUDA====\r\n        //si existe deuda mandar a guardar la deuda y asignar como anticipo aprobado\r\n        var deuda = me.arregloFinal[0]\r\n        var getDeuda = 0\r\n        if(deuda.periodo_id > 21){\r\n          getDeuda = parseFloat(deuda.deudas)\r\n        }else{\r\n          getDeuda = parseFloat(deuda.liquidacion)\r\n        }\r\n        if(getDeuda < 0){\r\n            //si  ya existe un valor en el anticipo aprobado no actualizo\r\n            if(me.sendPedido.ifagregado_anticipo_aprobado == 0){\r\n                let datos = {\r\n                    setDeuda :getDeuda,\r\n                    periodo  :deuda.periodo\r\n                }\r\n                me.$emit('sendDeuda',datos)\r\n            }\r\n        }\r\n      },\r\n    }\r\n\r\n}\r\n",{"version":3,"sources":["anticiposAnterios.vue"],"names":[],"mappingsfile":"anticiposAnterios.vue","sourceRoot":"src/views/pedidos/components/milton","sourcesContent":["<template>\r\n    <div>\r\n      <div class=\"vx-row\">\r\n        <!--ANTICIPOS ANTERIORES AGRUPADO-->\r\n        <div class=\"vx-col w-full sm:w-full md:w-1/2 lg:w-1/2 xl:w-1/2 mb-6\">\r\n          <vs-divider>Anticipos anteriores</vs-divider>\r\n          <div slot=\"header\">\r\n              <b>VER ANTICIPOS ANTERIORES</b>\r\n          </div>\r\n          <ul class=\"mb-1\" v-if=\"arregloFinal.length > 0\">\r\n            <li v-for=\"(item,key) in arregloFinal\" :key=\"key\" >\r\n              <span>\r\n                  <span class=\"inline-block h-3 w-3 rounded-full mr-2 bg-warning\"></span>\r\n                  <span class=\"font-semibold\">\r\n                      {{ item.periodo }}\r\n                  </span><br>\r\n                  <p>Total Venta bruta: <b>{{ item.ven_valor }}</b></p>\r\n                  <p>Total Comisión   <b>{{ item.ven_descuento }} % </b></p>\r\n                  <!-- <p>{{ item.ven_descuento }} % venta bruta: <b>{{ item.valorComision.toFixed(2) }}</b></p>  -->\r\n                  <p>Total Anticipo: <b>{{ (item.anticipo) | filtrarDecimal }}</b></p>\r\n                  <p>Total Liquidación:\r\n                      <b v-if=\"(item.liquidacion ) < 0\" class=\"text-danger\">{{ (item.liquidacion) | filtrarDecimal }}</b>\r\n                      <b v-else>{{ (item.liquidacion ) | filtrarDecimal  }}</b>\r\n                  </p>\r\n                  <!--NUEVOS TIPOS-->\r\n                  <div v-if=\"item.periodo_id > 21\">\r\n                    <p><b>Deuda: </b>\r\n                      <span v-if=\"item.deudas == 0\">{{ item.deudas }}</span>\r\n                      <span v-else class=\"text-danger font-bold\">{{ item.deudas }}</span>\r\n                    </p>\r\n                    <p>Total Convenios: <b>{{ (item.convenios) | filtrarDecimal }}</b></p>\r\n                  </div>\r\n                  <div class=\"mt-2\" v-if=\"item.ContratosConvertido.length > 0\">\r\n                    <p class=\"text-success font-bold\">Datos del contrato:</p>\r\n                    <ul>\r\n                      <li><b>Contrato: </b>{{ item.contrato }}</li>\r\n                      <li><b>Venta bruta: </b>{{ item.venValorContrato }}</li>\r\n                      <li><b>Comisión: </b>{{ item.descuentoContrato }} %</li>\r\n                      <li><b>Anticipo: </b>{{ item.anticipoContrato }}</li>\r\n                      <li><b>Liquidación: </b>{{ item.liquidacionContrato }}</li>\r\n                      <div v-if=\"item.periodo_id > 21\">\r\n                        <li><b>Deuda: </b>\r\n                          <span v-if=\"item.deudas == 0\">{{ item.deudas }}</span>\r\n                          <span v-else class=\"text-danger font-bold\">{{ item.deudas }}</span>\r\n                        </li>\r\n                        <li v-if=\"item.convenios > 0\"><b>Convenios: </b>{{ item.convenios }}</li>\r\n                      </div>\r\n                    </ul>\r\n                  </div>\r\n                  <div v-if=\"item.ContratosConvertido.length > 0\" class=\"mt-2\">\r\n                    <p class=\"text-warning font-bold\">Contratos Relacionados</p>\r\n                    <ul v-for=\"(tr,key2) in item.ContratosConvertido\" :key=\"key2\">\r\n                      <li><b>Contrato: </b>{{ tr.contrato }}</li>\r\n                      <li><b>Venta bruta: </b>{{ tr.ven_valor }}</li>\r\n                      <li><b>Comisión: </b>{{ tr.ven_descuento }} %</li>\r\n                      <li><b>Anticipo: </b>{{ tr.anticipo }} </li>\r\n                      <li><b>Liquidación: </b>{{ tr.liquidacion }}</li>\r\n                    </ul>\r\n                  </div>\r\n              </span>\r\n              <vs-divider></vs-divider>\r\n            </li>\r\n          </ul>\r\n          <div v-else>\r\n            <vs-alert title=\"Mensaje\" color=\"rgb(231, 154, 23)\" active=\"true\">\r\n                No existe valores anteriores\r\n            </vs-alert>\r\n          </div>\r\n        </div>\r\n        <!--DETALLE-->\r\n        <div class=\"vx-col w-full sm:w-full md:w-1/2 lg:w-1/2 xl:w-1/2 mb-6\">\r\n          <vs-divider>Detalle anticipos</vs-divider>\r\n          <vs-table max-items=\"5\" stripe search pagination :data=\"arregloValores\">\r\n            <template slot=\"header\">\r\n                <vs-chip  color=\"primary\">Cantidad: <b> {{ arregloValores.length }}</b></vs-chip>\r\n            </template>\r\n            <template slot=\"thead\">\r\n                <vs-th>Contrato</vs-th>\r\n                <vs-th>Datos</vs-th>\r\n                <vs-th>Observacion</vs-th>\r\n                <vs-th v-if=\"groupFacturador\">Acciones</vs-th>\r\n            </template>\r\n            <template slot-scope=\"{data}\">\r\n                <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                    <vs-td>\r\n                      <b>Contrato:</b>\r\n                      <p>{{tr.ven_codigo}}</p>\r\n                      <b>Venta bruta:</b>\r\n                      <p>{{tr.venValor}}</p>\r\n                      <b>Comisión:</b>\r\n                      <p>{{tr.venDescuento}}</p>\r\n                      <div v-if=\"tr.ven_convertido != null\">\r\n                        <b class=\"text-danger\">Contrato relacionado a:</b>\r\n                        <p>{{tr.ven_convertido}}</p>\r\n                      </div>\r\n                    </vs-td>\r\n                    <vs-td>\r\n                      <b>Valor</b>\r\n                      <p>{{tr.doc_valor}}</p>\r\n                      <b>Tipo pago</b>\r\n                      <p>{{tr.tipo_pago_nombre}}</p>\r\n                      <b>Forma de pago</b>\r\n                      <p>{{tr.forma_pago_nombre}}</p>\r\n                      <b>doc numero</b>\r\n                      <p>{{tr.doc_numero}}</p>\r\n                      <b>doc fecha</b>\r\n                      <p>{{tr.doc_fecha}}</p>\r\n                    </vs-td>\r\n                    <vs-td>\r\n                        {{ tr.doc_observacion }}\r\n                    </vs-td>\r\n                    <vs-td v-if=\"groupFacturador\">\r\n                      <vs-button color=\"warning\" class=\"p-2\" @click=\"pagoSelect =tr;editar();\" type=\"filled\" icon-pack=\"feather\" icon=\"icon-edit\">Editar</vs-button>\r\n                    </vs-td>\r\n                </vs-tr>\r\n            </template>\r\n        </vs-table>\r\n        </div>\r\n      </div>\r\n      <!--MODALES-->\r\n      <vs-popup classContent=\"popup-example\" title=\"Editar\" :active.sync=\"popupAdd\">\r\n        <div v-if=\"popupAdd\">\r\n          <div class=\"vx-row mb-6\">\r\n            <div class=\"vx-col sm:w-1/3 w-full\">\r\n              <span>Valor</span>\r\n            </div>\r\n            <div class=\"vx-col sm:w-2/3 w-full\">\r\n              <vs-input class=\"w-full\" icon-pack=\"feather\" icon=\"icon-user\" icon-no-border v-model=\"pago.doc_valor\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"vx-row mb-6\">\r\n            <div class=\"vx-col sm:w-1/3 w-full\">\r\n              <span>Tipo Pago</span>\r\n            </div>\r\n            <div class=\"vx-col sm:w-2/3 w-full\">\r\n              <v-select :options=\"arrayTiposPagos\"  :reduce=\"arrayTiposPagos => arrayTiposPagos.id\" label=\"nombre\" class=\"w-full\" v-model=\"pago.tipo_pago_id\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"vx-row mb-6\">\r\n            <div class=\"vx-col sm:w-1/3 w-full\">\r\n              <span>Forma de Pago</span>\r\n            </div>\r\n            <div class=\"vx-col sm:w-2/3 w-full\">\r\n              <v-select :options=\"arrayFormasPagos\"  :reduce=\"arrayFormasPagos => arrayFormasPagos.tip_pag_codigo\" label=\"tip_pag_nombre\" class=\"w-full\" v-model=\"pago.forma_pago_id\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"vx-row mb-6\">\r\n            <div class=\"vx-col sm:w-1/3 w-full\">\r\n              <span>doc_numero</span>\r\n            </div>\r\n            <div class=\"vx-col sm:w-2/3 w-full\">\r\n              <vs-input class=\"w-full\" icon-pack=\"feather\" icon=\"icon-smartphone\" icon-no-border v-model=\"pago.doc_numero\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"vx-row mb-6\">\r\n            <div class=\"vx-col sm:w-1/3 w-full\">\r\n              <span>Observación</span>\r\n            </div>\r\n            <div class=\"vx-col sm:w-2/3 w-full\">\r\n              <vs-input type=\"text\" class=\"w-full\" icon-pack=\"feather\" icon=\"icon-lock\" icon-no-border v-model=\"pago.doc_observacion\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col sm:w-2/3 w-full ml-auto\">\r\n              <vs-button class=\"mr-3 mb-2\" @click=\"actualizar();\">Guardar</vs-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </vs-popup>\r\n    </div>\r\n</template>\r\n<script>\r\n  import {\r\n    mapState\r\n} from \"vuex\";\r\nimport vSelect from 'vue-select'\r\nexport default{\r\n  components:{\r\n    vSelect,\r\n  },\r\n    data(){\r\n        return{\r\n            arregloValores:[],\r\n            arregloFinal:[],\r\n            arregloConvertido:[],\r\n            arrayNormales:[],\r\n            popupAdd:false,\r\n            pago:{\r\n              doc_valor:0,\r\n              tipo_pago_id:'',\r\n              forma_pago_id:'',\r\n              doc_numero:'',\r\n              doc_observacion:''\r\n            },\r\n            pagoSelect:'',\r\n            arrayTiposPagos:[],\r\n            arrayFormasPagos:[],\r\n        }\r\n    },\r\n    props:{\r\n        arregloIdsCoincidencias:{\r\n            type:Array,\r\n            default:[]\r\n        },\r\n        anticipoAprobado:{\r\n            type:Number,\r\n            default:0,\r\n        },\r\n        tmpPedidos:{\r\n            type:Object,\r\n            default:{}\r\n        },\r\n    },\r\n    computed:{\r\n      ...mapState([\"auth\",'userRoot','susuario','ObjectPedido','userAsesor','groupFacturador']),\r\n    },\r\n    mounted(){\r\n        let me = this;\r\n        me.getAnticiposAnteriores()\r\n        me.sendPedido = me.ObjectPedido\r\n\r\n    },\r\n    methods:{\r\n      editar(){\r\n        let me = this\r\n        me.getTiposPagos()\r\n        me.getFormasPagos()\r\n        me.pago = me.pagoSelect\r\n        me.popupAdd = true;\r\n      },\r\n      getTiposPagos(){\r\n        let me  = this\r\n        var url = \"\"\r\n        url = this.$server_url + 'pedigo_Pagos?getTiposPagos=yes'\r\n        this.$http.get(url)\r\n          .then(res => {\r\n            me.arrayTiposPagos = res.data\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          })\r\n      },\r\n      getFormasPagos(){\r\n        let me  = this\r\n        var url = \"\"\r\n        url = this.$server_url + 'pedigo_Pagos?getFormasPago=yes'\r\n        this.$http.get(url)\r\n          .then(res => {\r\n            me.arrayFormasPagos = res.data\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          })\r\n      },\r\n      actualizar(){\r\n        let me = this\r\n        me.$vs.loading()\r\n        this.$http.post(this.$server_url+'editarDocumentoLiq', me.pago)\r\n        .then(res => {\r\n        me.getAnticiposAnteriores();\r\n        me.$vs.loading.close()\r\n        me.$vs.notify({\r\n            text:res.data.message,\r\n            color:'success',\r\n            iconPack: 'feather',\r\n            icon:'icon-check'})\r\n        })\r\n        me.popupAdd = false\r\n      },\r\n      async getAnticiposAnteriores(){\r\n        let me = this;\r\n        me.arregloConvertido = []\r\n        me.arregloFinal      = []\r\n        me.arrayNormales     = []\r\n        if(me.tmpPedidos.codigo_contrato == null || me.tmpPedidos.codigo_contrato == \"\" || me.tmpPedidos.codigo_contrato == undefined){\r\n          return\r\n        }\r\n        me.$vs.loading()\r\n        try {\r\n          let res = await this.$http.get(this.$server_url+'Get_Cliente_Institucionx3yearanterior?id_institucion='+me.tmpPedidos.id_institucion+'&ven_codigo='+me.tmpPedidos.codigo_contrato.substring(1));\r\n          me.$vs.loading.close()\r\n          if(res.data.status == 0){\r\n            me.$vs.notify({\r\n            text:res.data.message,\r\n            color:'danger',\r\n            iconPack: 'feather',\r\n            icon:'icon-check'})\r\n          }\r\n          me.arregloValores = res.data\r\n          if(me.arregloValores.length > 0){\r\n            let convertidos       = res.data.filter(p => p.ven_convertido != null)\r\n            let datosNormales     = res.data.filter(p => p.ven_convertido == null)\r\n            me.arrayNormales      = await me.renderValores(datosNormales,1)\r\n            me.arregloConvertido  = await me.renderValores(convertidos,0)\r\n            me.resolveFinal()\r\n          }\r\n        } catch (error) {\r\n          console.log(error + ' error');\r\n          me.$vs.loading.close()\r\n        }\r\n      },\r\n      async renderValores(tr,tipo){\r\n        let me = this;\r\n        var agruparPeriodos = []\r\n        var datosSeteados   = []\r\n        tr.forEach(element => {\r\n            var cal     = new Object();\r\n            cal.periodo = element.periodo\r\n            agruparPeriodos.push(cal)\r\n        });\r\n        //QUITAR ARRAYS DUPLICADOS\r\n        let hash = {};\r\n        let resultado = agruparPeriodos.filter(o => hash[o.periodo] ? false : hash[o.periodo] = true);\r\n        datosSeteados  = resultado\r\n        //ingresar valores en el periodo\r\n        datosSeteados.map(p => {\r\n            p[\"valores\"]    = tr.filter(s => s.periodo == p.periodo)\r\n            return p\r\n        });\r\n        let ArregloOrdenar = []\r\n        //separar los anticipos y liquidacion\r\n        datosSeteados.forEach(element => {\r\n          var cal = new Object();\r\n          cal.periodo              = element.periodo\r\n          cal.contrato             = element.valores[0].ven_codigo\r\n          cal.ven_valor            = element.valores[0].venValor\r\n          cal.ven_descuento        = element.valores[0].venDescuento\r\n          cal.ven_convertido       = element.valores[0].ven_convertido\r\n          //doc_ci  1 son tipo anticipos y doc_ci 6 son deudas anteriores\r\n          cal.anticipos            = element.valores.filter(p => p.doc_ci == \"ANT\" || p.doc_ci == \"1\" || p.doc_ci == \"6\")\r\n          cal.liquidados           = element.valores.filter(p => p.doc_ci == \"LIQ\" || p.doc_ci == \"2\")\r\n          cal.deudas               = element.valores.filter(p => p.doc_ci == \"3\")\r\n          cal.convenios            = element.valores.filter(p => p.doc_ci == \"4\")\r\n          cal.periodo_id           = element.valores[0].periodo_id\r\n          ArregloOrdenar.push(cal)\r\n        });\r\n        let mostrarValores=[]\r\n        ArregloOrdenar.forEach(element => {\r\n            var cal = new Object();\r\n            cal.periodo         = element.periodo\r\n            cal.contrato        = element.contrato\r\n            cal.ven_valor       = element.ven_valor\r\n            cal.ven_descuento   = element.ven_descuento\r\n            cal.ven_convertido  = element.ven_convertido\r\n            cal.periodo_id      = element.periodo_id\r\n            let array           = element.anticipos\r\n            let array2          = element.liquidados\r\n            let array3          = element.deudas\r\n            let array4          = element.convenios\r\n            cal.anticipo        = array.reduce((a, b) => parseFloat(a) + parseFloat((b[\"doc_valor\"] || 0)), 0);\r\n            cal.liquidacion     = array2.reduce((a, b) => parseFloat(a) + parseFloat((b[\"doc_valor\"] || 0)), 0);\r\n            cal.deudas          = array3.reduce((a, b) => parseFloat(a) + parseFloat((b[\"doc_valor\"] || 0)), 0);\r\n            cal.convenios       = array4.reduce((a, b) => parseFloat(a) + parseFloat((b[\"doc_valor\"] || 0)), 0);\r\n            mostrarValores.push(cal)\r\n        });\r\n        //ORDENAR LOS PERIODOS\r\n        mostrarValores  = mostrarValores.sort((a, b) => {\r\n        if (a.periodo < b.periodo) {\r\n            return 1;\r\n        }\r\n        if (a.periodo > b.periodo) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n        });\r\n        return mostrarValores\r\n\r\n      },\r\n      resolveFinal(){\r\n        let me = this\r\n        me.arrayNormales.forEach(element => {\r\n          var cal = new Object();\r\n          var anticipoConvertido  = 0\r\n          var liquidadoConvertido = 0\r\n          var descuentoConvertido = 0\r\n          var venValorConvertido  = 0\r\n          var ContratosConvertido = []\r\n          //recorrer los contratos\r\n          if(me.arregloConvertido.length > 0){\r\n            me.arregloConvertido.forEach(p => {\r\n              if(p.ven_convertido == element.contrato){\r\n                anticipoConvertido  = anticipoConvertido + p.anticipo\r\n                liquidadoConvertido = liquidadoConvertido + p.liquidacion\r\n                descuentoConvertido = descuentoConvertido + p.ven_descuento\r\n                venValorConvertido  = venValorConvertido + p.ven_valor\r\n                ContratosConvertido.push(p)\r\n              }\r\n            })\r\n          }\r\n          //PROCESO\r\n          cal.periodo             = element.periodo\r\n          cal.contrato            = element.contrato\r\n          cal.ven_valor           = element.ven_valor + venValorConvertido\r\n          cal.ven_descuento       = element.ven_descuento + descuentoConvertido\r\n          cal.ven_convertido      = element.ven_convertido\r\n          cal.anticipo            = element.anticipo + anticipoConvertido\r\n          cal.liquidacion         = element.liquidacion + liquidadoConvertido\r\n          cal.deudas              = element.deudas\r\n          cal.convenios           = element.convenios\r\n          cal.ContratosConvertido = ContratosConvertido\r\n          cal.periodo_id          = element.periodo_id\r\n          //datos del primer contrato\r\n          cal.anticipoContrato    = element.anticipo\r\n          cal.liquidacionContrato = element.liquidacion\r\n          cal.descuentoContrato   = element.ven_descuento\r\n          cal.venValorContrato    = element.ven_valor\r\n          me.arregloFinal.push(cal)\r\n        })\r\n        //ORDENAR ARRAY DETALLE\r\n        me.arregloValores = me.arregloValores.sort((a, b) => {\r\n          if (a.periodo < b.periodo) {\r\n              return 1;\r\n          }\r\n          if (a.periodo > b.periodo) {\r\n              return -1;\r\n          }\r\n          return 0;\r\n        });\r\n        //====DEUDA====\r\n        //si existe deuda mandar a guardar la deuda y asignar como anticipo aprobado\r\n        var deuda = me.arregloFinal[0]\r\n        var getDeuda = 0\r\n        if(deuda.periodo_id > 21){\r\n          getDeuda = parseFloat(deuda.deudas)\r\n        }else{\r\n          getDeuda = parseFloat(deuda.liquidacion)\r\n        }\r\n        if(getDeuda < 0){\r\n            //si  ya existe un valor en el anticipo aprobado no actualizo\r\n            if(me.sendPedido.ifagregado_anticipo_aprobado == 0){\r\n                let datos = {\r\n                    setDeuda :getDeuda,\r\n                    periodo  :deuda.periodo\r\n                }\r\n                me.$emit('sendDeuda',datos)\r\n            }\r\n        }\r\n      },\r\n    }\r\n\r\n}\r\n</script>\r\n"]}]}