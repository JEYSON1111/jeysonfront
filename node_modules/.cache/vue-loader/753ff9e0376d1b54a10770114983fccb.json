{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\EvaluacionesComponent.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\EvaluacionesComponent.vue","mtime":1712682815857},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport crearPreguntas from './PreguntasComponent.vue'\r\nimport flatPickr from 'vue-flatpickr-component'\r\nimport 'flatpickr/dist/flatpickr.css';\r\nimport Vue from 'vue'\r\nimport axios from 'axios'\r\nimport vSelect from 'vue-select'\r\nimport moment from 'moment'\r\nimport VueRouter from 'vue-router'\r\nimport $ from 'jquery'\r\nexport default {\r\n    data() {\r\n        return {\r\n            fileName: null,\r\n            formats:['xls', 'xlsx', 'csv', 'txt'],\r\n            cellAutoWidth: true,\r\n            selectedFormat: 'xls',\r\n            activePrompt: false,\r\n            popupGrupos: false,\r\n\r\n            evaluaciones: [],\r\n            evaluacion: {\r\n                nombre: '',\r\n                asignatura: '',\r\n                descripcion: '',\r\n                fecha_inicio: '',\r\n                fecha_fin: '',\r\n                estado: '',\r\n                puntos: '',\r\n                duracion: '',\r\n            },\r\n            preguntas: [], //preguntas disponibles para cada evaluacion\r\n            pregunta: {\r\n                descripcion: '',\r\n                respuesta: '',\r\n                opcion1: '',\r\n                opcion2: '',\r\n                opcion3: ''\r\n            },\r\n            preguntasEvaluaciones: [], //preguntas cargadas a las evaluaciones\r\n            preguntaEvaluacion: {\r\n                descripcion: '',\r\n                respuesta: '',\r\n                opcion1: '',\r\n                opcion2: '',\r\n                opcion3: ''\r\n            },\r\n            preguntasEvaluacionesResponder: [],\r\n            preguntaEvaluacioneResponder: {\r\n                descripcion: '',\r\n                id_tema: '',\r\n                respuesta: '',\r\n                opcion1: '',\r\n                opcion2: '',\r\n                opcion3: '',\r\n                img_pregunta: '',\r\n                img_respuesta: '',\r\n                img_opcion1: '',\r\n                img_opcion2: '',\r\n                img_opcion3: ''\r\n            },\r\n            asignaturas: [],\r\n            asignatura: {id: '', label: ''},\r\n            asignaturaSelected: {id: '', label: ''},\r\n            editarActivo: false,\r\n            date: new Date().toJSON(),\r\n            datetime: null,\r\n\r\n            agregarActivo: false,\r\n            popupEditEval: false,\r\n            popupSelecPreg: false,\r\n            popupResolver: false,\r\n            estado_evaluacion:['inactiva'],\r\n            evalSelected: [],\r\n            pregSelected: [],\r\n            'tableList': [\r\n                'vs-th: Component',\r\n                'vs-tr: Component',\r\n                'vs-td: Component',\r\n                'thread: Slot',\r\n                'tbody: Slot',\r\n                'header: Slot'\r\n            ],\r\n            usuario: [],\r\n            docente: null,\r\n            nombre_docente: null,\r\n            apellido_docente: null,\r\n            active1: true,\r\n            calificaciones: [],\r\n            calificacionesSelected: [],\r\n            evaluacionestabla: [],\r\n            respuestas: [],\r\n            estudiantes: [],\r\n            alumnos: [],\r\n            urlOrigen: '',\r\n            id_evaluacion: '',\r\n            guardadoActivo: false,\r\n            unidadSelectedFiltrar: '',\r\n            unidSelect: [],\r\n            unidadesFiltrar: [],\r\n            unidadSelected: [],\r\n            unidades: [\r\n                { id: \"1\", label: \"Unidad 1\" },\r\n                { id: \"2\", label: \"Unidad 2\" },\r\n                { id: \"3\", label: \"Unidad 3\" },\r\n                { id: \"4\", label: \"Unidad 4\" },\r\n                { id: \"5\", label: \"Unidad 5\" },\r\n                { id: \"6\", label: \"Unidad 6\" }\r\n            ],\r\n            tipoSelected: '',\r\n            tipos: [\r\n                { id: \"1\", label: \"Opción múltiple\", }, { id: \"2\", label: \"Respuesta cerrada\", }, { id: \"3\", label: \"Verdadero/Falso\", }, { id: \"5\", label: \"Selección simple\"}, { id: \"6\", label: \"Respuesta abierta\" }\r\n            ],\r\n            tiposeval:[],\r\n            tipoevaluacionselect:'',\r\n            grupo_selected:'',\r\n            grupo_opciones:[\r\n                {id:'1',label:'1 grupo'},\r\n                {id:'2',label:'2 grupos'},\r\n                {id:'3',label:'3 grupos'},\r\n                {id:'4',label:'4 grupos'},\r\n                {id:'5',label:'5 grupos'}\r\n            ],\r\n            cant_grupos_select:'',\r\n            radios1: 1,\r\n            grupoEstudianteSelec: '',\r\n            gruposEstudiantes: [\r\n                {id:'1',label:'Grupo 1'},\r\n                {id:'2',label:'Grupo 2'},\r\n                {id:'3',label:'Grupo 3'},\r\n                {id:'4',label:'Grupo 4'},\r\n                {id:'5',label:'Grupo 5'}\r\n            ],\r\n            estudiantesEval: [],\r\n            activePromptGrupo: false,\r\n            textoConfirmgrup: '',\r\n            puntajeTotalGrupo: 0,\r\n            popupEvalAleatoria: false,\r\n            tipospreguntas: [],\r\n            configdateTimePicker: {\r\n                enableTime: true,\r\n                dateFormat: 'Y-m-d H:i:s'\r\n            },\r\n            bancoSelected: {id:'3',label:'Ambas'},\r\n            bancos: [\r\n                {id:'1',label:'Preguntas de Prolipa'},\r\n                {id:'2',label:'Solo mis preguntas'},\r\n                {id:'3',label:'Ambas'},\r\n            ],\r\n            cant_gruposSelec: [1],\r\n            cant_preguntast1: 0,\r\n            cant_preguntast2: 0,\r\n            cant_preguntast3: 0,\r\n            cant_preguntast4: 0,\r\n            cant_preguntast5: 0,\r\n            puntajeIngresado: 0,\r\n            tiposPregAl: [1,2,3,5,6],\r\n            puntajetipo: [1,2,0.5,1,2],\r\n            cantidadesField: [0,0,0,0,0],\r\n            indexCantField: 0,\r\n            evalElimin: [],\r\n            activePromptEliminar: false,\r\n            local_idasignatura: '',\r\n            local_nombreasignatura: '',\r\n            popupCrearPreguntas: false,\r\n        }\r\n    },\r\n    components: {\r\n        'v-select': vSelect,\r\n        'crear-preguntas': crearPreguntas,\r\n        flatPickr\r\n    },\r\n    created() {\r\n        let me = this;\r\n        me.usuario = JSON.parse(localStorage.getItem('usuario'));\r\n        me.docente = me.usuario.idusuario\r\n        me.nombre_docente = me.usuario.nombres\r\n        me.apellido_docente = me.usuario.apellidos\r\n        var urlBack = window.location.href\r\n        var urlV = urlBack.split('/')\r\n        me.urlOrigen = urlV[0]+'/'+urlV[1]+'/'+urlV[2]\r\n\r\n        me.local_idasignatura = localStorage.idasignatura\r\n        me.local_nombreasignatura = localStorage.nombreasignatura\r\n        console.log(me.local_idasignatura+'--'+me.local_nombreasignatura);\r\n\r\n        me.getEvalDoc();\r\n        this.$http.get(this.$server_url+'asignaturasDoc/'+me.docente).then(res => {\r\n            me.asignaturas = res.data;\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        }),\r\n        this.$http.get(this.$server_url+'tipoevaluacion').then(res=>{\r\n            me.tiposeval = res.data\r\n        })\r\n        .catch(function (error){\r\n            console.log(error)\r\n        })\r\n    },\r\n    methods: {\r\n        exportToExcel () {let headerTitle = ['Cédula', 'Estudiante'];\r\n            let headerVal = ['Cedula', 'Estudiante'];\r\n\r\n            for (let index = 0; index < this.alumnos[0].total.length; index++) {\r\n                headerTitle.push(\"Evaluación\" + index)\r\n                headerVal.push(\"Evaluacion\" + index)\r\n            }\r\n\r\n            import('@/vendor/Export2Excel').then(excel => {\r\n                const list = this.respuestas\r\n                const data = this.formatJson(headerVal, list)\r\n                excel.export_json_to_excel({\r\n                    header: headerTitle,\r\n                    data,\r\n                    filename: this.fileName,\r\n                    autoWidth: this.cellAutoWidth,\r\n                    bookType: this.selectedFormat\r\n                })\r\n                this.clearFields()\r\n                this.guardarActivo = '';\r\n                this.generarActivo = ' ';\r\n                this.textAlertCant = '';\r\n                this.cantidad = '';\r\n                this.codigoSelected = [];\r\n            })\r\n        },\r\n        formatJson(filterVal, jsonData) {\r\n            return jsonData.map(v => filterVal.map(j => {\r\n                return v[j]\r\n            }))\r\n        },\r\n        clearFields() {\r\n            this.fileName = ''\r\n            this.cellAutoWidth = true\r\n            this.selectedFormat = 'xls'\r\n        },\r\n        onResize() {\r\n            if (window.innerWidth < 769)\r\n                this.isMobile = true;\r\n            else\r\n                this.isMobile = false;\r\n        },\r\n        getEvalDoc(){\r\n            let me = this\r\n            me.$vs.loading()\r\n            let formData1 = new FormData();\r\n            formData1.append('docente', me.docente);\r\n            formData1.append('codigo', localStorage.codigo);\r\n            me.$http.post(this.$server_url+'evaluacionesDocente', formData1).then(res => {\r\n                me.evaluaciones = res.data;\r\n                me.$vs.loading.close()\r\n                // console.log(me.evaluaciones)\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        limpiar() {\r\n            this.evaluacion.nombre = '';\r\n            this.evaluacion.duracion = '';\r\n            this.evaluacion.descripcion = '';\r\n            this.evaluacion.fecha_inicio = '';\r\n            this.evaluacion.fecha_fin = '';\r\n            this.evaluacion.estado = '';\r\n            this.evaluacion.puntos = '';\r\n            this.preguntas = [];\r\n            this.preguntasEvaluaciones = [];\r\n            this.evaluacion.id = '';\r\n            this.guardadoActivo = false;\r\n            this.unidadSelected = [];\r\n            this.grupo_selected = '';\r\n            this.radios1 = 1;\r\n            this.puntajeIngresado = 0;\r\n            this.cantidadesField = [0,0,0,0,0];\r\n            this.id_evaluacion = '';\r\n        },\r\n        agregar() {\r\n            let me = this;\r\n            if ( me.evaluacion.puntos === '' || me.evaluacion.duracion === '' || me.tipoevaluacionselect.id === '' || me.grupo_selected.id === '' || me.unidadSelected.id === '' ){\r\n                me.$vs.notify({\r\n                    text:'Debe completar todos los campos antes de guardar',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if(me.evaluacion.fecha_inicio == \"\" || me.evaluacion.fecha_inicio == null || me.evaluacion.fecha_inicio == undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar una fecha de inicio',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if(me.evaluacion.fecha_fin == \"\" || me.evaluacion.fecha_fin == null || me.evaluacion.fecha_fin == undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar una fecha fin',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if(me.grupo_selected === '' || me.grupo_selected === null || me.grupo_selected === undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar la cantidad de grupos',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            var idunidades = [];\r\n            for( var i=0; i<this.unidadSelected.length; i++ ){\r\n                idunidades.push(this.unidadSelected[i].id);\r\n            }\r\n\r\n            me.$vs.loading()\r\n            let estado;\r\n            if( me.evaluacion.estado == true ){\r\n                estado = 1;\r\n            }else{\r\n                estado = 0;\r\n            }\r\n\r\n            let descripVal = me.evaluacion.descripcion;\r\n            if( me.evaluacion.descripcion === '' || me.evaluacion.descripcion === null || me.evaluacion.descripcion === 'null' ){\r\n                descripVal = ' '\r\n            }\r\n\r\n            let formData = new FormData();\r\n                formData.append('nombre', me.evaluacion.nombre);\r\n                formData.append('asignatura',  me.local_idasignatura);\r\n                formData.append('descripcion', descripVal);\r\n                formData.append('puntos', me.evaluacion.puntos);\r\n                formData.append('duracion', me.evaluacion.duracion);\r\n                formData.append('fecha_inicio', me.evaluacion.fecha_inicio);\r\n                formData.append('fecha_fin', me.evaluacion.fecha_fin);\r\n                formData.append('estado', estado);\r\n                formData.append('docente', me.docente);\r\n                formData.append('codigo', localStorage.codigo);\r\n                formData.append('idtipoeval', me.tipoevaluacionselect.id);\r\n                formData.append('id_grupo_opciones', me.grupo_selected.id);\r\n                formData.append('cant_unidades', idunidades);\r\n            me.$http.post(this.$server_url+'evaluacion', formData)\r\n                .then(res => {\r\n                    me.getEvalDoc();\r\n                    //me.clasifGrupEstEval(me.evaluacion);\r\n                    me.$vs.loading.close()\r\n                    me.unidSelect = idunidades\r\n                    me.agregarActivo = false\r\n                    me.guardadoActivo = true\r\n                    me.editarActivo = true\r\n                    me.evaluacion.id = res.data.id\r\n                    me.id_evaluacion = res.data.id\r\n                    //me.popupEditEval = false\r\n                    me.cant_gruposSelec = []\r\n                    for( var i=1; i<=me.grupo_selected.id; i++ ){\r\n                        me.cant_gruposSelec.push(i)\r\n                    }\r\n                    me.$vs.notify({\r\n                    text:'Evaluación guardada exitosamente',\r\n                    color:'success',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'})\r\n                })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error+' agregar');\r\n            })\r\n\r\n        },\r\n        openConfirmEliminar(item){\r\n            let me = this;\r\n            me.evalElimin = item\r\n            me.activePromptEliminar = true;\r\n        },\r\n        eliminarEvaluacion() {\r\n            let me = this;\r\n            me.$http.get(this.$server_url+`eliminar_evaluacion/${me.evalElimin.id}`).then(res => {\r\n                if( res.data === 0 ){\r\n                    me.$vs.notify({\r\n                    text:'No se puede eliminar esta evaluación porque ya esta siendo utilizada por sus estudiantes.',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                }else{\r\n                    me.getEvalDoc()\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.notify({\r\n                    text:'No se puede eliminar esta evaluación porque ya esta siendo utilizada por sus estudiantes!'+error,\r\n                    color:'danger',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'})\r\n            })\r\n        },\r\n        editarFormulario(item) {\r\n            let me = this;\r\n            me.cantidadesField = [0,0,0,0,0];\r\n            me.radios1 = 1;\r\n            me.asignaturaSelected = {id: item.id_asignatura, label: item.nombreasignatura};\r\n            me.evaluacion.nombre = item.nombre_evaluacion;\r\n            me.evaluacion.descripcion = item.descripcion;\r\n            me.evaluacion.puntos = item.puntos;\r\n            me.evaluacion.fecha_inicio = item.fecha_inicio;\r\n            me.evaluacion.fecha_fin = item.fecha_fin;\r\n            me.evaluacion.duracion = item.duracion;\r\n            me.evaluacion.estado = item.estado;\r\n            me.evaluacion.id = item.id;\r\n            me.tipoevaluacionselect = {id: item.id_tipoeval, label: item.tipo_nombre};\r\n            me.grupo_selected = {id: item.grupos_evaluacion, label: item.grupos_evaluacion + ' grupos'};\r\n            me.cant_gruposSelec = []\r\n            for( var i=1; i<=me.grupo_selected.id; i++ ){\r\n                me.cant_gruposSelec.push(i)\r\n            }\r\n            me.editarActivo = true; //activa el form editar\r\n\r\n            me.unidSelect = item.cant_unidades.split(',');\r\n            me.cant_grupos_select = me.grupo_selected.id; //cantidad de grupos o filas de evaluaciones desde la base\r\n            me.unidadSelected=[];\r\n            for(var i=0; i<me.unidSelect.length; i++){\r\n               me.unidadSelected.push({id: me.unidSelect[i], label: 'Unidad '+me.unidSelect[i]});\r\n            }\r\n\r\n            me.verPreguntasxEval(item.id);\r\n            me.verEstudiantesEval();\r\n        },\r\n        openConfirmgrupo(item){\r\n            let me = this;\r\n            this.popupEditEval=false;\r\n            if (me.grupo_selected.id < me.cant_grupos_select) {\r\n               me.textoConfirmgrup = 'Ha seleccionado un grupo menor de evaluaciones, las preguntas asignadas a los grupos restantes, se ocultarán'\r\n            }else{\r\n                me.textoConfirmgrup = 'Ha seleccionado un grupo mayor de evaluaciones, debe asignar preguntas a los nuevos grupos.';\r\n            }\r\n            me.activePromptGrupo = true;\r\n        },\r\n        editarEvaluacion(item) {\r\n            let me = this;\r\n            item = me.evaluacion;\r\n            if(me.grupo_selected === '' || me.grupo_selected === null || me.grupo_selected === undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar la cantidad de grupos',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if (me.evaluacion.fecha_inicio === '' || me.evaluacion.fecha_fin === '' || me.evaluacion.puntos === '' || me.evaluacion.duracion === '' ||  me.tipoevaluacionselect === null ||  me.tipoevaluacionselect === '' || me.grupo_selected.id === '' ) {\r\n                me.$vs.notify({\r\n                    text:'Debe completar todos los campos antes de guardar',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n\r\n\r\n            let idunidades = [];\r\n            for( var i=0; i<this.unidadSelected.length; i++ ){\r\n                idunidades.push(this.unidadSelected[i].id);\r\n            }\r\n\r\n            me.$vs.loading()\r\n            let estado;\r\n            if( me.evaluacion.estado == true ){\r\n                estado = 1;\r\n            }else{\r\n                estado = 0;\r\n            }\r\n\r\n            let descripVal = me.evaluacion.descripcion;\r\n            if( me.evaluacion.descripcion === '' || me.evaluacion.descripcion === null || me.evaluacion.descripcion === 'null' ){\r\n                descripVal = ' '\r\n            }\r\n\r\n            let formData = new FormData();\r\n                formData.append('id', item.id);\r\n                formData.append('nombre', me.evaluacion.nombre);\r\n                formData.append('asignatura',  me.local_idasignatura);\r\n                formData.append('descripcion', descripVal);\r\n                formData.append('puntos', me.evaluacion.puntos);\r\n                formData.append('duracion', me.evaluacion.duracion);\r\n                formData.append('fecha_inicio', me.evaluacion.fecha_inicio);\r\n                formData.append('fecha_fin', me.evaluacion.fecha_fin);\r\n                formData.append('estado', estado);\r\n                formData.append('docente', me.docente);\r\n                formData.append('codigo', localStorage.codigo);\r\n                formData.append('idtipoeval', me.tipoevaluacionselect.id);\r\n                formData.append('id_grupo_opciones', me.grupo_selected.id);\r\n                formData.append('cant_unidades', idunidades);\r\n\r\n            me.$http.post(this.$server_url+'evaluacion', formData).then(res => {\r\n                const index = me.evaluaciones.findIndex(\r\n                    evaluacionBuscar => evaluacionBuscar.id === res.data.id)\r\n                me.evaluacion[index] = res.data;\r\n                me.getEvalDoc();\r\n                //me.clasifGrupEstEval(item);\r\n                me.editarActivo = false; //desactiva el form editar\r\n                //me.popupEditEval = false\r\n                me.cant_gruposSelec = []\r\n                for( var i=1; i<=me.grupo_selected.id; i++ ){\r\n                    me.cant_gruposSelec.push(i)\r\n                }\r\n                me.$vs.loading.close()\r\n                me.$vs.notify({\r\n                text:'Evaluación editada exitosamente',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        verPreguntas() {\r\n            let me = this;\r\n            me.preguntas = [];\r\n            // me.id_evaluacion = id;\r\n            me.tipoSelected = '';\r\n            me.$vs.loading()\r\n            me.unidadesFiltrar=[];\r\n\r\n            for(var i=0; i<me.unidadSelected.length; i++){\r\n               me.unidadesFiltrar.push({id: me.unidadSelected[i].id, label: 'Unidad '+me.unidadSelected[i].id});\r\n            }\r\n            me.unidadSelectedFiltrar = {id: me.unidadSelected[0].id, label: 'Unidad '+me.unidadSelected[0].id}\r\n            me.filtrarPreguntasxUnidad()\r\n        },\r\n        cargarPregunta(item, index) {\r\n            let me = this;\r\n            me.$vs.loading()\r\n            let formData = new FormData();\r\n                formData.append('id_evaluacion', me.evaluacion.id);\r\n                formData.append('id_pregunta', item.id);\r\n                formData.append('grupo', me.radios1);\r\n            me.$http.post(this.$server_url+'pregEvaluacion', formData)\r\n            .then(res => {\r\n\r\n\r\n                me.filtrarBancos()\r\n\r\n                /*if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n                    console.log('no hay preguntas para mostrar');\r\n                }else{\r\n                    if( me.tipoSelected.id === '' || me.tipoSelected === null || me.tipoSelected.id === undefined){\r\n                        me.filtrarPreguntasxUnidad()\r\n                    }else{\r\n                        me.filtrarTipos()\r\n                    }\r\n                }*/\r\n\r\n                me.verPreguntasxEval(me.evaluacion.id);\r\n\r\n                me.$vs.notify({\r\n                text:'Pregunta asignada a esta evaluación',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        quitarPregunta(index, id) {\r\n            let me = this;\r\n            me.$vs.loading()\r\n            me.$http.get(this.$server_url+`quitarPregEvaluacion/${id}`).then(() => {\r\n                me.verPreguntasxEval(index.id_evaluacion);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        backEndDateFormat: function(date) {\r\n        \treturn moment(date, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\r\n        },\r\n        removeItemFromArr (arr, item) {\r\n            const i = arr.indexOf(item)\r\n            arr.splice(i, 1)\r\n        },\r\n        irPreguntas(){\r\n            if(this.id_evaluacion===''){\r\n                this.id_evaluacion = 0\r\n            }\r\n\r\n            localStorage.id_desde_eval = this.evaluacion.id\r\n            localStorage.grupo_desde_eval = this.radios1\r\n            localStorage.crea_desde_eval = true\r\n\r\n            this.popupSelecPreg = false\r\n            this.popupCrearPreguntas = true\r\n            // window.location.href = this.urlOrigen+'/preguntas/'+this.id_evaluacion;\r\n        },\r\n        verCalificaciones(){\r\n            let me = this;\r\n            me.$vs.loading()\r\n            me.$http.get(this.$server_url+`verCalificacionEval/${localStorage.codigo}`).then(response => {\r\n                me.respuestas = []\r\n                var respuesta = response.data;\r\n                me.estudiantes = response.data;\r\n\r\n                if (response.data.length != 0) {\r\n                    me.alumnos = response.data.items;\r\n                    me.alumnos.forEach(element => {\r\n                        var cal = new Object();\r\n                        cal.idusuario = element.usuario_idusuario\r\n                        cal.Cedula = element.cedula\r\n                        cal.Estudiante = element.nombres + \" \" + element.apellidos\r\n                        cal.calificaciones = new Object();\r\n                        for (let index = 0; index < element.total.length; index++) {\r\n                            try {\r\n                                if(element.calificaciones[index].calificacion===null){\r\n                                    element.calificaciones[index].calificacion = 0\r\n                                    cal.calificaciones[index] = element.calificaciones[index].calificacion+'/'+element.calificaciones[index].puntos\r\n                                }else{\r\n                                    cal.calificaciones[index] = element.calificaciones[index].calificacion+'/'+element.calificaciones[index].puntos\r\n                                }\r\n                                eval(\"cal.Evaluacion\" + index + \"=\" + element.calificaciones[index].calificacion);\r\n\r\n                            } catch (error) {\r\n                                element.calificaciones[index].calificacion = 0\r\n                                cal.calificaciones[index] = element.calificaciones[index].calificacion+'/'+element.calificaciones[index].puntos\r\n                                eval(\"cal.Evaluacion\" + index + \"=\" + 0);\r\n                            }\r\n                        }\r\n                        me.respuestas.push(cal)\r\n                    });\r\n                }\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                  console.log(error);\r\n            })\r\n\r\n            me.$http.get(this.$server_url+`verEvalCursoExport/${localStorage.codigo}`).then(res => {\r\n                me.evaluacionestabla = res.data;\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n\r\n        },\r\n        filtrarPreguntasxUnidad(){\r\n            let me = this;\r\n            if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n                return;\r\n            }\r\n            me.bancoSelected = {id:'3',label:'Ambas'}\r\n\r\n            var tipo;\r\n            if( me.tipoSelected===null || me.tipoSelected==='' ){\r\n                tipo = 'null'\r\n            }else{\r\n                tipo = me.tipoSelected.id\r\n            }\r\n\r\n            me.$vs.loading()\r\n            const formData = new FormData();\r\n                formData.append('evaluacion',       me.id_evaluacion);\r\n                formData.append('unidad',           me.unidadSelectedFiltrar.id);\r\n                formData.append('grupo',            me.radios1);\r\n                formData.append('tipo',             tipo);\r\n                formData.append('idusuario',        me.usuario.idusuario)\r\n                formData.append('usuario',          me.usuario.idusuario)\r\n                formData.append('id_group',         me.usuario.id_group)\r\n                formData.append('institucion_id',   me.usuario.institucion_idInstitucion)\r\n                formData.append('preguntasAll',     1)\r\n                this.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n                me.preguntas = res.data;\r\n                console.log(\"uwu\",me.preguntas)\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error);\r\n            })\r\n\r\n        },\r\n        filtrarTipos(){\r\n            let me = this;\r\n            if( me.unidadSelectedFiltrar === '' || me.unidadSelectedFiltrar === null || me.unidadSelectedFiltrar.id === undefined){\r\n                return;\r\n            }\r\n\r\n            if( me.tipoSelected === '' || me.tipoSelected === null || me.tipoSelected.id === undefined){\r\n                me.filtrarPreguntasxUnidad()\r\n                return;\r\n            }\r\n\r\n            me.$vs.loading()\r\n            const formData = new FormData();\r\n                formData.append('evaluacion',   me.id_evaluacion);\r\n                formData.append('unidad',       me.unidadSelectedFiltrar.id);\r\n                formData.append('tipo',         me.tipoSelected.id);\r\n                formData.append('grupo',        me.radios1);\r\n                formData.append('idusuario',    me.usuario.idusuario)\r\n                formData.append('usuario',      me.usuario.idusuario)\r\n                formData.append('id_group',     me.usuario.id_group)\r\n                formData.append('institucion_id',   me.usuario.institucion_idInstitucion)\r\n                formData.append('preguntasAll', 1)\r\n                me.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n            // me.$http.post(this.$server_url+'preguntasevaltipounidad', formData).then(res => {\r\n                me.preguntas = res.data;\r\n                console.log(\"uwu2\",me.preguntas)\r\n                me.bancoSelected = {}\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n\r\n        },\r\n        verPreguntasxEval(id_evaluacion){\r\n          let me = this;\r\n          me.verTiposPreguntas()\r\n          let formData = new FormData();\r\n          formData.append('evaluacion', id_evaluacion);\r\n          formData.append('grupo', me.radios1);\r\n          me.$vs.loading()\r\n          me.$http.post(this.$server_url+`pregEvaluacionGrupo`, formData).then(res => {\r\n          me.preguntasEvaluaciones = res.data;\r\n          if( me.preguntasEvaluaciones.items === undefined ){\r\n            console.log('no existen preguntas para el grupo seleccionado');\r\n          }else{\r\n            me.puntajeTotalGrupo = 0;\r\n            for(var i=0; i<me.preguntasEvaluaciones.items.length; i++){\r\n              me.puntajeTotalGrupo += me.preguntasEvaluaciones.items[i].puntaje_pregunta;\r\n            }\r\n          }\r\n            me.$vs.loading.close()\r\n          })\r\n          .catch(function (error) {\r\n            me.$vs.loading.close()\r\n            console.log(error+'verPreguntasxEval');\r\n          })\r\n        },\r\n        verEstudiantesEval(){\r\n            let me = this;\r\n            me.$vs.loading()\r\n            me.$http.get(this.$server_url+`verEstCursoEval/${localStorage.codigo}`).then(res => {\r\n                me.estudiantesEval = res.data;\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        asignarGrupoEst(item){\r\n            let me = this;\r\n            let formData = new FormData();\r\n                formData.append('estudiante', item.idusuario);\r\n                formData.append('grupo', item.grupo);\r\n                formData.append('codigo', localStorage.codigo);\r\n            me.$http.post(this.$server_url+`asignarGrupoEst`, formData).then(res => {\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        /*clasifGrupEstEval(item){\r\n            let me = this;\r\n            let estudiantes = [];\r\n            for( var i=0; i<me.estudiantesEval.length; i++ ){\r\n                estudiantes.push(me.estudiantesEval[i].idusuario);\r\n            }\r\n            estudiantes.sort(function() { return Math.random() - 0.5 });\r\n            //alert(estudiantes);\r\n            let formData = new FormData();\r\n                formData.append('grupos', me.grupo_selected.id);\r\n                formData.append('codigo', localStorage.codigo);\r\n                formData.append('cantidad', me.estudiantesEval.length);\r\n                formData.append('estudiantes', estudiantes);\r\n            this.$http.post(`http://localhostpEstEval`, formData).then(res => {\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },*/\r\n        irRevision(item, val){\r\n            localStorage.removeItem('nombresImprimir')\r\n            localStorage.setItem('id_evalRevisar', item.id);\r\n            localStorage.setItem('previsualizar_eval', val);\r\n            //this.$router.push('/revisarevaluacion')\r\n\r\n            window.location.href = this.urlOrigen+'/revisarevaluacion';\r\n        },\r\n        contarPuntosIngresados(){\r\n            let me = this\r\n            me.puntajeIngresado = 0;\r\n            var cantField = 0;\r\n            for( var i=0; i<me.cantidadesField.length; i++ ){\r\n                if( Number.isNaN(parseInt(me.cantidadesField[i])) ){\r\n                    cantField = 0;\r\n                }else{\r\n                    cantField = parseInt(me.cantidadesField[i])\r\n                }\r\n                me.puntajeIngresado += (me.puntajetipo[i]*parseInt(cantField))\r\n            }\r\n        },\r\n        cargarPreguntasAleatorias(){\r\n            let me = this\r\n            me.puntajeIngresado = 0;\r\n            var cantField = 0;\r\n            for( var i=0; i<me.cantidadesField.length; i++ ){\r\n\r\n                if( Number.isNaN(parseInt(me.cantidadesField[i])) ){\r\n                    cantField = 0;\r\n                }else{\r\n                    cantField = parseInt(me.cantidadesField[i])\r\n                }\r\n                me.puntajeIngresado += (me.puntajetipo[i]*parseInt(cantField))\r\n            }\r\n\r\n            if( me.puntajeIngresado <= 0 ){\r\n                return\r\n            }\r\n\r\n            if( me.puntajeIngresado > me.evaluacion.puntos || (me.puntajeTotalGrupo+me.puntajeIngresado) > me.evaluacion.puntos ){\r\n                me.$vs.notify({\r\n                text:'El puntaje de las preguntas excede al puntaje de esta evaluación',\r\n                color:'warning',\r\n                iconPack: 'feather',\r\n                icon:'icon-alert-triangle'})\r\n                return\r\n            }\r\n\r\n            me.$vs.loading()\r\n            let cantidad = me.cantidadesField\r\n            let unidades = []\r\n\r\n            for( var i=0; i<me.unidadSelected.length; i++ ){\r\n                unidades.push(me.unidadSelected[i].id)\r\n            }\r\n\r\n            let formData = new FormData();\r\n                formData.append('evaluacion', me.evaluacion.id);\r\n                formData.append('puntos', me.evaluacion.puntos);\r\n                formData.append('grupos', me.grupo_selected.id);\r\n                formData.append('cant_pregs', cantidad);\r\n                formData.append('unidades', unidades);\r\n                formData.append('tipos', me.tiposPregAl);\r\n                formData.append('usuario', me.usuario.idusuario);\r\n                formData.append('id_group', me.usuario.id_group);\r\n                formData.append('institucion_id', me.usuario.institucion_idInstitucion);\r\n            me.$http.post(this.$server_url+`cargarPregsRand`, formData).then(res => {\r\n                me.popupEvalAleatoria = false\r\n                me.verPreguntasxEval(me.evaluacion.id)\r\n                me.$vs.notify({\r\n                text:'Preguntas cargadas correctamente',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n                me.cantidadesField  = [0,0,0,0,0]\r\n                me.puntajeIngresado = 0\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        filtrarBancos(){\r\n            let me = this\r\n            if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n                return;\r\n            }\r\n\r\n            if( me.bancoSelected === null ){\r\n                var bancoSel = 3\r\n            }else{\r\n                var bancoSel = me.bancoSelected.id;\r\n            }\r\n\r\n            switch(bancoSel) {\r\n            case '1':\r\n                me.filtrarxProlipa()\r\n                break;\r\n            case '2':\r\n                me.filtrarxDocente()\r\n                break;\r\n            default:\r\n                me.filtrarPreguntasxUnidad()\r\n            }\r\n\r\n        },\r\n        filtrarxDocente(){\r\n            let me = this\r\n            me.$vs.loading()\r\n            var tipo;\r\n            if( me.tipoSelected===null || me.tipoSelected==='' ){\r\n                tipo = 'null'\r\n            }else{\r\n                tipo = me.tipoSelected.id\r\n            }\r\n            const formData = new FormData();\r\n                formData.append('evaluacion', me.id_evaluacion);\r\n                formData.append('unidad', me.unidadSelectedFiltrar.id);\r\n                formData.append('grupo', me.radios1);\r\n                formData.append('usuario', me.usuario.idusuario);\r\n                formData.append('tipo', tipo);\r\n                formData.append('id_group', me.usuario.id_group);\r\n                formData.append('institucion_id', me.usuario.institucion_idInstitucion);\r\n                formData.append('preguntasDocentes', 1);\r\n                me.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n            // me.$http.post(this.$server_url+'preguntasxbancoDocente', formData).then(res => {\r\n                me.preguntas = res.data\r\n                console.log(\"uwu3\",me.preguntas.items.filter(p => p.id_tema == 41))\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error);\r\n            })\r\n        },\r\n        filtrarxProlipa(){\r\n            let me = this\r\n            me.$vs.loading()\r\n            var tipo;\r\n            if( me.tipoSelected === null || me.tipoSelected === '' ){\r\n                tipo = 'null'\r\n            }else{\r\n                tipo = me.tipoSelected.id\r\n            }\r\n            const formData = new FormData();\r\n            formData.append('evaluacion', me.id_evaluacion);\r\n            formData.append('unidad', me.unidadSelectedFiltrar.id);\r\n            formData.append('usuario', me.usuario.idusuario);\r\n            formData.append('grupo', me.radios1);\r\n            formData.append('tipo', tipo);\r\n            formData.append('id_group', me.usuario.id_group);\r\n            formData.append('institucion_id', me.usuario.institucion_idInstitucion);\r\n            formData.append('preguntasProlipa', 1);\r\n            me.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n            // me.$http.post(this.$server_url+'preguntasxbancoProlipa', formData).then(res => {\r\n                me.preguntas = res.data;\r\n                console.log(\"uwu4\")\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error);\r\n            })\r\n        },\r\n        copiarLink(item){\r\n            let me = this\r\n            let date = new Date()\r\n            let fecha_actual = moment(date, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss')\r\n\r\n            //if( fecha_actual < item.fecha_inicio || fecha_actual > item.fecha_fin ){\r\n            if( fecha_actual > item.fecha_fin ){\r\n                me.$vs.notify({\r\n                text:'Esta evaluación aún no está disponible. Verifique las fechas de inicio y fin.',\r\n                color:'warning',\r\n                iconPack: 'feather',\r\n                icon:'icon-alert-triangle'})\r\n                return\r\n            }\r\n\r\n            if( item.estado != 1 ){\r\n                me.$vs.notify({\r\n                text:'Esta evaluación está inactiva',\r\n                color:'warning',\r\n                iconPack: 'feather',\r\n                icon:'icon-alert-triangle'})\r\n                return\r\n            }\r\n\r\n\r\n            let link = me.urlOrigen+'/responderEvaluacion/'+item.id+'-'+localStorage.codigo+'-'+me.usuario.institucion_idInstitucion\r\n            var aux = document.createElement(\"input\");\r\n            aux.setAttribute(\"value\", link);\r\n            document.body.appendChild(aux);\r\n            aux.select();\r\n\r\n            try {\r\n                var status = document.execCommand('copy');\r\n                if(!status){\r\n                    me.$vs.notify({\r\n                    text:'Error al copiar el link',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                }else{\r\n                    me.$vs.notify({\r\n                    text:'Link copiado',\r\n                    color:'success',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'})\r\n                }\r\n            } catch (err) {\r\n                console.log('No se pudo copiar');\r\n            }\r\n\r\n            document.body.removeChild(aux);\r\n        },\r\n        verTiposPreguntas(){\r\n            let me = this\r\n            let v_unidades = []\r\n            $.each(me.unidadSelected,function(key, value){\r\n                v_unidades.push(value.id)\r\n            });\r\n\r\n            me.$http.get(this.$server_url+'tipospreguntas/' + localStorage.idasignatura + '/'+ v_unidades+'/'+me.usuario.id_group+'/'+me.usuario.institucion_idInstitucion)\r\n            .then(res=>{\r\n                me.tipospreguntas = res.data\r\n            })\r\n            .catch(function (error){\r\n                console.log(error)\r\n            })\r\n        }\r\n    },\r\n}\r\n",{"version":3,"sources":["EvaluacionesComponent.vue"],"names":[],"mappingsfile":"EvaluacionesComponent.vue","sourceRoot":"src/views/evaluaciones","sourcesContent":["<template>\r\n\r\n<div>\r\n    <!---==============MODALES============-->\r\n    <vs-popup fullscreen title=\"Crear preguntas\" :active.sync=\"popupCrearPreguntas\" @accept=\"verPreguntas(evaluacion.id)\" @close=\"verPreguntas(evaluacion.id)\">\r\n        <crear-preguntas/>\r\n    </vs-popup>\r\n    <vs-popup title=\"Evaluación Aleatoria\" :active.sync=\"popupEvalAleatoria\">\r\n        <div align=\"center\" style=\"padding: 5px; border-radius: 5px; background-color: #FFDCD1; color: #D6623A;\" class=\"mb-2\">\r\n            Si modificó las unidades, guarde la evaluación antes de continuar.\r\n        </div>\r\n        <div align=\"center\" style=\"padding: 5px; border-radius: 5px; background-color: #C8E1FF; color: #1360BA;\" class=\"mb-2\">\r\n            Las preguntas aleatorias serán obtenidas únicamente del banco de preguntas de Prolipa\r\n        </div>\r\n        <table style=\"width: 100%;\">\r\n          <tr style=\"background-color: #e5e5e5;\">\r\n              <td><b>Tipo de pregunta</b></td>\r\n              <td align=\"center\"><b>Puntaje</b></td>\r\n              <td align=\"center\"><b>Disponibles</b></td>\r\n              <td align=\"center\"><b>Cantidad</b></td>\r\n          </tr>\r\n          <tbody>\r\n            <tr v-for=\"(itemop, indexch) in tipospreguntas\" :key=\"indexch\">\r\n                <td>\r\n                    {{ itemop.label }}\r\n                </td>\r\n                <td align=\"center\">\r\n                    {{itemop.puntaje}} pts.\r\n                </td>\r\n                <td align=\"center\">{{itemop.cantidad}}</td>\r\n                <td align=\"center\">\r\n                    <vs-input type=\"number\" min=\"0\" v-model=\"cantidadesField[indexch]\" @input=\"contarPuntosIngresados()\" class=\"mb-4\" style=\"width: 80px; text-align: center;\" />\r\n                </td>\r\n            </tr>\r\n            <tr style=\"background-color: #e5e5e5;\">\r\n                <td colspan=\"3\" style=\"vertical-align: middle;\"><b>Puntaje preguntas actuales:</b></td>\r\n                <td align=\"center\">\r\n                    <vs-button type=\"border\" color=\"success\">{{puntajeTotalGrupo}}</vs-button>\r\n                </td>\r\n            </tr>\r\n              <tr style=\"background-color: #e5e5e5;\">\r\n                <td colspan=\"3\" style=\"vertical-align: middle;\"><b>Puntaje total:</b></td>\r\n                <td align=\"center\">\r\n                  <vs-button type=\"border\" color=\"success\" v-if=\"(puntajeIngresado+puntajeTotalGrupo)<=evaluacion.puntos\" style=\"color: green;\">{{puntajeIngresado+puntajeTotalGrupo}}</vs-button>\r\n                  <vs-button type=\"border\" color=\"danger\" v-else style=\"color: red;\">{{puntajeIngresado+puntajeTotalGrupo}}</vs-button>\r\n                </td>\r\n              </tr>\r\n          </tbody>\r\n        </table>\r\n        <vs-button class=\"w-full mt-3 mb-2\" color=\"success\" type=\"gradient\" @click=\"cargarPreguntasAleatorias()\">Generar preguntas</vs-button>\r\n    </vs-popup>\r\n    <vs-prompt\r\n      @cancel=\"popupEditEval=true; activePromptGrupo=false;\"\r\n      @accept=\"popupEditEval=true; editarEvaluacion()\"\r\n      @close=\"popupEditEval=true; activePromptGrupo=false;\"\r\n      :active.sync=\"activePromptGrupo\">\r\n      <div class=\"con-exemple-prompt\">\r\n        <vs-alert color=\"danger\" active=\"true\">\r\n            {{textoConfirmgrup}}\r\n        </vs-alert>\r\n      </div>\r\n    </vs-prompt>\r\n    <vs-prompt\r\n      @cancel=\"activePromptEliminar=false;\"\r\n      @accept=\"eliminarEvaluacion()\"\r\n      @close=\"activePromptEliminar=false;\"\r\n      :active.sync=\"activePromptEliminar\" color=\"danger\">\r\n      <div class=\"con-exemple-prompt\">\r\n        <h5 class=\"mb-4 mt-4\">¿Está seguro de eliminar esta evaluación?</h5>\r\n      </div>\r\n    </vs-prompt>\r\n    <!----modal exportar--------->\r\n    <vs-prompt title=\"Exportar a Excel\" class=\"export-options\" @cancle=\"clearFields\" @accept=\"exportToExcel\" accept-text=\"Exportar\" @close=\"clearFields\" :active.sync=\"activePrompt\">\r\n\r\n        <vs-input v-model=\"fileName\" placeholder=\"Ingrese el nombre del archivo\" class=\"w-full\" />\r\n        <v-select v-model=\"selectedFormat\" :options=\"formats\" class=\"my-4\" />\r\n\r\n    </vs-prompt>\r\n    <!----fin modal exportar--------->\r\n    <!-- modal de aceptar cambio de grupos de evaluaciones si es menor al de la base -->\r\n    <vs-prompt title=\"Alerta\" class=\"export-options\" @cancel=\"clearFields\" accept-text=\"Aceptar\" @close=\"clearFields\" :active.sync=\"popupGrupos\">\r\n        <vs-alert class=\"mb-3\" color=\"danger\" icon-pack=\"feather\" icon=\"icon-info\">\r\n            <span>Ha seleccionado un grupo menor de evaluaciones, las preguntas asignadas a los grupos restantes, se ocultarán</span>\r\n        </vs-alert>\r\n    </vs-prompt>\r\n    <!---==============FIN MODALES============-->\r\n    <!-----===PROCESO====-->\r\n    <vx-card>\r\n      <h2 style=\"color:#7F7E7E\" class=\"mb-4\" v-if=\"evaluaciones[0]!=null\">Curso: {{evaluaciones[0].nombre_curso}} &nbsp;-&nbsp;\r\n      Aula: {{evaluaciones[0].aula}}</h2>\r\n      <vs-tabs alignment=\"fixed\">\r\n        <vs-tab label=\"Evaluaciones\" @click=\"getEvalDoc()\">\r\n            <!--LISTADO DE EVALUACIONES-->\r\n            <div align=\"center\" class=\"mt-4\">\r\n                <vs-table stripe v-if=\"evaluaciones!=0\" v-model=\"evalSelected\" pagination max-items=\"25\" search :data=\"evaluaciones\">\r\n                    <template slot=\"header\">\r\n                        <vs-button color=\"primary\" type=\"border\" class=\"m-1\" @click=\"$router.go(-1)\"><b>← Volver</b></vs-button>\r\n                        <vs-button @click=\"limpiar(); popupEditEval=true; agregarActivo=true;\" color=\"dark\" type=\"filled\"  class=\"m-1\">Crear mi evaluación</vs-button>\r\n                        <!-- <vs-button @click=\"irPreguntas\" size=\"small\" style=\"font-size: 14px;\" color=\"primary\" type=\"filled\" class=\"mr-1\">Crear Pregunta</vs-button> -->\r\n                    </template>\r\n\r\n                    <template slot=\"thead\">\r\n                        <vs-th sort-key=\"nombre_evaluacion\">Evaluación</vs-th>\r\n                        <vs-th sort-key=\"fecha\">Fecha</vs-th>\r\n                        <vs-th>Acciones</vs-th>\r\n                    </template>\r\n\r\n                    <template slot-scope=\"{data}\">\r\n                    <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n\r\n                        <vs-td :data=\"data[indextr].tipo_nombre\">\r\n                            <b>Asignatura:</b> {{ data[indextr].nombreasignatura }}<br>\r\n                            <b>Puntos:</b> {{ data[indextr].puntos }} &nbsp;&nbsp;-&nbsp;&nbsp;\r\n                            <b>Duración:</b> {{ data[indextr].duracion }} min<br>\r\n                            <b>Tipo:</b> {{ data[indextr].tipo_nombre }}\r\n                        </vs-td>\r\n\r\n                        <vs-td>\r\n                            <b>Inicio:</b> {{ data[indextr].fecha_inicio }}<br>\r\n                            <b>Fin:</b> {{ data[indextr].fecha_fin }}<br>\r\n                            <vs-switch disabled color=\"success\" v-model=\"data[indextr].estado\" style=\"width: 70px;\">\r\n                                <span slot=\"on\">Activa</span>\r\n                                <span slot=\"off\">Inactiva</span>\r\n                            </vs-switch>\r\n                        </vs-td>\r\n\r\n                        <vs-td :data=\"data[indextr].id\" style=\"width: 260px;\">\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Editar evaluación\" position=\"top\" color=\"success\">\r\n                                <vs-button size=\"large\" radius icon-pack=\"feather\" icon=\"icon-edit\" @click=\"agregarActivo=false; editarFormulario(data[indextr]); popupEditEval=true; id_evaluacion=data[indextr].id;\" color=\"success\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Previsualizar\" position=\"top\" color=\"dark\">\r\n                                <vs-button size=\"large\" class=\"ml-2\" radius icon-pack=\"feather\" icon=\"icon-eye\" @click=\"irRevision(data[indextr], 1);\" color=\"dark\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Revisar evaluación\" position=\"top\" color=\"primary\">\r\n                                <vs-button size=\"large\" class=\"ml-2\" radius icon-pack=\"feather\" icon=\"icon-check-circle\" @click=\"irRevision(data[indextr], 0);\" color=\"primary\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Eliminar evaluación\" position=\"top\" color=\"danger\">\r\n                                <vs-button size=\"large\" class=\"ml-2\" radius icon-pack=\"feather\" icon=\"icon-trash\" @click=\"openConfirmEliminar(data[indextr]);\" color=\"danger\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n                            <vx-tooltip style=\"display: inline-block;\" text=\"Copiar link de evaluación\" position=\"top\" color=\"warning\">\r\n                                <vs-button size=\"large\" radius icon-pack=\"feather\" icon=\"icon-link\" @click=\"copiarLink(data[indextr]);\" color=\"warning\" type=\"line\"></vs-button>\r\n                            </vx-tooltip>\r\n\r\n\r\n                        </vs-td>\r\n                    </vs-tr>\r\n                    </template>\r\n                </vs-table>\r\n\r\n                <vs-button v-if=\"evaluaciones==0\" class=\"mt-6 mb-6\" type=\"line\" @click=\"limpiar(); popupEditEval=true; agregarActivo=true;\" color=\"primary\">Crear evaluación</vs-button>\r\n\r\n            </div>\r\n        </vs-tab>\r\n        <vs-tab label=\"Calificaciones\" @click=\"verCalificaciones()\">\r\n            <div v-if=\"respuestas.length===0\" class=\"mt-6\">No existen calificaciones para este curso</div>\r\n            <vs-table stripe v-else pagination max-items=\"25\" search :data=\"respuestas\">\r\n                <template slot=\"header\">\r\n                    <vs-button color=\"warning\" size=\"small\" style=\"font-size: 14px;\" @click=\"activePrompt=true\">Exportar</vs-button>\r\n                </template>\r\n                <template slot=\"thead\">\r\n                    <vs-th sort-key=\"nombres\">Estudiante</vs-th>\r\n                    <vs-th v-for=\"(item, index) in respuestas[0].calificaciones\" :key=\"index\">\r\n                        Ev{{index}}\r\n                    </vs-th>\r\n\r\n                </template>\r\n                <template slot-scope=\"{data}\">\r\n                <vs-tr :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                    <vs-td :data=\"tr\">\r\n                        {{ tr.Estudiante }}\r\n                    </vs-td>\r\n\r\n                    <vs-td :key=\"$indexs\" v-for=\"(item, $indexs) in tr.calificaciones\">\r\n                        <span v-if=\"item\">{{item}}</span>\r\n                        <span v-else>0</span>\r\n                    </vs-td>\r\n\r\n                </vs-tr>\r\n                </template>\r\n            </vs-table>\r\n        </vs-tab>\r\n      </vs-tabs>\r\n    </vx-card>\r\n    <!--========NUEVOS MODALES==========-->\r\n    <!-- Modal Editar Evaluaciones-->\r\n    <div class=\"demo-alignment\">\r\n        <vs-popup fullscreen classContent=\"popup-example\" v-bind:title=\"'Evaluación - GRUPO '+radios1\" :active.sync=\"popupEditEval\">\r\n        <vs-tabs alignment=\"fixed\">\r\n          <vs-tab label=\"Evaluación\">\r\n            <div class=\"vx-row mt-4\">\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px; margin-top: 15px;\">Asignatura: </div>\r\n                <vs-input disabled class=\"w-full\" :value=\"local_nombreasignatura\"></vs-input>\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px; margin-top: 15px;\">Unidades </div>\r\n                <v-select multiple :closeOnSelect=\"false\" v-model=\"unidadSelected\" class=\"mb-4\" :options=\"unidades\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px;\">Tipo de evaluación: </div>\r\n                <v-select class=\"mb-4 w-full\" v-model=\"tipoevaluacionselect\" :options=\"tiposeval\" :value=\"tipoevaluacionselect\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px;\">Cuántos grupos de evaluaciones desea crear </div>\r\n                <v-select class=\"mb-4\" v-if=\"agregarActivo===true\" v-model=\"grupo_selected\" :options=\"grupo_opciones\" :value=\"grupo_selected\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n                <v-select class=\"mb-4\" v-else v-model=\"grupo_selected\" :options=\"grupo_opciones\" :value=\"grupo_selected\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" @input=\"openConfirmgrupo(evaluacion)\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <div style=\"font-size: 12px;\">Fecha inicio: </div>\r\n                <flat-pickr class=\"mb-4 w-full\" :config=\"configdateTimePicker\" v-model=\"evaluacion.fecha_inicio\" placeholder=\"Fecha inicio\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\" align=\"left\">\r\n                <div style=\"font-size: 12px;\">Fecha fin: </div>\r\n                <flat-pickr class=\"mb-4 w-full\" :config=\"configdateTimePicker\" v-model=\"evaluacion.fecha_fin\" placeholder=\"Fecha fin\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <vs-input type=\"number\" class=\"inputx w-full mb-4\" label=\"Duración (minutos)\" v-model=\"evaluacion.duracion\"/>\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <vs-input type=\"number\" class=\"inputx w-full mb-6\" label=\"Puntos\" v-model=\"evaluacion.puntos\"/>\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <vs-textarea class=\"inputx w-full mb-6\" label=\"Descripción\" v-model=\"evaluacion.descripcion\" />\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full mt-4\" align=\"center\">\r\n                <vs-switch vs-icon-on=\"check\" color=\"success\" v-model=\"evaluacion.estado\" style=\"width: 120px;\" class=\"mt-6 mb-4\">\r\n                  <span slot=\"on\">Activa</span>\r\n                  <span slot=\"off\">Inactiva</span>\r\n                </vs-switch>\r\n              </div>\r\n              <vs-divider/>\r\n              <!--CARGAR PREGUNTAS ALEATORIAS-->\r\n              <div class=\"vx-col sm:w-1/2 w-full mt-4\" align=\"center\">\r\n                <vs-button class=\"mt-2 mb-2 w-full\" v-if=\"agregarActivo===false\" color=\"warning\" type=\"border\" @click=\"verPreguntasxEval(evaluacion.id); puntajeTotalGrupo=0; popupEvalAleatoria=true\">Cargar preguntas aleatorias</vs-button>\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full mt-4\" align=\"center\">\r\n                <vs-button class=\"mt-2 mb-2 w-full\" v-if=\"agregarActivo===false\" color=\"primary\" type=\"gradient\" @click=\"editarEvaluacion(evaluacion)\">Guardar</vs-button>\r\n                <div v-else>\r\n                <vs-button class=\"mt-2 mb-2 w-full\" v-if=\"guardadoActivo===false\" color=\"success\" type=\"gradient\" @click=\"agregar()\">Guardar</vs-button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </vs-tab>\r\n          <vs-tab label=\"Preguntas\">\r\n            <!------lista preguntas por evaluacion----->\r\n            <div v-if=\"evaluacion.id===undefined || evaluacion.id===''\"></div>\r\n            <ul align=\"center\" v-else class=\"mt-6 mb-2\" style=\"border: 1px solid #D5D5D5; border-radius: 5px;\">\r\n              <vs-radio v-for=\"(itemp, indexp) in cant_gruposSelec\" :key=\"indexp\" v-model=\"radios1\" v-bind:vs-value=\"indexp+1\" class=\"m-3\" @input=\"verPreguntasxEval(evaluacion.id)\">\r\n                  Grupo {{indexp+1}}\r\n              </vs-radio>\r\n            </ul>\r\n            <vs-table stripe v-if=\"preguntasEvaluaciones!=0\" v-model=\"pregSelected\" pagination max-items=\"25\" search :data=\"preguntasEvaluaciones.items\">\r\n              <template slot=\"header\">\r\n                <vs-button @click=\"popupEditEval=false; popupSelecPreg=true; verPreguntas();\" class=\"mr-1\" size=\"small\" style=\"font-size: 14px;\" color=\"dark\" type=\"filled\">Cargar preguntas</vs-button>\r\n                <vs-button @click=\"irPreguntas\" size=\"small\" style=\"font-size: 14px;\" color=\"primary\" type=\"filled\" class=\"mr-3\">Crear mis preguntas</vs-button>\r\n              </template>\r\n              <template slot=\"thead\">\r\n                <vs-th sort-key=\"descripcion\" style=\"font-size: 15px; color: #18DE8A;\">Preguntas de mi evaluación - Cantidad: {{preguntasEvaluaciones.items.length}}  - Puntaje: {{puntajeTotalGrupo}}\r\n                    </vs-th>\r\n                <vs-th sort-key=\"nombre_tipo\">Detalle</vs-th>\r\n                <vs-th>Acciones</vs-th>\r\n              </template>\r\n              <template slot-scope=\"{data}\">\r\n                  <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                      <vs-td :data=\"data[indextr].descripcion\">\r\n                          Tema: {{ data[indextr].nombre_tema}}<br>\r\n                          {{ data[indextr].descripcion }}\r\n                          <img v-if=\"data[indextr].img_pregunta!='' && data[indextr].img_pregunta!='null' && data[indextr].img_pregunta!=null\" v-bind:src=\"$data_url+'archivos/img/img_preguntas/'+data[indextr].img_pregunta\" class=\"img-responsive\" style=\"border-radius: 5px;\" width=\"100px\">\r\n                          <vs-collapse>\r\n                          <vs-collapse-item>\r\n                              <div slot=\"header\">\r\n                                  Opciones\r\n                              </div>\r\n                              <div class=\"mb-5\" :key=\"indexitem\" v-for=\"(item, indexitem) in data[indextr].opciones\">\r\n                              <div style=\"width: 100%; font-size: 12px; color: #0DCD88;\" v-if=\"item.tipo===1\">Respuesta correcta<br></div>\r\n                              <div style=\"width: 100%; font-size: 12px; color: #FD5858;\" v-else>Respuesta incorrecta<br></div>\r\n                              <div style=\"width: 100%\"> {{ item.opcion }}<br></div>\r\n                              <div style=\"width: 100%\" ><img v-if=\"item.img_opcion!='' && item.img_opcion!='null' && item.img_opcion!=null\" v-bind:src=\"$data_url+'archivos/img/img_preguntas/'+item.img_opcion\" class=\"img-responsive\" style=\"border-radius: 5px;\" width=\"100px\"></div>\r\n                              </div>\r\n                          </vs-collapse-item>\r\n                          </vs-collapse>\r\n                      </vs-td>\r\n\r\n                      <vs-td :data=\"data[indextr].nombre_tipo\">\r\n                          {{data[indextr].clasificacion}}<br>\r\n                          <b>Puntaje:</b> {{data[indextr].puntaje_pregunta}}<br>\r\n                          <b>Tipo:</b> {{data[indextr].nombre_tipo}}\r\n                      </vs-td>\r\n\r\n                      <vs-td>\r\n                          <vs-button @click=\"quitarPregunta(data[indextr], data[indextr].id_pre_evas)\" color=\"danger\" style=\"font-size: 13px;\" type=\"filled\" size=\"small\">eliminar</vs-button>\r\n                      </vs-td>\r\n                  </vs-tr>\r\n              </template>\r\n            </vs-table>\r\n            <div align=\"center\" class=\"mb-5 mt-5\" color=\"#842993\" v-if=\"preguntasEvaluaciones==0\">\r\n                <div class=\"mt-6\" v-if=\"evaluacion.id===undefined || evaluacion.id===''\">\r\n                    Debe crear una evaluación antes de cargar preguntas.\r\n                </div>\r\n                <div v-else class=\"mt-6\">\r\n                    <vs-button color=\"primary\" type=\"line\" class=\"ml-4\" @click=\"popupEditEval=false; popupSelecPreg=true; verPreguntas(evaluacion.id);\">Cargar preguntas</vs-button>\r\n                    <vs-button @click=\"irPreguntas\" color=\"primary\" type=\"line\" class=\"ml-3\">Crear mis preguntas</vs-button>\r\n                </div>\r\n            </div>\r\n          </vs-tab>\r\n          <!-----------fin lista preguntas por evaluacion------------->\r\n        </vs-tabs>\r\n        </vs-popup>\r\n    </div>\r\n    <!----fin modal editar--->\r\n    <!-- Modal Preguntas-->\r\n    <div class=\"demo-alignment\">\r\n      <vs-popup fullscreen classContent=\"popup-example\" v-bind:title=\"'Seleccione las preguntas para esta Evaluación - GRUPO '+radios1\" :active.sync=\"popupSelecPreg\">\r\n          <b>Asignaturas:</b> {{ local_nombreasignatura }}<br>\r\n          <div v-if=\"preguntas!=0\"> <b>Cantidad preguntas:</b> {{  preguntas.items.length }}</div>\r\n          <vs-table stripe v-if=\"preguntas!=0\" v-model=\"pregSelected\" pagination max-items=\"25\" search :data=\"preguntas.items\">\r\n\r\n              <template slot=\"header\">\r\n                  <vs-button @click=\"popupSelecPreg=false; popupEditEval=true;\" class=\"mr-2\" size=\"small\" style=\"font-size: 14px;\" color=\"primary\" type=\"filled\"> ← Volver</vs-button>\r\n\r\n                  <v-select v-model=\"unidadSelectedFiltrar\" class=\"mr-2\" :options=\"unidadesFiltrar\" @input=\"filtrarPreguntasxUnidad()\" style=\"width: 180px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n                  <v-select v-model=\"tipoSelected\" class=\"mr-2\" :options=\"tipos\" @input=\"filtrarTipos()\" style=\"width: 250px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n                  <v-select v-model=\"bancoSelected\" class=\"mr-2\" :options=\"bancos\" @input=\"filtrarBancos()\" style=\"width: 250px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n              </template>\r\n\r\n              <template slot=\"thead\">\r\n              <vs-th width=\"60%\" sort-key=\"descripcion\">Pregunta</vs-th>\r\n              <vs-th width=\"20%\" sort-key=\"tipo\">Tipo</vs-th>\r\n              <vs-th width=\"20%\">Acciones</vs-th>\r\n              </template>\r\n\r\n              <template slot-scope=\"{data}\">\r\n              <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n              <vs-td :data=\"data[indextr].descripcion\">\r\n                  Tema: {{ data[indextr].nombre_tema }} <br>\r\n                  {{ data[indextr].descripcion }}\r\n                  <img v-if=\"data[indextr].img_pregunta!='' && data[indextr].img_pregunta!='null' && data[indextr].img_pregunta!=null\" v-bind:src=\"$data_url+'archivos/img/img_preguntas/'+data[indextr].img_pregunta\" class=\"img-responsive\" width=\"100px\" style=\"border-radius: 5px;\">\r\n\r\n                  <vs-collapse>\r\n                  <vs-collapse-item>\r\n                      <div slot=\"header\">\r\n                          Opciones\r\n                      </div>\r\n                      <div class=\"mb-5\" :key=\"indexitem\" v-for=\"(item, indexitem) in data[indextr].opciones\">\r\n                      <div style=\"width: 100%; font-size: 12px; color: #0DCD88;\" v-if=\"item.tipo===1\">Respuesta correcta<br></div>\r\n                      <div style=\"width: 100%; font-size: 12px; color: #FD5858;\" v-else>Respuesta incorrecta<br></div>\r\n                      <div style=\"width: 100%\"> {{ item.opcion }}<br></div>\r\n                      <div style=\"width: 100%\" ><img v-if=\"item.img_opcion!='' && item.img_opcion!='null' && item.img_opcion!=null\" v-bind:src=\"$data_url+'archivos/img/img_preguntas/'+item.img_opcion\" class=\"img-responsive\" style=\"border-radius: 5px;\" width=\"100px\"></div>\r\n                      </div>\r\n                  </vs-collapse-item>\r\n                  </vs-collapse>\r\n              </vs-td>\r\n\r\n              <vs-td :data=\"data[indextr].nombre_tipo\">\r\n                  {{data[indextr].clasificacion}}<br>\r\n                  <b>Puntaje:</b> {{data[indextr].puntaje_pregunta}}<br>\r\n                  <b>Tipo:</b> {{data[indextr].nombre_tipo}}\r\n              </vs-td>\r\n\r\n              <vs-td :data=\"data[indextr].id\">\r\n                  <vs-button @click=\"cargarPregunta(data[indextr], data[indextr])\" size=\"small\" style=\"font-size: 13px;\" color=\"success\" type=\"filled\">Agregar</vs-button>\r\n              </vs-td>\r\n\r\n              </vs-tr>\r\n              </template>\r\n          </vs-table>\r\n\r\n          <div class=\"mb-6 mt-5\" color=\"#842993\" v-if=\"preguntas==0\">\r\n              <vs-button @click=\"popupSelecPreg=false; popupEditEval=true;\" class=\"mr-2\" size=\"small\" style=\"font-size: 14px;\" color=\"primary\" type=\"filled\"> ← Volver</vs-button>\r\n\r\n              <v-select v-model=\"unidadSelectedFiltrar\" class=\"mr-2\" :options=\"unidadesFiltrar\" @input=\"filtrarPreguntasxUnidad()\" style=\"display: inline-block; width: 180px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n              <v-select v-model=\"tipoSelected\" class=\"mb-6\" :options=\"tipos\" @input=\"filtrarTipos()\" style=\"width: 250px; min-width: 60px; display: inline-block;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n              <v-select v-model=\"bancoSelected\" class=\"mr-2\" :options=\"bancos\" @input=\"filtrarBancos()\" style=\"display: inline-block; width: 250px; min-width: 60px;\" :dir=\"$vs.rtl ? 'rtl' : 'ltr'\" />\r\n\r\n              <div class=\"w-full mt-6\" align=\"center\" style=\"height: 700px;\" v-if=\"unidadSelected===''\">Seleccione una unidad</div>\r\n\r\n              <div class=\"w-full mt-6\" align=\"center\" style=\"height: 700px;\" v-else>No existen preguntas para esta unidad.</div>\r\n\r\n              <div class=\"w-full mt-6\" align=\"center\" style=\"height: 700px;\" v-if=\"tipoSelected==='' && unidadSelected!=''\">Seleccione un tipo</div>\r\n\r\n              <div class=\"w-full mt-6\" align=\"center\" style=\"height: 700px;\" v-else>No existen preguntas para el tipo seleccionado</div>\r\n          </div>\r\n\r\n      </vs-popup>\r\n    </div>\r\n    <!----fin modal preguntas--->\r\n    <!--========FIN NUEVOS MODALES==========-->\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport crearPreguntas from './PreguntasComponent.vue'\r\nimport flatPickr from 'vue-flatpickr-component'\r\nimport 'flatpickr/dist/flatpickr.css';\r\nimport Vue from 'vue'\r\nimport axios from 'axios'\r\nimport vSelect from 'vue-select'\r\nimport moment from 'moment'\r\nimport VueRouter from 'vue-router'\r\nimport $ from 'jquery'\r\nexport default {\r\n    data() {\r\n        return {\r\n            fileName: null,\r\n            formats:['xls', 'xlsx', 'csv', 'txt'],\r\n            cellAutoWidth: true,\r\n            selectedFormat: 'xls',\r\n            activePrompt: false,\r\n            popupGrupos: false,\r\n\r\n            evaluaciones: [],\r\n            evaluacion: {\r\n                nombre: '',\r\n                asignatura: '',\r\n                descripcion: '',\r\n                fecha_inicio: '',\r\n                fecha_fin: '',\r\n                estado: '',\r\n                puntos: '',\r\n                duracion: '',\r\n            },\r\n            preguntas: [], //preguntas disponibles para cada evaluacion\r\n            pregunta: {\r\n                descripcion: '',\r\n                respuesta: '',\r\n                opcion1: '',\r\n                opcion2: '',\r\n                opcion3: ''\r\n            },\r\n            preguntasEvaluaciones: [], //preguntas cargadas a las evaluaciones\r\n            preguntaEvaluacion: {\r\n                descripcion: '',\r\n                respuesta: '',\r\n                opcion1: '',\r\n                opcion2: '',\r\n                opcion3: ''\r\n            },\r\n            preguntasEvaluacionesResponder: [],\r\n            preguntaEvaluacioneResponder: {\r\n                descripcion: '',\r\n                id_tema: '',\r\n                respuesta: '',\r\n                opcion1: '',\r\n                opcion2: '',\r\n                opcion3: '',\r\n                img_pregunta: '',\r\n                img_respuesta: '',\r\n                img_opcion1: '',\r\n                img_opcion2: '',\r\n                img_opcion3: ''\r\n            },\r\n            asignaturas: [],\r\n            asignatura: {id: '', label: ''},\r\n            asignaturaSelected: {id: '', label: ''},\r\n            editarActivo: false,\r\n            date: new Date().toJSON(),\r\n            datetime: null,\r\n\r\n            agregarActivo: false,\r\n            popupEditEval: false,\r\n            popupSelecPreg: false,\r\n            popupResolver: false,\r\n            estado_evaluacion:['inactiva'],\r\n            evalSelected: [],\r\n            pregSelected: [],\r\n            'tableList': [\r\n                'vs-th: Component',\r\n                'vs-tr: Component',\r\n                'vs-td: Component',\r\n                'thread: Slot',\r\n                'tbody: Slot',\r\n                'header: Slot'\r\n            ],\r\n            usuario: [],\r\n            docente: null,\r\n            nombre_docente: null,\r\n            apellido_docente: null,\r\n            active1: true,\r\n            calificaciones: [],\r\n            calificacionesSelected: [],\r\n            evaluacionestabla: [],\r\n            respuestas: [],\r\n            estudiantes: [],\r\n            alumnos: [],\r\n            urlOrigen: '',\r\n            id_evaluacion: '',\r\n            guardadoActivo: false,\r\n            unidadSelectedFiltrar: '',\r\n            unidSelect: [],\r\n            unidadesFiltrar: [],\r\n            unidadSelected: [],\r\n            unidades: [\r\n                { id: \"1\", label: \"Unidad 1\" },\r\n                { id: \"2\", label: \"Unidad 2\" },\r\n                { id: \"3\", label: \"Unidad 3\" },\r\n                { id: \"4\", label: \"Unidad 4\" },\r\n                { id: \"5\", label: \"Unidad 5\" },\r\n                { id: \"6\", label: \"Unidad 6\" }\r\n            ],\r\n            tipoSelected: '',\r\n            tipos: [\r\n                { id: \"1\", label: \"Opción múltiple\", }, { id: \"2\", label: \"Respuesta cerrada\", }, { id: \"3\", label: \"Verdadero/Falso\", }, { id: \"5\", label: \"Selección simple\"}, { id: \"6\", label: \"Respuesta abierta\" }\r\n            ],\r\n            tiposeval:[],\r\n            tipoevaluacionselect:'',\r\n            grupo_selected:'',\r\n            grupo_opciones:[\r\n                {id:'1',label:'1 grupo'},\r\n                {id:'2',label:'2 grupos'},\r\n                {id:'3',label:'3 grupos'},\r\n                {id:'4',label:'4 grupos'},\r\n                {id:'5',label:'5 grupos'}\r\n            ],\r\n            cant_grupos_select:'',\r\n            radios1: 1,\r\n            grupoEstudianteSelec: '',\r\n            gruposEstudiantes: [\r\n                {id:'1',label:'Grupo 1'},\r\n                {id:'2',label:'Grupo 2'},\r\n                {id:'3',label:'Grupo 3'},\r\n                {id:'4',label:'Grupo 4'},\r\n                {id:'5',label:'Grupo 5'}\r\n            ],\r\n            estudiantesEval: [],\r\n            activePromptGrupo: false,\r\n            textoConfirmgrup: '',\r\n            puntajeTotalGrupo: 0,\r\n            popupEvalAleatoria: false,\r\n            tipospreguntas: [],\r\n            configdateTimePicker: {\r\n                enableTime: true,\r\n                dateFormat: 'Y-m-d H:i:s'\r\n            },\r\n            bancoSelected: {id:'3',label:'Ambas'},\r\n            bancos: [\r\n                {id:'1',label:'Preguntas de Prolipa'},\r\n                {id:'2',label:'Solo mis preguntas'},\r\n                {id:'3',label:'Ambas'},\r\n            ],\r\n            cant_gruposSelec: [1],\r\n            cant_preguntast1: 0,\r\n            cant_preguntast2: 0,\r\n            cant_preguntast3: 0,\r\n            cant_preguntast4: 0,\r\n            cant_preguntast5: 0,\r\n            puntajeIngresado: 0,\r\n            tiposPregAl: [1,2,3,5,6],\r\n            puntajetipo: [1,2,0.5,1,2],\r\n            cantidadesField: [0,0,0,0,0],\r\n            indexCantField: 0,\r\n            evalElimin: [],\r\n            activePromptEliminar: false,\r\n            local_idasignatura: '',\r\n            local_nombreasignatura: '',\r\n            popupCrearPreguntas: false,\r\n        }\r\n    },\r\n    components: {\r\n        'v-select': vSelect,\r\n        'crear-preguntas': crearPreguntas,\r\n        flatPickr\r\n    },\r\n    created() {\r\n        let me = this;\r\n        me.usuario = JSON.parse(localStorage.getItem('usuario'));\r\n        me.docente = me.usuario.idusuario\r\n        me.nombre_docente = me.usuario.nombres\r\n        me.apellido_docente = me.usuario.apellidos\r\n        var urlBack = window.location.href\r\n        var urlV = urlBack.split('/')\r\n        me.urlOrigen = urlV[0]+'/'+urlV[1]+'/'+urlV[2]\r\n\r\n        me.local_idasignatura = localStorage.idasignatura\r\n        me.local_nombreasignatura = localStorage.nombreasignatura\r\n        console.log(me.local_idasignatura+'--'+me.local_nombreasignatura);\r\n\r\n        me.getEvalDoc();\r\n        this.$http.get(this.$server_url+'asignaturasDoc/'+me.docente).then(res => {\r\n            me.asignaturas = res.data;\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        }),\r\n        this.$http.get(this.$server_url+'tipoevaluacion').then(res=>{\r\n            me.tiposeval = res.data\r\n        })\r\n        .catch(function (error){\r\n            console.log(error)\r\n        })\r\n    },\r\n    methods: {\r\n        exportToExcel () {let headerTitle = ['Cédula', 'Estudiante'];\r\n            let headerVal = ['Cedula', 'Estudiante'];\r\n\r\n            for (let index = 0; index < this.alumnos[0].total.length; index++) {\r\n                headerTitle.push(\"Evaluación\" + index)\r\n                headerVal.push(\"Evaluacion\" + index)\r\n            }\r\n\r\n            import('@/vendor/Export2Excel').then(excel => {\r\n                const list = this.respuestas\r\n                const data = this.formatJson(headerVal, list)\r\n                excel.export_json_to_excel({\r\n                    header: headerTitle,\r\n                    data,\r\n                    filename: this.fileName,\r\n                    autoWidth: this.cellAutoWidth,\r\n                    bookType: this.selectedFormat\r\n                })\r\n                this.clearFields()\r\n                this.guardarActivo = '';\r\n                this.generarActivo = ' ';\r\n                this.textAlertCant = '';\r\n                this.cantidad = '';\r\n                this.codigoSelected = [];\r\n            })\r\n        },\r\n        formatJson(filterVal, jsonData) {\r\n            return jsonData.map(v => filterVal.map(j => {\r\n                return v[j]\r\n            }))\r\n        },\r\n        clearFields() {\r\n            this.fileName = ''\r\n            this.cellAutoWidth = true\r\n            this.selectedFormat = 'xls'\r\n        },\r\n        onResize() {\r\n            if (window.innerWidth < 769)\r\n                this.isMobile = true;\r\n            else\r\n                this.isMobile = false;\r\n        },\r\n        getEvalDoc(){\r\n            let me = this\r\n            me.$vs.loading()\r\n            let formData1 = new FormData();\r\n            formData1.append('docente', me.docente);\r\n            formData1.append('codigo', localStorage.codigo);\r\n            me.$http.post(this.$server_url+'evaluacionesDocente', formData1).then(res => {\r\n                me.evaluaciones = res.data;\r\n                me.$vs.loading.close()\r\n                // console.log(me.evaluaciones)\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        limpiar() {\r\n            this.evaluacion.nombre = '';\r\n            this.evaluacion.duracion = '';\r\n            this.evaluacion.descripcion = '';\r\n            this.evaluacion.fecha_inicio = '';\r\n            this.evaluacion.fecha_fin = '';\r\n            this.evaluacion.estado = '';\r\n            this.evaluacion.puntos = '';\r\n            this.preguntas = [];\r\n            this.preguntasEvaluaciones = [];\r\n            this.evaluacion.id = '';\r\n            this.guardadoActivo = false;\r\n            this.unidadSelected = [];\r\n            this.grupo_selected = '';\r\n            this.radios1 = 1;\r\n            this.puntajeIngresado = 0;\r\n            this.cantidadesField = [0,0,0,0,0];\r\n            this.id_evaluacion = '';\r\n        },\r\n        agregar() {\r\n            let me = this;\r\n            if ( me.evaluacion.puntos === '' || me.evaluacion.duracion === '' || me.tipoevaluacionselect.id === '' || me.grupo_selected.id === '' || me.unidadSelected.id === '' ){\r\n                me.$vs.notify({\r\n                    text:'Debe completar todos los campos antes de guardar',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if(me.evaluacion.fecha_inicio == \"\" || me.evaluacion.fecha_inicio == null || me.evaluacion.fecha_inicio == undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar una fecha de inicio',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if(me.evaluacion.fecha_fin == \"\" || me.evaluacion.fecha_fin == null || me.evaluacion.fecha_fin == undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar una fecha fin',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if(me.grupo_selected === '' || me.grupo_selected === null || me.grupo_selected === undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar la cantidad de grupos',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            var idunidades = [];\r\n            for( var i=0; i<this.unidadSelected.length; i++ ){\r\n                idunidades.push(this.unidadSelected[i].id);\r\n            }\r\n\r\n            me.$vs.loading()\r\n            let estado;\r\n            if( me.evaluacion.estado == true ){\r\n                estado = 1;\r\n            }else{\r\n                estado = 0;\r\n            }\r\n\r\n            let descripVal = me.evaluacion.descripcion;\r\n            if( me.evaluacion.descripcion === '' || me.evaluacion.descripcion === null || me.evaluacion.descripcion === 'null' ){\r\n                descripVal = ' '\r\n            }\r\n\r\n            let formData = new FormData();\r\n                formData.append('nombre', me.evaluacion.nombre);\r\n                formData.append('asignatura',  me.local_idasignatura);\r\n                formData.append('descripcion', descripVal);\r\n                formData.append('puntos', me.evaluacion.puntos);\r\n                formData.append('duracion', me.evaluacion.duracion);\r\n                formData.append('fecha_inicio', me.evaluacion.fecha_inicio);\r\n                formData.append('fecha_fin', me.evaluacion.fecha_fin);\r\n                formData.append('estado', estado);\r\n                formData.append('docente', me.docente);\r\n                formData.append('codigo', localStorage.codigo);\r\n                formData.append('idtipoeval', me.tipoevaluacionselect.id);\r\n                formData.append('id_grupo_opciones', me.grupo_selected.id);\r\n                formData.append('cant_unidades', idunidades);\r\n            me.$http.post(this.$server_url+'evaluacion', formData)\r\n                .then(res => {\r\n                    me.getEvalDoc();\r\n                    //me.clasifGrupEstEval(me.evaluacion);\r\n                    me.$vs.loading.close()\r\n                    me.unidSelect = idunidades\r\n                    me.agregarActivo = false\r\n                    me.guardadoActivo = true\r\n                    me.editarActivo = true\r\n                    me.evaluacion.id = res.data.id\r\n                    me.id_evaluacion = res.data.id\r\n                    //me.popupEditEval = false\r\n                    me.cant_gruposSelec = []\r\n                    for( var i=1; i<=me.grupo_selected.id; i++ ){\r\n                        me.cant_gruposSelec.push(i)\r\n                    }\r\n                    me.$vs.notify({\r\n                    text:'Evaluación guardada exitosamente',\r\n                    color:'success',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'})\r\n                })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error+' agregar');\r\n            })\r\n\r\n        },\r\n        openConfirmEliminar(item){\r\n            let me = this;\r\n            me.evalElimin = item\r\n            me.activePromptEliminar = true;\r\n        },\r\n        eliminarEvaluacion() {\r\n            let me = this;\r\n            me.$http.get(this.$server_url+`eliminar_evaluacion/${me.evalElimin.id}`).then(res => {\r\n                if( res.data === 0 ){\r\n                    me.$vs.notify({\r\n                    text:'No se puede eliminar esta evaluación porque ya esta siendo utilizada por sus estudiantes.',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                }else{\r\n                    me.getEvalDoc()\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.notify({\r\n                    text:'No se puede eliminar esta evaluación porque ya esta siendo utilizada por sus estudiantes!'+error,\r\n                    color:'danger',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'})\r\n            })\r\n        },\r\n        editarFormulario(item) {\r\n            let me = this;\r\n            me.cantidadesField = [0,0,0,0,0];\r\n            me.radios1 = 1;\r\n            me.asignaturaSelected = {id: item.id_asignatura, label: item.nombreasignatura};\r\n            me.evaluacion.nombre = item.nombre_evaluacion;\r\n            me.evaluacion.descripcion = item.descripcion;\r\n            me.evaluacion.puntos = item.puntos;\r\n            me.evaluacion.fecha_inicio = item.fecha_inicio;\r\n            me.evaluacion.fecha_fin = item.fecha_fin;\r\n            me.evaluacion.duracion = item.duracion;\r\n            me.evaluacion.estado = item.estado;\r\n            me.evaluacion.id = item.id;\r\n            me.tipoevaluacionselect = {id: item.id_tipoeval, label: item.tipo_nombre};\r\n            me.grupo_selected = {id: item.grupos_evaluacion, label: item.grupos_evaluacion + ' grupos'};\r\n            me.cant_gruposSelec = []\r\n            for( var i=1; i<=me.grupo_selected.id; i++ ){\r\n                me.cant_gruposSelec.push(i)\r\n            }\r\n            me.editarActivo = true; //activa el form editar\r\n\r\n            me.unidSelect = item.cant_unidades.split(',');\r\n            me.cant_grupos_select = me.grupo_selected.id; //cantidad de grupos o filas de evaluaciones desde la base\r\n            me.unidadSelected=[];\r\n            for(var i=0; i<me.unidSelect.length; i++){\r\n               me.unidadSelected.push({id: me.unidSelect[i], label: 'Unidad '+me.unidSelect[i]});\r\n            }\r\n\r\n            me.verPreguntasxEval(item.id);\r\n            me.verEstudiantesEval();\r\n        },\r\n        openConfirmgrupo(item){\r\n            let me = this;\r\n            this.popupEditEval=false;\r\n            if (me.grupo_selected.id < me.cant_grupos_select) {\r\n               me.textoConfirmgrup = 'Ha seleccionado un grupo menor de evaluaciones, las preguntas asignadas a los grupos restantes, se ocultarán'\r\n            }else{\r\n                me.textoConfirmgrup = 'Ha seleccionado un grupo mayor de evaluaciones, debe asignar preguntas a los nuevos grupos.';\r\n            }\r\n            me.activePromptGrupo = true;\r\n        },\r\n        editarEvaluacion(item) {\r\n            let me = this;\r\n            item = me.evaluacion;\r\n            if(me.grupo_selected === '' || me.grupo_selected === null || me.grupo_selected === undefined){\r\n                me.$vs.notify({\r\n                    text:'Debe seleccionar la cantidad de grupos',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n            if (me.evaluacion.fecha_inicio === '' || me.evaluacion.fecha_fin === '' || me.evaluacion.puntos === '' || me.evaluacion.duracion === '' ||  me.tipoevaluacionselect === null ||  me.tipoevaluacionselect === '' || me.grupo_selected.id === '' ) {\r\n                me.$vs.notify({\r\n                    text:'Debe completar todos los campos antes de guardar',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                return;\r\n            }\r\n\r\n\r\n            let idunidades = [];\r\n            for( var i=0; i<this.unidadSelected.length; i++ ){\r\n                idunidades.push(this.unidadSelected[i].id);\r\n            }\r\n\r\n            me.$vs.loading()\r\n            let estado;\r\n            if( me.evaluacion.estado == true ){\r\n                estado = 1;\r\n            }else{\r\n                estado = 0;\r\n            }\r\n\r\n            let descripVal = me.evaluacion.descripcion;\r\n            if( me.evaluacion.descripcion === '' || me.evaluacion.descripcion === null || me.evaluacion.descripcion === 'null' ){\r\n                descripVal = ' '\r\n            }\r\n\r\n            let formData = new FormData();\r\n                formData.append('id', item.id);\r\n                formData.append('nombre', me.evaluacion.nombre);\r\n                formData.append('asignatura',  me.local_idasignatura);\r\n                formData.append('descripcion', descripVal);\r\n                formData.append('puntos', me.evaluacion.puntos);\r\n                formData.append('duracion', me.evaluacion.duracion);\r\n                formData.append('fecha_inicio', me.evaluacion.fecha_inicio);\r\n                formData.append('fecha_fin', me.evaluacion.fecha_fin);\r\n                formData.append('estado', estado);\r\n                formData.append('docente', me.docente);\r\n                formData.append('codigo', localStorage.codigo);\r\n                formData.append('idtipoeval', me.tipoevaluacionselect.id);\r\n                formData.append('id_grupo_opciones', me.grupo_selected.id);\r\n                formData.append('cant_unidades', idunidades);\r\n\r\n            me.$http.post(this.$server_url+'evaluacion', formData).then(res => {\r\n                const index = me.evaluaciones.findIndex(\r\n                    evaluacionBuscar => evaluacionBuscar.id === res.data.id)\r\n                me.evaluacion[index] = res.data;\r\n                me.getEvalDoc();\r\n                //me.clasifGrupEstEval(item);\r\n                me.editarActivo = false; //desactiva el form editar\r\n                //me.popupEditEval = false\r\n                me.cant_gruposSelec = []\r\n                for( var i=1; i<=me.grupo_selected.id; i++ ){\r\n                    me.cant_gruposSelec.push(i)\r\n                }\r\n                me.$vs.loading.close()\r\n                me.$vs.notify({\r\n                text:'Evaluación editada exitosamente',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        verPreguntas() {\r\n            let me = this;\r\n            me.preguntas = [];\r\n            // me.id_evaluacion = id;\r\n            me.tipoSelected = '';\r\n            me.$vs.loading()\r\n            me.unidadesFiltrar=[];\r\n\r\n            for(var i=0; i<me.unidadSelected.length; i++){\r\n               me.unidadesFiltrar.push({id: me.unidadSelected[i].id, label: 'Unidad '+me.unidadSelected[i].id});\r\n            }\r\n            me.unidadSelectedFiltrar = {id: me.unidadSelected[0].id, label: 'Unidad '+me.unidadSelected[0].id}\r\n            me.filtrarPreguntasxUnidad()\r\n        },\r\n        cargarPregunta(item, index) {\r\n            let me = this;\r\n            me.$vs.loading()\r\n            let formData = new FormData();\r\n                formData.append('id_evaluacion', me.evaluacion.id);\r\n                formData.append('id_pregunta', item.id);\r\n                formData.append('grupo', me.radios1);\r\n            me.$http.post(this.$server_url+'pregEvaluacion', formData)\r\n            .then(res => {\r\n\r\n\r\n                me.filtrarBancos()\r\n\r\n                /*if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n                    console.log('no hay preguntas para mostrar');\r\n                }else{\r\n                    if( me.tipoSelected.id === '' || me.tipoSelected === null || me.tipoSelected.id === undefined){\r\n                        me.filtrarPreguntasxUnidad()\r\n                    }else{\r\n                        me.filtrarTipos()\r\n                    }\r\n                }*/\r\n\r\n                me.verPreguntasxEval(me.evaluacion.id);\r\n\r\n                me.$vs.notify({\r\n                text:'Pregunta asignada a esta evaluación',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        quitarPregunta(index, id) {\r\n            let me = this;\r\n            me.$vs.loading()\r\n            me.$http.get(this.$server_url+`quitarPregEvaluacion/${id}`).then(() => {\r\n                me.verPreguntasxEval(index.id_evaluacion);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        backEndDateFormat: function(date) {\r\n        \treturn moment(date, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\r\n        },\r\n        removeItemFromArr (arr, item) {\r\n            const i = arr.indexOf(item)\r\n            arr.splice(i, 1)\r\n        },\r\n        irPreguntas(){\r\n            if(this.id_evaluacion===''){\r\n                this.id_evaluacion = 0\r\n            }\r\n\r\n            localStorage.id_desde_eval = this.evaluacion.id\r\n            localStorage.grupo_desde_eval = this.radios1\r\n            localStorage.crea_desde_eval = true\r\n\r\n            this.popupSelecPreg = false\r\n            this.popupCrearPreguntas = true\r\n            // window.location.href = this.urlOrigen+'/preguntas/'+this.id_evaluacion;\r\n        },\r\n        verCalificaciones(){\r\n            let me = this;\r\n            me.$vs.loading()\r\n            me.$http.get(this.$server_url+`verCalificacionEval/${localStorage.codigo}`).then(response => {\r\n                me.respuestas = []\r\n                var respuesta = response.data;\r\n                me.estudiantes = response.data;\r\n\r\n                if (response.data.length != 0) {\r\n                    me.alumnos = response.data.items;\r\n                    me.alumnos.forEach(element => {\r\n                        var cal = new Object();\r\n                        cal.idusuario = element.usuario_idusuario\r\n                        cal.Cedula = element.cedula\r\n                        cal.Estudiante = element.nombres + \" \" + element.apellidos\r\n                        cal.calificaciones = new Object();\r\n                        for (let index = 0; index < element.total.length; index++) {\r\n                            try {\r\n                                if(element.calificaciones[index].calificacion===null){\r\n                                    element.calificaciones[index].calificacion = 0\r\n                                    cal.calificaciones[index] = element.calificaciones[index].calificacion+'/'+element.calificaciones[index].puntos\r\n                                }else{\r\n                                    cal.calificaciones[index] = element.calificaciones[index].calificacion+'/'+element.calificaciones[index].puntos\r\n                                }\r\n                                eval(\"cal.Evaluacion\" + index + \"=\" + element.calificaciones[index].calificacion);\r\n\r\n                            } catch (error) {\r\n                                element.calificaciones[index].calificacion = 0\r\n                                cal.calificaciones[index] = element.calificaciones[index].calificacion+'/'+element.calificaciones[index].puntos\r\n                                eval(\"cal.Evaluacion\" + index + \"=\" + 0);\r\n                            }\r\n                        }\r\n                        me.respuestas.push(cal)\r\n                    });\r\n                }\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                  console.log(error);\r\n            })\r\n\r\n            me.$http.get(this.$server_url+`verEvalCursoExport/${localStorage.codigo}`).then(res => {\r\n                me.evaluacionestabla = res.data;\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n\r\n        },\r\n        filtrarPreguntasxUnidad(){\r\n            let me = this;\r\n            if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n                return;\r\n            }\r\n            me.bancoSelected = {id:'3',label:'Ambas'}\r\n\r\n            var tipo;\r\n            if( me.tipoSelected===null || me.tipoSelected==='' ){\r\n                tipo = 'null'\r\n            }else{\r\n                tipo = me.tipoSelected.id\r\n            }\r\n\r\n            me.$vs.loading()\r\n            const formData = new FormData();\r\n                formData.append('evaluacion',       me.id_evaluacion);\r\n                formData.append('unidad',           me.unidadSelectedFiltrar.id);\r\n                formData.append('grupo',            me.radios1);\r\n                formData.append('tipo',             tipo);\r\n                formData.append('idusuario',        me.usuario.idusuario)\r\n                formData.append('usuario',          me.usuario.idusuario)\r\n                formData.append('id_group',         me.usuario.id_group)\r\n                formData.append('institucion_id',   me.usuario.institucion_idInstitucion)\r\n                formData.append('preguntasAll',     1)\r\n                this.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n                me.preguntas = res.data;\r\n                console.log(\"uwu\",me.preguntas)\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error);\r\n            })\r\n\r\n        },\r\n        filtrarTipos(){\r\n            let me = this;\r\n            if( me.unidadSelectedFiltrar === '' || me.unidadSelectedFiltrar === null || me.unidadSelectedFiltrar.id === undefined){\r\n                return;\r\n            }\r\n\r\n            if( me.tipoSelected === '' || me.tipoSelected === null || me.tipoSelected.id === undefined){\r\n                me.filtrarPreguntasxUnidad()\r\n                return;\r\n            }\r\n\r\n            me.$vs.loading()\r\n            const formData = new FormData();\r\n                formData.append('evaluacion',   me.id_evaluacion);\r\n                formData.append('unidad',       me.unidadSelectedFiltrar.id);\r\n                formData.append('tipo',         me.tipoSelected.id);\r\n                formData.append('grupo',        me.radios1);\r\n                formData.append('idusuario',    me.usuario.idusuario)\r\n                formData.append('usuario',      me.usuario.idusuario)\r\n                formData.append('id_group',     me.usuario.id_group)\r\n                formData.append('institucion_id',   me.usuario.institucion_idInstitucion)\r\n                formData.append('preguntasAll', 1)\r\n                me.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n            // me.$http.post(this.$server_url+'preguntasevaltipounidad', formData).then(res => {\r\n                me.preguntas = res.data;\r\n                console.log(\"uwu2\",me.preguntas)\r\n                me.bancoSelected = {}\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n\r\n        },\r\n        verPreguntasxEval(id_evaluacion){\r\n          let me = this;\r\n          me.verTiposPreguntas()\r\n          let formData = new FormData();\r\n          formData.append('evaluacion', id_evaluacion);\r\n          formData.append('grupo', me.radios1);\r\n          me.$vs.loading()\r\n          me.$http.post(this.$server_url+`pregEvaluacionGrupo`, formData).then(res => {\r\n          me.preguntasEvaluaciones = res.data;\r\n          if( me.preguntasEvaluaciones.items === undefined ){\r\n            console.log('no existen preguntas para el grupo seleccionado');\r\n          }else{\r\n            me.puntajeTotalGrupo = 0;\r\n            for(var i=0; i<me.preguntasEvaluaciones.items.length; i++){\r\n              me.puntajeTotalGrupo += me.preguntasEvaluaciones.items[i].puntaje_pregunta;\r\n            }\r\n          }\r\n            me.$vs.loading.close()\r\n          })\r\n          .catch(function (error) {\r\n            me.$vs.loading.close()\r\n            console.log(error+'verPreguntasxEval');\r\n          })\r\n        },\r\n        verEstudiantesEval(){\r\n            let me = this;\r\n            me.$vs.loading()\r\n            me.$http.get(this.$server_url+`verEstCursoEval/${localStorage.codigo}`).then(res => {\r\n                me.estudiantesEval = res.data;\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        asignarGrupoEst(item){\r\n            let me = this;\r\n            let formData = new FormData();\r\n                formData.append('estudiante', item.idusuario);\r\n                formData.append('grupo', item.grupo);\r\n                formData.append('codigo', localStorage.codigo);\r\n            me.$http.post(this.$server_url+`asignarGrupoEst`, formData).then(res => {\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        /*clasifGrupEstEval(item){\r\n            let me = this;\r\n            let estudiantes = [];\r\n            for( var i=0; i<me.estudiantesEval.length; i++ ){\r\n                estudiantes.push(me.estudiantesEval[i].idusuario);\r\n            }\r\n            estudiantes.sort(function() { return Math.random() - 0.5 });\r\n            //alert(estudiantes);\r\n            let formData = new FormData();\r\n                formData.append('grupos', me.grupo_selected.id);\r\n                formData.append('codigo', localStorage.codigo);\r\n                formData.append('cantidad', me.estudiantesEval.length);\r\n                formData.append('estudiantes', estudiantes);\r\n            this.$http.post(`http://localhostpEstEval`, formData).then(res => {\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },*/\r\n        irRevision(item, val){\r\n            localStorage.removeItem('nombresImprimir')\r\n            localStorage.setItem('id_evalRevisar', item.id);\r\n            localStorage.setItem('previsualizar_eval', val);\r\n            //this.$router.push('/revisarevaluacion')\r\n\r\n            window.location.href = this.urlOrigen+'/revisarevaluacion';\r\n        },\r\n        contarPuntosIngresados(){\r\n            let me = this\r\n            me.puntajeIngresado = 0;\r\n            var cantField = 0;\r\n            for( var i=0; i<me.cantidadesField.length; i++ ){\r\n                if( Number.isNaN(parseInt(me.cantidadesField[i])) ){\r\n                    cantField = 0;\r\n                }else{\r\n                    cantField = parseInt(me.cantidadesField[i])\r\n                }\r\n                me.puntajeIngresado += (me.puntajetipo[i]*parseInt(cantField))\r\n            }\r\n        },\r\n        cargarPreguntasAleatorias(){\r\n            let me = this\r\n            me.puntajeIngresado = 0;\r\n            var cantField = 0;\r\n            for( var i=0; i<me.cantidadesField.length; i++ ){\r\n\r\n                if( Number.isNaN(parseInt(me.cantidadesField[i])) ){\r\n                    cantField = 0;\r\n                }else{\r\n                    cantField = parseInt(me.cantidadesField[i])\r\n                }\r\n                me.puntajeIngresado += (me.puntajetipo[i]*parseInt(cantField))\r\n            }\r\n\r\n            if( me.puntajeIngresado <= 0 ){\r\n                return\r\n            }\r\n\r\n            if( me.puntajeIngresado > me.evaluacion.puntos || (me.puntajeTotalGrupo+me.puntajeIngresado) > me.evaluacion.puntos ){\r\n                me.$vs.notify({\r\n                text:'El puntaje de las preguntas excede al puntaje de esta evaluación',\r\n                color:'warning',\r\n                iconPack: 'feather',\r\n                icon:'icon-alert-triangle'})\r\n                return\r\n            }\r\n\r\n            me.$vs.loading()\r\n            let cantidad = me.cantidadesField\r\n            let unidades = []\r\n\r\n            for( var i=0; i<me.unidadSelected.length; i++ ){\r\n                unidades.push(me.unidadSelected[i].id)\r\n            }\r\n\r\n            let formData = new FormData();\r\n                formData.append('evaluacion', me.evaluacion.id);\r\n                formData.append('puntos', me.evaluacion.puntos);\r\n                formData.append('grupos', me.grupo_selected.id);\r\n                formData.append('cant_pregs', cantidad);\r\n                formData.append('unidades', unidades);\r\n                formData.append('tipos', me.tiposPregAl);\r\n                formData.append('usuario', me.usuario.idusuario);\r\n                formData.append('id_group', me.usuario.id_group);\r\n                formData.append('institucion_id', me.usuario.institucion_idInstitucion);\r\n            me.$http.post(this.$server_url+`cargarPregsRand`, formData).then(res => {\r\n                me.popupEvalAleatoria = false\r\n                me.verPreguntasxEval(me.evaluacion.id)\r\n                me.$vs.notify({\r\n                text:'Preguntas cargadas correctamente',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n                me.cantidadesField  = [0,0,0,0,0]\r\n                me.puntajeIngresado = 0\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        },\r\n        filtrarBancos(){\r\n            let me = this\r\n            if(me.unidadSelectedFiltrar==='' || me.unidadSelectedFiltrar===null || me.unidadSelectedFiltrar.id===undefined){\r\n                return;\r\n            }\r\n\r\n            if( me.bancoSelected === null ){\r\n                var bancoSel = 3\r\n            }else{\r\n                var bancoSel = me.bancoSelected.id;\r\n            }\r\n\r\n            switch(bancoSel) {\r\n            case '1':\r\n                me.filtrarxProlipa()\r\n                break;\r\n            case '2':\r\n                me.filtrarxDocente()\r\n                break;\r\n            default:\r\n                me.filtrarPreguntasxUnidad()\r\n            }\r\n\r\n        },\r\n        filtrarxDocente(){\r\n            let me = this\r\n            me.$vs.loading()\r\n            var tipo;\r\n            if( me.tipoSelected===null || me.tipoSelected==='' ){\r\n                tipo = 'null'\r\n            }else{\r\n                tipo = me.tipoSelected.id\r\n            }\r\n            const formData = new FormData();\r\n                formData.append('evaluacion', me.id_evaluacion);\r\n                formData.append('unidad', me.unidadSelectedFiltrar.id);\r\n                formData.append('grupo', me.radios1);\r\n                formData.append('usuario', me.usuario.idusuario);\r\n                formData.append('tipo', tipo);\r\n                formData.append('id_group', me.usuario.id_group);\r\n                formData.append('institucion_id', me.usuario.institucion_idInstitucion);\r\n                formData.append('preguntasDocentes', 1);\r\n                me.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n            // me.$http.post(this.$server_url+'preguntasxbancoDocente', formData).then(res => {\r\n                me.preguntas = res.data\r\n                console.log(\"uwu3\",me.preguntas.items.filter(p => p.id_tema == 41))\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error);\r\n            })\r\n        },\r\n        filtrarxProlipa(){\r\n            let me = this\r\n            me.$vs.loading()\r\n            var tipo;\r\n            if( me.tipoSelected === null || me.tipoSelected === '' ){\r\n                tipo = 'null'\r\n            }else{\r\n                tipo = me.tipoSelected.id\r\n            }\r\n            const formData = new FormData();\r\n            formData.append('evaluacion', me.id_evaluacion);\r\n            formData.append('unidad', me.unidadSelectedFiltrar.id);\r\n            formData.append('usuario', me.usuario.idusuario);\r\n            formData.append('grupo', me.radios1);\r\n            formData.append('tipo', tipo);\r\n            formData.append('id_group', me.usuario.id_group);\r\n            formData.append('institucion_id', me.usuario.institucion_idInstitucion);\r\n            formData.append('preguntasProlipa', 1);\r\n            me.$http.post(this.$server_url+'preguntasxunidad', formData).then(res => {\r\n            // me.$http.post(this.$server_url+'preguntasxbancoProlipa', formData).then(res => {\r\n                me.preguntas = res.data;\r\n                console.log(\"uwu4\")\r\n                me.$vs.loading.close()\r\n            })\r\n            .catch(function (error) {\r\n                me.$vs.loading.close()\r\n                console.log(error);\r\n            })\r\n        },\r\n        copiarLink(item){\r\n            let me = this\r\n            let date = new Date()\r\n            let fecha_actual = moment(date, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss')\r\n\r\n            //if( fecha_actual < item.fecha_inicio || fecha_actual > item.fecha_fin ){\r\n            if( fecha_actual > item.fecha_fin ){\r\n                me.$vs.notify({\r\n                text:'Esta evaluación aún no está disponible. Verifique las fechas de inicio y fin.',\r\n                color:'warning',\r\n                iconPack: 'feather',\r\n                icon:'icon-alert-triangle'})\r\n                return\r\n            }\r\n\r\n            if( item.estado != 1 ){\r\n                me.$vs.notify({\r\n                text:'Esta evaluación está inactiva',\r\n                color:'warning',\r\n                iconPack: 'feather',\r\n                icon:'icon-alert-triangle'})\r\n                return\r\n            }\r\n\r\n\r\n            let link = me.urlOrigen+'/responderEvaluacion/'+item.id+'-'+localStorage.codigo+'-'+me.usuario.institucion_idInstitucion\r\n            var aux = document.createElement(\"input\");\r\n            aux.setAttribute(\"value\", link);\r\n            document.body.appendChild(aux);\r\n            aux.select();\r\n\r\n            try {\r\n                var status = document.execCommand('copy');\r\n                if(!status){\r\n                    me.$vs.notify({\r\n                    text:'Error al copiar el link',\r\n                    color:'warning',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-alert-triangle'})\r\n                }else{\r\n                    me.$vs.notify({\r\n                    text:'Link copiado',\r\n                    color:'success',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'})\r\n                }\r\n            } catch (err) {\r\n                console.log('No se pudo copiar');\r\n            }\r\n\r\n            document.body.removeChild(aux);\r\n        },\r\n        verTiposPreguntas(){\r\n            let me = this\r\n            let v_unidades = []\r\n            $.each(me.unidadSelected,function(key, value){\r\n                v_unidades.push(value.id)\r\n            });\r\n\r\n            me.$http.get(this.$server_url+'tipospreguntas/' + localStorage.idasignatura + '/'+ v_unidades+'/'+me.usuario.id_group+'/'+me.usuario.institucion_idInstitucion)\r\n            .then(res=>{\r\n                me.tipospreguntas = res.data\r\n            })\r\n            .catch(function (error){\r\n                console.log(error)\r\n            })\r\n        }\r\n    },\r\n}\r\n</script>\r\n"]}]}