{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\RevisionCodigos.vue?vue&type=style&index=0&id=f0f14056&scoped=true&lang=css","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\RevisionCodigos.vue","mtime":1712682815631},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\n.tabla{\r\n  width: 100%;\r\n  margin-top: 10px;\r\n}\r\n .tabla {\r\n\r\n  border: 1px solid #D1E5F1;\r\n  padding: 2px;\r\n  border-radius: 5px;\r\n}\r\n.th1{\r\n  background-color: #60E029;\r\n  border-radius: 5px;\r\n  color:white;\r\n}\r\n.td1, .th1{\r\n padding: 10px;\r\n text-align: center;\r\n border:none;\r\n}\r\n",{"version":3,"sources":["RevisionCodigos.vue"],"names":[],"mappings":";AA8yBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RevisionCodigos.vue","sourceRoot":"src/views/codigos/components","sourcesContent":["<template>\r\n  <div>\r\n    <vs-popup title=\"Errores en excel de los codigos\" :active.sync=\"modalErrores\" style=\"padding: 0% !important;\">\r\n       <div class=\"w-full\" style=\"background: rgb(121,9,9); padding: 20px; border-radius: 5px; background: linear-gradient(90deg, rgba(121,9,9,1) 28%, rgba(255,0,48,1) 100%); color: white;\">\r\n         <div class=\"vx-row\">\r\n            <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <b>Código</b>\r\n            </div>\r\n            <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <b>Institución</b>\r\n            </div>\r\n        </div>\r\n        <vs-divider></vs-divider>\r\n        <div :key=\"index\" v-for=\"(item, index) in errores\">\r\n          <div class=\"vx-row\">\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                  <span v-if=\"item.codigo\"> {{item.codigo}} </span>\r\n              </div>\r\n          </div>\r\n        </div>\r\n       </div>\r\n    </vs-popup>\r\n    <vs-popup title=\"Códigos no encontrados\" :active.sync=\"modalCedulas\" @accept=\"recargar()\" @close=\"recargar()\" @cancel=\"recargar()\"  style=\"padding: 0% !important;\">\r\n       <div class=\"w-full\" style=\"background: rgb(235,147,25); background: linear-gradient(90deg, rgba(235,147,25,1) 28%, rgba(255,166,0,1) 100%); color: white; border-radius: 5px; padding: 10px;\">\r\n        <div class=\"vx-row\">\r\n          <div class=\"vx-col w-full\" align=\"center\">\r\n           <b>Codigos a las que no se aplicaron correctamente</b>\r\n          </div>\r\n        </div>\r\n        <vs-divider></vs-divider>\r\n        <div :key=\"index\" v-for=\"(item, index) in cedulas_no_encontradas\">\r\n          <div class=\"vx-row\">\r\n              <div class=\"vx-col w-full\" align=\"center\"> <span> {{item}} </span> </div>\r\n          </div>\r\n        </div>\r\n       </div>\r\n    </vs-popup>\r\n    <vs-popup small title=\"Confirmación\" :active.sync=\"modalConfirm\">\r\n      <div class=\"w-full mb-base\" align=\"center\">\r\n        <h4>Está seguro de aplicar estas códigos?</h4>\r\n      </div>\r\n      <div class=\"w-full\" align=\"center\">\r\n        <vs-button class=\"mb-2\" color=\"danger\" type=\"gradient\" @click=\"procesarPagos()\"> Confirmar </vs-button>\r\n      </div>\r\n    </vs-popup>\r\n    <div class=\"mb-6\" align=\"center\">\r\n      <div class=\"vx-col w-full\">\r\n        <p style=\"color:#60E029;\">\r\n          <i class=\"fa fa-file\" aria-hidden=\"true\"></i>  Revisión de codigos  <span style=\"font-weight: bold;\">(no ingrese más de 2000 registros en una sola carga.)</span>\r\n        </p>\r\n        <div v-if=\"userRoot\">\r\n          <ul class=\"flex justify-center mt-2\">\r\n            <li>\r\n              <b>Seleccione:</b>\r\n            </li>\r\n            <li>\r\n              <vs-radio v-model=\"conDevolucion\" class=\"ml-2\" vs-name=\"radios1conDevolucion\" vs-value=\"1\">Con devolución</vs-radio>\r\n            </li>\r\n            <li>\r\n              <vs-radio v-model=\"conDevolucion\" class=\"ml-2\" vs-name=\"radios1conDevolucion\" vs-value=\"0\">Sin devolución</vs-radio>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div class=\"flex\">\r\n        <div v-if=\"(tipoBodega == '1' || tipoBodega == '2')&& arregloProblemasDiagnostico.length > 0\" class=\"ml-5\" style=\"width:50%;\">\r\n          <vs-alert title=\"Archivo con inconvenientes\" color=\"danger\" active=\"true\">\r\n            <p>Existe codigos de <b>diágnostico</b> con problemas <b class=\"cursor-pointer\" style=\"background:black;color:white;padding:5px;border-radius:5px;\" @click=\"popupProblemasDiagnostico = true;\"><ion-icon name=\"code-outline\"></ion-icon> Mostrar códigos</b>\r\n            </p>\r\n          </vs-alert>\r\n        </div>\r\n      </div>\r\n      <!--RESUMEN PAQUETES-->\r\n      <div v-if=\"codigosPerdidos == true && (tipoBodega == '3')\">\r\n        <vs-card v-if=\"arregloErroresPaquetes.length > 0\">\r\n          <vs-col vs-type=\"flex\" vs-justify=\"center\" vs-align=\"center\" vs-w=\"6\">\r\n            <vs-list>\r\n              <p>Cantidad <span>{{ arregloErroresPaquetes.length }}</span></p>\r\n                <vs-list-header icon=\"supervisor_account\" title=\"Hubo problemas con algunos paquetes\"></vs-list-header>\r\n                <vs-list-item :key=\"indextr\" v-for=\"(tr, indextr) in arregloErroresPaquetes\" icon=\"check\" :title=\"tr.paquete\" >\r\n                  <p> {{ tr.problema }}</p>\r\n                </vs-list-item>\r\n            </vs-list>\r\n          </vs-col>\r\n        </vs-card>\r\n        <TableResumenPaqueteVue class='mt-2' :arregloResumen=\"arregloResumen\" :arregloFormatoSend=\"arregloFormatoSend\" :desdeRevision=\"1\"/>\r\n      </div>\r\n      <br/>\r\n      <import-excel :onSuccess=\"loadDataInTable\"  class=\"mb-4\" />\r\n      <div>\r\n        <vs-row>\r\n          <vs-col vs-type=\"flex\" vs-justify=\"center\" vs-align=\"center\" vs-w=\"12\" vs-sm = \"12\" vs-xs=\"12\" >\r\n            <vs-card>\r\n              <div class=\"header\">\r\n                <p style=\"font-weight: bold;\">Formato del archivo excel</p>\r\n                <table class=\"tabla\">\r\n                    <tr>\r\n                      <th class=\"th1\">codigo</th>\r\n                    </tr>\r\n                    <tr>\r\n                      <td class=\"td1\">xxx</td>\r\n                    </tr>\r\n                </table>\r\n              </div>\r\n            </vs-card>\r\n          </vs-col>\r\n        </vs-row>\r\n      </div>\r\n      <!-- {{tableData}} -->\r\n      <vs-alert v-if=\"tableData.length > 0\" class=\"mb-3\" color=\"success\" icon-pack=\"feather\" icon=\"icon-alert-triangle\">\r\n          <span>Excel cargado exitosamente. ¿Está seguro de procesar estos códigos?</span><br>\r\n      </vs-alert>\r\n      <vs-row v-if=\"tableData.length > 0 && tableData.length <= 2500 \">\r\n          <vs-col vs-type=\"flex\" vs-justify=\"center\" vs-align=\"center\" vs-w=\"12\">\r\n              <vs-button class=\"mb-2\" color=\"primary\"  type=\"relief\" @click=\"openConfirm(0)\"> Revisar códigos </vs-button>\r\n          </vs-col>\r\n      </vs-row>\r\n      <vs-row v-if=\"codigosPerdidos == true\">\r\n        <vs-card>\r\n            <vs-col vs-type=\"flex\" vs-justify=\"center\" vs-align=\"center\" vs-w=\"4\">\r\n                <vs-list>\r\n                    <vs-list-header icon=\"supervisor_account\" :title=\"'Códigos que no existen | Cantidad: '+codigosNoExisten.length\"></vs-list-header>\r\n                    <vs-list-item :key=\"indextr\" v-for=\"(tr, indextr) in codigosNoExisten\"  :title=\"tr.codigo\" >\r\n                    </vs-list-item>\r\n                </vs-list>\r\n            </vs-col>\r\n        </vs-card>\r\n      </vs-row>\r\n      <vs-row v-if=\"codigosPerdidos == true\">\r\n        <vs-card>\r\n          <div v-if=\"duplicados == 1\">\r\n            <p class=\"text-3xl text-danger font-bold\">EXISTE CODIGOS DUPLICADOS VERIFIQUE SU ARCHIVO</p>\r\n            <p style=\"text-align: left;font-size: 18px;font-weight: bold;\">Total Códigos: {{ contadorCodigos }}</p>\r\n            <p style=\"text-align: left;font-size: 18px;font-weight: bold;\">Códigos válidos: {{ informacion.length }}</p>\r\n            <vs-button color=\"danger\" type=\"gradient\" icon-pack=\"feather\" icon=\"icon-x-circle\" @click=\"popupMostrarDuplicados = true;\" style=\"font-size: 18px;\">Mostrar codigos duplicados</vs-button>\r\n          </div>\r\n          <!--FILTROS-->\r\n          <vs-card>\r\n            <div class=\"title\">\r\n              Filtro de codigos\r\n            </div>\r\n            <div class=\"mt-5\">\r\n              <ul style=\"display:flex;flex-wrap: wrap;\">\r\n                <li>\r\n                <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\" @input=\"filtroTipo();\" vs-value=\"0\"><span class=\"font-bold\">{{sumaTotal}}</span> Todos</vs-radio>\r\n                </li>\r\n                <li class=\"ml-2\">\r\n                <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\"  @input=\"filtroTipo();\" vs-value=\"2\"><span style=\"font-weight:bold;\">{{sumaCodigosBloqueados}}</span> Códigos bloqueados</vs-radio>\r\n                </li>\r\n                <li class=\"ml-2\">\r\n                <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\"  @input=\"filtroTipo();\" vs-value=\"4\"><span style=\"font-weight:bold;\">{{sumaCodigosRegalados}}</span> Regalados sin liquidar</vs-radio>\r\n                </li>\r\n                <li class=\"ml-2\">\r\n                  <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\" @input=\"filtroTipo();\" vs-value=\"3\"><span style=\"font-weight:bold;\">{{sumarCodigosNoleidos}}</span> Códigos sin leer </vs-radio>\r\n                </li>\r\n                <li class=\"ml-2\">\r\n                <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\"  @input=\"filtroTipo();\" vs-value=\"5\"><span style=\"font-weight:bold;\">{{sumarCodigosLiquidados}}</span><span :style=\"sumarCodigosLiquidados > 0 ? 'color:red':''\"> Códigos Liquidados </span> </vs-radio>\r\n                </li>\r\n                <li class=\"ml-2\">\r\n                  <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\"  @input=\"filtroTipo();\" vs-value=\"6\"><span style=\"font-weight:bold;\">{{sumaCodigosRegaladosLiquidados}}</span><span :style=\"sumaCodigosRegaladosLiquidados > 0 ? 'color:red':''\"> Regalados Liquidados </span> </vs-radio>\r\n                </li>\r\n                <li class=\"ml-2\">\r\n                  <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\"  @input=\"filtroTipo();\" vs-value=\"8\"><span style=\"font-weight:bold;\">{{SumaCodigosDevolucion}}</span> Códigos devueltos</vs-radio>\r\n                </li>\r\n                <li class=\"ml-2\">\r\n                <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\"  @input=\"filtroTipo();\" vs-value=\"7\"><span style=\"font-weight:bold;\">{{sumarCodigosporLiquidarse}}</span><span :style=\"sumarCodigosporLiquidarse > 0 ? 'color:red':''\"> Códigos a liquidarse (leidos) </span> </vs-radio>\r\n                </li>\r\n                <li class=\"ml-2\">\r\n                  <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\"  @input=\"filtroTipo();\" vs-value=\"9\"><span style=\"font-weight:bold;\">{{sumarCodigosVentaDirecta}}</span> Venta directa</vs-radio>\r\n                </li>\r\n                <li class=\"ml-2\">\r\n                  <vs-radio v-model=\"codigoTipo\" vs-name=\"radios1codigoTipo\"  @input=\"filtroTipo();\" vs-value=\"10\"><span style=\"font-weight:bold;\">{{sumarCodigosVentaLista}}</span> Venta lista</vs-radio>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </vs-card>\r\n          <gestionCodigosLista :arregloCodigos=\"tmparregloCodigos\" openModal=\"1\"/>\r\n        </vs-card>\r\n      </vs-row>\r\n    </div>\r\n    <vx-card v-if=\"tableData.length && header.length\">\r\n      <vs-table stripe pagination :max-items=\"20\" search :data=\"tableData\">\r\n        <template slot=\"header\">\r\n          <h4>Códigos a subir {{ tableData.length }}</h4>\r\n        </template>\r\n        <template slot=\"thead\">\r\n          <vs-th :sort-key=\"heading\" v-for=\"heading in header\" :key=\"heading\">{{ heading }}</vs-th>\r\n        </template>\r\n        <template slot-scope=\"{data}\">\r\n          <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n            <vs-td :data=\"col\" v-for=\"(col, indexcol) in data[indextr]\" :key=\"indexcol + col\">\r\n              {{ col }}\r\n            </vs-td>\r\n          </vs-tr>\r\n        </template>\r\n      </vs-table>\r\n    </vx-card>\r\n    <vs-popup classContent=\"popup-example\" title=\"Mostrar codigos duplicados\" :active.sync=\"popupMostrarDuplicados\">\r\n      <vs-table max-items=\"10\" search pagination :data=\"mostrarDuplicados\">\r\n        <template slot=\"header\">\r\n            <vs-chip  color=\"primary\">Cantidad: <b> {{ mostrarDuplicados.length }}</b></vs-chip>\r\n        </template>\r\n        <template slot=\"thead\">\r\n            <vs-th>Codigo</vs-th>\r\n        </template>\r\n        <template slot-scope=\"{data}\">\r\n          <vs-tr :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n            <vs-td>\r\n                {{data[indextr]}}<br>\r\n            </vs-td>\r\n          </vs-tr>\r\n        </template>\r\n      </vs-table>\r\n    </vs-popup>\r\n    <!--MODAL CONFIRMAR TIPO DE IMPORTADO-->\r\n    <vs-popup small title=\"Tipo de Importación\" :active.sync=\"popupConfirmTipoImportado\">\r\n      <p class=\"text-2xl text-warning font-bold text-center\">Que tipo de importación va a realizar?</p>\r\n      <p class=\"text-danger mt-2 text-center\">!Los paquetes máximo 200 paquetes</p>\r\n      <vs-divider></vs-divider>\r\n      <div class=\"flex justify-center mt-2\" style=\"flex-wrap: wrap;\">\r\n        <vs-button class=\"mr-3\" color=\"primary\"   @click=\"tipoBodega= 0;popupConfirmTipoImportado=false;titleImportacion = 'Importacion Normal (Activación)';\">Activación</vs-button>\r\n        <vs-button class=\"mr-3\" color=\"success\"   @click=\"tipoBodega= 0;popupConfirmTipoImportado=false;titleImportacion = 'Importacion Normal (Diágnostica)';\">Diágnostica</vs-button>\r\n      </div>\r\n      <div class=\"flex justify-center mt-5\">\r\n        <vs-button class=\"mr-3\" color=\"warning\"   @click=\"tipoBodega= 1;popupConfirmTipoImportado=false;titleImportacion = 'Importacion Activación - Diágnostico';ejecutarValidacion();\" type=\"border\"> Activación -Diágnostica</vs-button>\r\n        <vs-button class=\"mr-3\" color=\"dark\"      @click=\"tipoBodega= 2;popupConfirmTipoImportado=false;titleImportacion = 'Importacion Diágnostico - Activación)';ejecutarValidacion();\" type=\"border\"> Diágnostica -Activación</vs-button>\r\n      </div>\r\n      <div class=\"flex justify-center\">\r\n        <vs-button class=\"m-3\" color=\"#29BCC6\"  @click=\"tipoBodega= 3;popupConfirmTipoImportado=false;titleImportacion = 'Importacion Paquetes';ejecutarValidacion();\" type=\"border\" icon-pack=\"feather\" icon=\"icon-package\"> Paquetes</vs-button>\r\n      </div>\r\n    </vs-popup>\r\n    <!--MODAL PROBLEMAS DIAGNOSTICO O PAQUETES-->\r\n    <vs-popup fullscreen small title=\"Problemas con los códigos de su archivo\" :active.sync=\"popupProblemasDiagnostico\">\r\n      <div v-if=\"tipoBodega == 1 || tipoBodega == 2\">\r\n        <TableProblemasDiagnosticoVue v-if=\"popupProblemasDiagnostico\" :items=\"10\" :arregloProblemasDiagnostico=\"arregloProblemasDiagnostico\"/>\r\n      </div>\r\n      <div v-if=\"tipoBodega == 3\">\r\n        <TablaErroresPaqueteVue v-if=\"popupProblemasDiagnostico\" :items=\"10\" :arregloProblemasPaquete=\"arregloProblemasPaquete\"/>\r\n      </div>\r\n    </vs-popup>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport gestionCodigosLista from './utils/gestionCodigosLista.vue'\r\nimport ImportExcel from './importExcel.vue'\r\nimport vSelect from 'vue-select'\r\nimport TableProblemasDiagnosticoVue from './utils/TableProblemasDiagnostico.vue'\r\nconst TablaErroresPaqueteVue = () => import('@/views/codigos/paquetes/components/TablaErroresPaquete')\r\nconst TableResumenPaqueteVue = () => import('@/views/codigos/components/utils/components/GestionLiquidacion/TableResumenPaquete')\r\nexport default {\r\n  components: {\r\n    ImportExcel,\r\n    vSelect,\r\n    gestionCodigosLista,\r\n    TableProblemasDiagnosticoVue,\r\n    TablaErroresPaqueteVue,\r\n    TableResumenPaqueteVue,\r\n  },\r\n  data () {\r\n    return {\r\n      codigosPerdidos:false,\r\n      tableData: [],\r\n      header: [],\r\n      sheetName: '',\r\n      usuario: [],\r\n      modalConfirm: false,\r\n      modalErrores: false,\r\n      errores: [],\r\n      tipo_selected: '',\r\n      cedulas_no_encontradas: [],\r\n      modalCedulas: false,\r\n      informacion:[],\r\n      tmparregloCodigos:[],\r\n      codigosNoExisten:[],\r\n      cantidadNoExisten:0,\r\n      duplicados:0,\r\n      contadorCodigos:0,\r\n      mostrarDuplicados:[],\r\n      popupMostrarDuplicados:false,\r\n      conDevolucion:'0',\r\n      userRoot:false,\r\n      //variables para filtros\r\n      codigoTipo:'0',\r\n      //fin variables para filtros\r\n      //VARIABLES PARA TIPO DE ACTIVACION O DIAGNOSTICO\r\n      tipoBodega:0,\r\n      popupProblemasDiagnostico:false,\r\n      popupConfirmTipoImportado:false,\r\n      arregloProblemasDiagnostico:[],\r\n      titleImportacion:'',\r\n      //variables para paquetes\r\n      arregloFormatoSend:[],\r\n      arregloProblemasPaquete:[],\r\n      arregloResumen:[],\r\n      arregloErroresPaquetes:[],\r\n      //fin variables para paquetes\r\n    }\r\n  },\r\n  created(){\r\n    this.usuario = JSON.parse(localStorage.getItem('usuario'));\r\n    this.codigosPerdidos = false\r\n  },\r\n  mounted(){\r\n    let me = this;\r\n    me.getUserRoot(me.usuario);\r\n  },\r\n  computed:{\r\n    sumaTotal(){\r\n      let me = this;\r\n      let total = me.informacion.length\r\n      return total\r\n    },\r\n    SumaCodigosDevolucion(){\r\n      let me = this;\r\n      let datos       = me.informacion.filter(p => p.estado_liquidacion == '3');\r\n      let resultado   = datos.length\r\n      return resultado\r\n    },\r\n    sumaCodigosRegalados(){\r\n      let me = this;\r\n      let primerFiltro = me.informacion.filter(p => p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null);\r\n      let datos        = primerFiltro.filter(p => p.estado_liquidacion =='2' && p.liquidado_regalado == '0')\r\n      let resultado    = datos.length\r\n      return resultado\r\n    },\r\n    sumaCodigosRegaladosLiquidados(){\r\n      let me = this;\r\n      let datos        = me.informacion.filter(p => p.estado_liquidacion =='2' && p.liquidado_regalado == '1')\r\n      let resultado    = datos.length\r\n      return resultado\r\n    },\r\n    sumaCodigosBloqueados(){\r\n      let me = this;\r\n      let primerFiltro = me.informacion.filter(p => p.estado_liquidacion != '3');\r\n      let datos         = primerFiltro.filter(p => p.estado == '2')\r\n      let resultado     = datos.length\r\n      return resultado\r\n    },\r\n    sumarCodigosActivos(){\r\n      let me = this;\r\n      let primerFiltro = me.informacion.filter(p => p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null);\r\n      let datos        = primerFiltro.filter(p => p.estado_liquidacion =='0' ||  p.estado_liquidacion =='1')\r\n      let resultado    = datos.length\r\n      return resultado\r\n    },\r\n    sumarCodigosLiquidados(){\r\n      let me = this;\r\n      let primerFiltro = me.informacion.filter(p => p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null);\r\n      let datos        = primerFiltro.filter(p => p.estado_liquidacion =='0')\r\n      let resultado    = datos.length\r\n      return resultado\r\n    },\r\n    sumarCodigosporLiquidarse(){\r\n      let me = this;\r\n      let primerFiltro = me.informacion.filter(p => (p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null) && (p.estado_liquidacion == 1) && (p.bc_estado =='2'));\r\n      let datos        = primerFiltro\r\n      let resultado    = datos.length\r\n      return resultado\r\n    },\r\n    sumarCodigosLeidos(){\r\n      let me = this;\r\n      let primerFiltro = me.informacion.filter(p => (p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null) && (p.estado_liquidacion == 1));\r\n      let datos        = primerFiltro.filter(p => p.bc_estado =='2')\r\n      let resultado    = datos.length\r\n      return resultado\r\n    },\r\n    sumarCodigosNoleidos(){\r\n      let me = this;\r\n      let primerFiltro = me.informacion.filter(p => (p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null) && (p.estado_liquidacion == 1));\r\n      let datos        = primerFiltro.filter(p => p.bc_estado =='1')\r\n      let resultado    = datos.length\r\n      return resultado\r\n    },\r\n    sumarCodigosVentaDirecta(){\r\n      let me = this;\r\n      let primerFiltro = me.informacion.filter(p => (p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null) && (p.venta_estado == 1));\r\n      let resultado    = primerFiltro.length\r\n      return resultado\r\n    },\r\n    sumarCodigosVentaLista(){\r\n      let me = this;\r\n      let primerFiltro = me.informacion.filter(p => (p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null) && (p.venta_estado == 2));\r\n      let resultado    = primerFiltro.length\r\n      return resultado\r\n    }\r\n  },\r\n  methods: {\r\n    ejecutarValidacion(){\r\n      let me = this;\r\n      if(me.tipoBodega == 1 || me.tipoBodega == 2) { me.validateCodigos() }\r\n      if(me.tipoBodega == 3) { me.validateCodigosPaquete() }\r\n    },\r\n    validateCodigos(){\r\n      let me                            = this;\r\n      try{\r\n        let datos                       = []\r\n        me.arregloProblemasDiagnostico  = []\r\n        datos = me.tableData.filter(p => !p.codigo.startsWith(\"PAQ-\") && !p.codigo.startsWith(\"paq-\"))\r\n        var preValores                  = []\r\n        //quitar types NumRow\r\n        datos.forEach(element => {\r\n          var obj = new Object();\r\n          obj.codigo = element.codigo\r\n          preValores.push(obj)\r\n        });\r\n        var getLongitud = datos.length\r\n        var longitud    = getLongitud/2\r\n        for(var i = 0; i<longitud;i++){\r\n          // Creamos un nuevo array para almacenar los objetos quitados\r\n          const nuevoArray        = [];\r\n          let   codigoActivacion  = \"\";\r\n          let   codigoDiagnostico = \"\";\r\n          // Quitamos los dos primeros objetos del array original y los agregamos al nuevo array\r\n          nuevoArray.push(preValores.splice(0, 2));\r\n          var setear = nuevoArray.flat()\r\n          console.log(\"tipo\",me.tipoBodega)\r\n          //====VALIDACION SI SOLO HAY UN CODIGO====\r\n          if(setear.length == 1){\r\n            var cal = new Object\r\n            //ACTIVACION - DIAGNOSTICO)\r\n            if(me.tipoBodega == 1){\r\n              cal.codigoActivacion =  setear[0].codigo\r\n              cal.codigoDiagnostico  =  \"\"\r\n            }\r\n            //DIAGNOSTICO - ACTIVACION)\r\n            if(me.tipoBodega == 2){\r\n              cal.codigoDiagnostico =  setear[0].codigo\r\n              cal.codigoActivacion  =  \"\"\r\n            }\r\n            cal.problema          =  'formato'\r\n            me.arregloProblemasDiagnostico.push(cal)\r\n          }\r\n          //==SI TODO ESTA NORMAL===\r\n          else{\r\n            //ACTIVACION - DIAGNOSTICO)\r\n            if(me.tipoBodega == 1){\r\n              codigoActivacion      = setear[0].codigo;\r\n              codigoDiagnostico     = setear[1].codigo\r\n            }\r\n            //DIAGNOSTICO - ACTIVACION)\r\n            if(me.tipoBodega == 2){\r\n              codigoDiagnostico     = setear[0].codigo\r\n              codigoActivacion      = setear[1].codigo;\r\n            }\r\n            //============ACTIVACION==================================\r\n            //VALIDACION SI NO SON STRING\r\n            if (typeof codigoActivacion !== 'string' || typeof codigoDiagnostico !== 'string' ) {\r\n              var cal = new Object\r\n              cal.codigoActivacion  =  codigoActivacion\r\n              cal.codigoDiagnostico =  codigoDiagnostico\r\n              cal.problema          =  'formato'\r\n              me.arregloProblemasDiagnostico.push(cal)\r\n            }\r\n            else{\r\n              const activacionMinuscula = codigoActivacion.toLowerCase();\r\n              //validar que el codigo de activacion no tenga una P\r\n              if(activacionMinuscula.startsWith(\"p\")){\r\n                //validar meñique que el codigo de activacion se permita empezar por p DONDE SEA PLM no hago nada\r\n                if(activacionMinuscula.startsWith(\"plm\")){\r\n                }else{\r\n                  var cal = new Object\r\n                  cal.codigoActivacion  =  codigoActivacion\r\n                  cal.codigoDiagnostico =  codigoDiagnostico\r\n                  cal.problema          =  'activacion'\r\n                  me.arregloProblemasDiagnostico.push(cal)\r\n                }\r\n              }\r\n              //=============DIAGNOSTICO===================================\r\n              //validar que el codigo de activacion tenga una P\r\n              const diagnosticoMinuscula = codigoDiagnostico.toLowerCase();\r\n              //validar si es meñique debe tener 2 pp\r\n              if(activacionMinuscula.startsWith(\"plm\")){\r\n                //si no inicia por 2 pp\r\n                if(!diagnosticoMinuscula.startsWith(\"pp\")){\r\n                  var cal = new Object\r\n                  cal.codigoActivacion  =  codigoActivacion\r\n                  cal.codigoDiagnostico =  codigoDiagnostico\r\n                  cal.problema          =  'diagnostico'\r\n                  me.arregloProblemasDiagnostico.push(cal)\r\n                }\r\n              }\r\n              //diferente a meñique\r\n              else{\r\n                if(!diagnosticoMinuscula.startsWith(\"p\")){\r\n                  var cal = new Object\r\n                  cal.codigoActivacion  =  codigoActivacion\r\n                  cal.codigoDiagnostico =  codigoDiagnostico\r\n                  cal.problema          =  'diagnostico'\r\n                  me.arregloProblemasDiagnostico.push(cal)\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }//Fin FOR\r\n        //si hay errores en el archivo mostramos un modal\r\n        if(me.arregloProblemasDiagnostico.length > 0){\r\n          me.popupProblemasDiagnostico = true\r\n        }\r\n      }\r\n      catch (err) {\r\n        console.log(\"err\",err)\r\n        alert(\"Hubo problemas con tu archivo excel\")\r\n      }\r\n    },\r\n    //==================================METODOS PAQUETES===================\r\n    validateCodigosPaquete(){\r\n      let me                                = this;\r\n      try{\r\n        me.arregloFormatoSend               = []\r\n        const problema                      = \"Problema con el paquete\"\r\n        me.arregloProblemasPaquete          = []\r\n        let datos                           = JSON.parse(JSON.stringify(me.tableData));\r\n        //validar si son mas de 200 paquetes\r\n        if(datos.length > 200){\r\n          me.$vs.notify({\r\n          text:'No puedes subir mas de 200 paquetes',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return false;\r\n        }\r\n        datos.forEach(element => {\r\n          let ifErrsPaquete                 = false\r\n          let codigoPaquete                 = element.codigo\r\n          //validar que el codigo sea string\r\n          if (typeof codigoPaquete !== 'string' )   { ifErrsPaquete        = true }\r\n          else{\r\n            const paqueteMinuscula = codigoPaquete.toLowerCase();\r\n            if(!paqueteMinuscula.startsWith(\"paq-\")) { ifErrsPaquete        = true }\r\n          }\r\n          //si existe un errores\r\n          if(ifErrsPaquete){\r\n            var cal               = new Object\r\n            cal.codigoPaquete     =  codigoPaquete\r\n            cal.problema          =  problema\r\n            cal.codigosHijos      =  []\r\n            me.arregloProblemasPaquete.push(cal)\r\n          }else{\r\n            me.arregloFormatoSend.push({codigoPaquete:codigoPaquete})\r\n          }\r\n        });\r\n        //si hay errores en el archivo mostramos un modal\r\n        if(me.arregloProblemasPaquete.length > 0){ me.popupProblemasDiagnostico = true }\r\n      }\r\n      catch (err) {\r\n        console.log(\"err\",err)\r\n        alert(\"Hubo problemas con tu archivo excel\")\r\n      }\r\n    },\r\n    //===================================FIN METODOS PAQUETES===============\r\n    filtroTipo(){\r\n      let me = this;\r\n      me.tmparregloCodigos = []\r\n      let datos = me.informacion\r\n      //para ver los codigos activos\r\n      // if(me.codigoTipo == 1){\r\n      //     let primerFiltro = datos.filter(p => p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null);\r\n      //     me.tmparregloCodigos = primerFiltro.filter(p => p.estado_liquidacion =='0' ||  p.estado_liquidacion =='1')\r\n      //     return\r\n      // }\r\n      //para ver los codigos bloqueados\r\n      if(me.codigoTipo == 2){\r\n          let primerFiltro = datos.filter(p => p.estado_liquidacion != '3');\r\n          me.tmparregloCodigos = primerFiltro.filter(p => p.estado =='2')\r\n          return\r\n      }\r\n      //para ver lso codigos sin ler\r\n      if(me.codigoTipo == 3){\r\n          let primerFiltro = datos.filter(p => (p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null) && (p.estado_liquidacion == 1));\r\n          me.tmparregloCodigos = primerFiltro.filter(p => p.bc_estado =='1')\r\n          return\r\n      }\r\n      //para ver los codigos regalados\r\n      if(me.codigoTipo == 4){\r\n          let primerFiltro = datos.filter(p => p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null);\r\n          me.tmparregloCodigos = primerFiltro.filter(p => p.estado_liquidacion =='2' && p.liquidado_regalado == '0')\r\n          return\r\n      }\r\n      //para ver los codigos liquidados\r\n      if(me.codigoTipo == 5){\r\n          let primerFiltro = datos.filter(p => p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null);\r\n          me.tmparregloCodigos = primerFiltro.filter(p => p.estado_liquidacion =='0')\r\n          return\r\n      }\r\n      //para ver los codigos regalados liquidados\r\n      if(me.codigoTipo == 6){\r\n          me.tmparregloCodigos = datos.filter(p => p.estado_liquidacion =='2' && p.liquidado_regalado == '1')\r\n          return\r\n      }\r\n      //para ver los codigos por liquidarse\r\n      if(me.codigoTipo == 7){\r\n          let primerFiltro = datos.filter(p => (p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null) && (p.estado_liquidacion == 1) && (p.bc_estado ==2));\r\n          me.tmparregloCodigos = primerFiltro\r\n          return\r\n      }\r\n      //para ver los codigos devueltos\r\n      if(me.codigoTipo == 8){\r\n        let primerFiltro = datos.filter(p => p.estado_liquidacion == '3');\r\n        me.tmparregloCodigos = primerFiltro\r\n        return\r\n      }\r\n      //para ver los codigos venta directa\r\n      if(me.codigoTipo == 9){\r\n        let primerFiltro = datos.filter(p => (p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null) && (p.venta_estado == 1));\r\n        me.tmparregloCodigos = primerFiltro\r\n        return\r\n      }\r\n      //para ver los codigos venta lista\r\n      if(me.codigoTipo == 10){\r\n        let primerFiltro = datos.filter(p => (p.estado == '1' ||  p.estado == '0' ||  p.estado == '' || p.estado == null) && (p.venta_estado == 2));\r\n        me.tmparregloCodigos = primerFiltro\r\n        return\r\n      }\r\n      //para ver todos los codigos\r\n      else{\r\n        me.tmparregloCodigos = datos\r\n      }\r\n    },\r\n    loadDataInTable ({ results, header, meta }) {\r\n      this.codigosPerdidos            = false\r\n      this.header                     = header\r\n    //   const arrayOfObj = [{\r\n    //     key1: 'value1',\r\n    //     key2: 'value2'\r\n    //   }, {\r\n    //     key1: 'value1',\r\n    //     key2: 'value2'\r\n    //   }];\r\n    //   const newArrayOfObj = arrayOfObj.map(({ key1: stroke, ...remainingProps }) => ({\r\n    //   stroke,\r\n    //   ...remainingProps\r\n    // }));\r\n     const newArrayOfObj = results.map(obj => {\r\n        // Obtenemos todas las claves del objeto\r\n        const keys = Object.keys(obj);\r\n        // Seleccionamos la primera clave dinámicamente\r\n        const firstKey = keys[0];\r\n        // Eliminamos la primera propiedad del objeto y obtener los valores restantes\r\n        const { [firstKey]: deletedKey, ...rest } = obj;\r\n        // Retornamos un nuevo objeto con la primera propiedad reemplazada por \"codigo\" y las restantes\r\n        return {\r\n          codigo: deletedKey,\r\n          ...rest\r\n        };\r\n      });\r\n      this.tableData                  = newArrayOfObj\r\n      this.sheetName                  = meta.sheetName\r\n      this.popupConfirmTipoImportado  = true;\r\n      this.arregloFormatoSend         = []\r\n      this.arregloProblemasPaquete    = []\r\n      this.arregloResumen             = []\r\n      this.arregloErroresPaquetes     = []\r\n    },\r\n    getUserRoot(dato) {\r\n      let me = this;\r\n      this.$http.get(this.$server_url + 'permisos/' + dato.idusuario)\r\n        .then((res) => {\r\n          if (res.data.length > 0) {\r\n            me.userRoot = true;\r\n          }\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n      },\r\n    procesarPagos(){\r\n      let me = this\r\n      me.duplicados = 0\r\n      me.contadorCodigos = 0\r\n      me.mostrarDuplicados = []\r\n      if(me.conDevolucion == null || me.conDevolucion == \"\" || me.conDevolucion == undefined){\r\n        me.$vs.notify({\r\n        text:'Seleccione si la revisión es con devolución o no',\r\n        color:'warning',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n        return\r\n      }\r\n      //si escogio tipo de importacion Diagnostico\r\n      if(me.tipoBodega == 1 || me.tipoBodega == 2){\r\n        if(me.arregloProblemasDiagnostico.length > 0){\r\n          me.$vs.notify({\r\n          text:'Existe codigos de activación con problemas corriga por favor',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return false\r\n        }\r\n      }\r\n      //si escogio tipo de paquete\r\n      if(me.tipoBodega == 3){\r\n        if(me.arregloProblemasPaquete.length > 0){\r\n          me.$vs.notify({\r\n          text:'Existe codigos del paquete con problemas corriga por favor',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return false\r\n        }\r\n        if(me.arregloFormatoSend.length > 200){\r\n          me.$vs.notify({\r\n          text:'No puedes subir mas de 200 paquetes',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return false;\r\n        }\r\n        if(me.arregloFormatoSend.length == 0){\r\n          me.$vs.notify({\r\n          text:'Hubo problemas para subir los paquetes',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return false\r\n        }\r\n      }\r\n      var json_pagos = \"\"\r\n      if(me.tipoBodega == 3 ) {  json_pagos = JSON.stringify(me.arregloFormatoSend) }\r\n      else                    {  json_pagos = JSON.stringify(me.tableData.filter(p => !p.codigo.startsWith(\"PAQ-\") && !p.codigo.startsWith(\"paq-\")) ) }\r\n      let formData = new FormData();\r\n      formData.append('data_codigos',   json_pagos);\r\n      formData.append('conDevolucion',  me.conDevolucion);\r\n      //tipo paquete\r\n      var url = \"\"\r\n      if(me.tipoBodega == '3' ){\r\n        url = this.$server_url+'paquetes/revision'\r\n      }else{\r\n        url = this.$server_url+'codigos/revision'\r\n      }\r\n      me.$vs.loading()\r\n      this.$http.post(url, formData)\r\n      .then(res => {\r\n          me.$vs.loading.close()\r\n          me.$vs.notify({\r\n          text:'Códigos procesados exitosamente',\r\n          color:'success',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          me.modalConfirm     = false\r\n          me.tableData        = []\r\n          me.codigosPerdidos  = true\r\n          me.informacion      = res.data.informacion\r\n          me.tmparregloCodigos = res.data.informacion\r\n          //paquetes\r\n          if( this.tipoBodega == 3 ){\r\n            me.arregloResumen                         = res.data.arregloResumen\r\n            me.arregloErroresPaquetes                 = res.data.arregloErroresPaquetes\r\n          }else{\r\n            let original = res.data.informacion\r\n            //quitar arrays duplicados\r\n            me.contadorCodigos = res.data.informacion.length\r\n            let datos = res.data.informacion\r\n            let hash = {};\r\n            datos = datos.filter(o => hash[o.codigo] ? false : hash[o.codigo] = true);\r\n            //verificar duplicados\r\n            let conteoTotal    =  me.informacion.length\r\n            if(me.contadorCodigos != conteoTotal){\r\n              me.duplicados = 1\r\n              //mostrar duplicados\r\n              const valores = original.map(persona => persona.codigo);\r\n              me.mostrarDuplicados = valores.filter((edad, index) => valores.indexOf(edad) !== index);\r\n              me.popupMostrarDuplicados = true;\r\n            }\r\n            //fin mostrar duplicados\r\n            me.codigosNoExisten = res.data.codigosNoExisten\r\n          }\r\n      })\r\n      .catch(function (error) {\r\n          me.$vs.notify({\r\n          text:'Verifique que la información se haya guardado correctamente.',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-alert-triangle'})\r\n          me.$vs.loading.close()\r\n          // setTimeout(function() {location.reload()}, 1000);\r\n      })\r\n    },\r\n    openConfirm(tipo) {\r\n      let me = this\r\n      //volver a revisar que este bien el formato del excel\r\n      me.ejecutarValidacion()\r\n      me.tipo_selected = tipo\r\n      if( !me.tableData[0].codigo){\r\n        me.$vs.loading.close()\r\n        me.$vs.notify({ text:'Corrija el formato del excel y vuelva a intentar.', color:'warning', iconPack: 'feather', icon:'icon-alert-triangle'})\r\n        return\r\n      }\r\n      if(me.arregloProblemasDiagnostico.length > 0){\r\n        me.$vs.notify({ text:'Corrija el formato del excel y vuelva a intentar.', color:'warning', iconPack: 'feather', icon:'icon-alert-triangle'})\r\n        return\r\n      }\r\n      if(me.arregloProblemasPaquete.length > 0){\r\n        me.$vs.notify({ text:'Corrija el formato del excel y vuelva a intentar.', color:'warning', iconPack: 'feather', icon:'icon-alert-triangle'})\r\n        return\r\n      }\r\n      me.errores = []\r\n      $.each(me.tableData,function(key, value){\r\n        if( !value.codigo ){\r\n          me.errores.push(value)\r\n        }\r\n      })\r\n      if( me.errores.length > 0 ){\r\n        me.modalErrores = true\r\n      }else{\r\n        me.modalConfirm = true\r\n      }\r\n    },\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.tabla{\r\n  width: 100%;\r\n  margin-top: 10px;\r\n}\r\n .tabla {\r\n\r\n  border: 1px solid #D1E5F1;\r\n  padding: 2px;\r\n  border-radius: 5px;\r\n}\r\n.th1{\r\n  background-color: #60E029;\r\n  border-radius: 5px;\r\n  color:white;\r\n}\r\n.td1, .th1{\r\n padding: 10px;\r\n text-align: center;\r\n border:none;\r\n}\r\n</style>\r\n"]}]}