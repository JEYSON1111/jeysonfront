{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\gestion_matricula\\administrador\\components\\excel_pagos.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\gestion_matricula\\administrador\\components\\excel_pagos.vue","mtime":1712682815937},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport ImportExcel from './import_excel.vue'\r\n\r\nexport default {\r\n  components: {\r\n    ImportExcel\r\n  },\r\n  data () {\r\n    return {\r\n      tableData: [],\r\n      header: [],\r\n      sheetName: '',\r\n      usuario: [],\r\n      modalConfirm: false,\r\n      modalErrores: false,\r\n      errores: [],\r\n      tipo_selected: '',\r\n      cedulas_no_encontradas: [],\r\n      modalCedulas: false,\r\n    }\r\n  },\r\n  created(){\r\n        this.usuario = JSON.parse(localStorage.getItem('usuario'));\r\n    },\r\n  methods: {\r\n    loadDataInTable ({ results, header, meta }) {\r\n      this.header = header\r\n      this.tableData = results\r\n      this.sheetName = meta.sheetName\r\n    },\r\n    procesarPagos(){\r\n        let me = this\r\n\r\n        me.$vs.loading()\r\n        let json_pagos = JSON.stringify(me.tableData)\r\n        let formData = new FormData();\r\n        formData.append('data_pagos', json_pagos);\r\n        formData.append('id_usuario', me.usuario.idusuario);\r\n        formData.append('tipo', me.tipo_selected);\r\n        this.$http.post(this.$server_url+'procesar_pagos', formData)\r\n        .then(res => {\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({\r\n            text:'Pagos procesados exitosamente',\r\n            color:'success',\r\n            iconPack: 'feather',\r\n            icon:'icon-check'})\r\n            \r\n            if( res.data.length > 0 ){\r\n              me.modalConfirm = false\r\n              me.cedulas_no_encontradas = res.data\r\n              me.modalCedulas = true\r\n            }else{\r\n              setTimeout(function() {location.reload()}, 1000);\r\n            }\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            me.$vs.notify({\r\n            text:'Verifique que la información se haya guardado correctamente.',\r\n            color:'warning',\r\n            iconPack: 'feather',\r\n            icon:'icon-alert-triangle'})\r\n            me.$vs.loading.close()\r\n            // setTimeout(function() {location.reload()}, 1000);\r\n        })\r\n    },\r\n    openConfirm(tipo) {\r\n\r\n      let me = this\r\n      me.tipo_selected = tipo\r\n      \r\n      if( !me.tableData[0].cedula || !me.tableData[0].valor ){\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({ text:'Corrija el formato del excel y vuelva a intentar.', color:'warning', iconPack: 'feather', icon:'icon-alert-triangle'})\r\n            return\r\n        }\r\n\r\n      me.errores = []\r\n      $.each(me.tableData,function(key, value){\r\n        if( !value.cedula || isNaN(value.valor) ){\r\n          me.errores.push(value)\r\n        }\r\n      })\r\n\r\n      if( me.errores.length > 0 ){\r\n        me.modalErrores = true\r\n      }else{\r\n        me.modalConfirm = true\r\n      }\r\n    },\r\n    recargar(){\r\n      location.reload()\r\n    }\r\n\r\n\r\n\r\n  }\r\n}\r\n",{"version":3,"sources":["excel_pagos.vue"],"names":[],"mappings":";AAsHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA","file":"excel_pagos.vue","sourceRoot":"src/views/gestion_matricula/administrador/components","sourcesContent":["<!-- =========================================================================================\r\n    File Name: i18n.vue\r\n    Description: I18n demo\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n<template>\r\n  <div>\r\n\r\n    <vs-popup title=\"Errores en excel de pagos\" :active.sync=\"modalErrores\" style=\"padding: 0% !important;\">\r\n       <div class=\"w-full\" style=\"background: rgb(121,9,9); padding: 20px; border-radius: 5px; background: linear-gradient(90deg, rgba(121,9,9,1) 28%, rgba(255,0,48,1) 100%); color: white;\">\r\n         <div class=\"vx-row\">\r\n            <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <b>Cédula</b>\r\n            </div>\r\n            <div class=\"vx-col sm:w-1/2 w-full\">\r\n                <b>Valor</b>\r\n            </div>\r\n        </div>\r\n        <vs-divider></vs-divider>\r\n        <div :key=\"index\" v-for=\"(item, index) in errores\">\r\n          <div class=\"vx-row\">\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                  <span v-if=\"item.cedula\"> {{item.cedula}} </span>\r\n              </div>\r\n              <div class=\"vx-col sm:w-1/2 w-full\">\r\n                  <span v-if=\"item.cedula\"> {{item.valor}} </span>\r\n              </div>\r\n          </div>\r\n        </div>\r\n       </div>\r\n    </vs-popup>\r\n\r\n\r\n\r\n    <vs-popup title=\"Cédulas no encontradas\" :active.sync=\"modalCedulas\" @accept=\"recargar()\" @close=\"recargar()\" @cancel=\"recargar()\"  style=\"padding: 0% !important;\">\r\n       <div class=\"w-full\" style=\"background: rgb(235,147,25); background: linear-gradient(90deg, rgba(235,147,25,1) 28%, rgba(255,166,0,1) 100%); color: white; border-radius: 5px; padding: 10px;\">\r\n        <div class=\"vx-row\"> \r\n          <div class=\"vx-col w-full\" align=\"center\"> \r\n           <b>Cédulas a las que no se aplicaron pagos</b>\r\n          </div> \r\n        </div> \r\n        <vs-divider></vs-divider>\r\n        <div :key=\"index\" v-for=\"(item, index) in cedulas_no_encontradas\">\r\n          <div class=\"vx-row\">\r\n              <div class=\"vx-col w-full\" align=\"center\"> <span> {{item}} </span> </div>\r\n          </div>\r\n        </div>\r\n       </div>\r\n    </vs-popup>\r\n\r\n\r\n    <vs-popup small title=\"Confirmación\" :active.sync=\"modalConfirm\">\r\n      \r\n      <div class=\"w-full mb-base\" align=\"center\">\r\n        <h4>Está seguro de aplicar estas pagos?</h4>\r\n      </div>\r\n      \r\n      <div class=\"w-full\" align=\"center\">\r\n        <vs-button class=\"mb-2\" color=\"danger\" type=\"gradient\" @click=\"procesarPagos()\"> Confirmar </vs-button>\r\n      </div>\r\n\r\n    </vs-popup>\r\n\r\n\r\n    <div class=\"mb-6\" align=\"center\">\r\n        <import-excel :onSuccess=\"loadDataInTable\"  class=\"mb-4\" />\r\n        <!-- {{tableData}} -->\r\n        <vs-alert v-if=\"tableData.length > 0\" class=\"mb-3\" color=\"warning\" icon-pack=\"feather\" icon=\"icon-alert-triangle\">\r\n            <span>Excel cargado exitosamente. ¿Está seguro de procesar estos pagos?</span><br>\r\n            El valor del archivo por estudiante <b>pagará</b> todos los valores <b>pendientes</b>, incluyendo valores de periodos <b>anteriores</b>.\r\n        </vs-alert>\r\n\r\n        \r\n        \r\n\r\n        <div class=\"vx-row mb-3\" v-if=\"tableData.length > 0 && tableData.length <= 1500 \">\r\n            <div class=\"vx-col sm:w-1/2 w-full\">\r\n              <vs-button class=\"mb-2\" color=\"dark\" type=\"filled\" @click=\"openConfirm(0)\"> Pagar solo matrícula y pensiones </vs-button>\r\n            </div>\r\n            <div class=\"vx-col sm:w-1/2 w-full\">\r\n              <vs-button class=\"mb-2\" color=\"dark\" type=\"filled\" @click=\"openConfirm(-1)\"> Pagar todos los valores pendientes </vs-button>\r\n            </div>\r\n        </div>\r\n        <div class=\"vx-row mb-3\" v-else>\r\n          <div class=\"vx-col w-full\">\r\n              <vs-button class=\"mb-2\" color=\"danger\" type=\"border\"> Para un correcto procesamiento de los pagos, no ingrese más de 1500 registros en una sola carga. </vs-button>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <vx-card v-if=\"tableData.length && header.length\">\r\n      <vs-table stripe pagination :max-items=\"10\" search :data=\"tableData\">\r\n        <template slot=\"header\">\r\n          <h4>Pagos para procesar</h4>\r\n        </template>\r\n\r\n        <template slot=\"thead\">\r\n          <vs-th :sort-key=\"heading\" v-for=\"heading in header\" :key=\"heading\">{{ heading }}</vs-th>\r\n        </template>\r\n\r\n        <template slot-scope=\"{data}\">\r\n          <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n            <vs-td :data=\"col\" v-for=\"(col, indexcol) in data[indextr]\" :key=\"indexcol + col\">\r\n              {{ col }}\r\n            </vs-td>\r\n          </vs-tr>\r\n        </template>\r\n      </vs-table>\r\n    </vx-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ImportExcel from './import_excel.vue'\r\n\r\nexport default {\r\n  components: {\r\n    ImportExcel\r\n  },\r\n  data () {\r\n    return {\r\n      tableData: [],\r\n      header: [],\r\n      sheetName: '',\r\n      usuario: [],\r\n      modalConfirm: false,\r\n      modalErrores: false,\r\n      errores: [],\r\n      tipo_selected: '',\r\n      cedulas_no_encontradas: [],\r\n      modalCedulas: false,\r\n    }\r\n  },\r\n  created(){\r\n        this.usuario = JSON.parse(localStorage.getItem('usuario'));\r\n    },\r\n  methods: {\r\n    loadDataInTable ({ results, header, meta }) {\r\n      this.header = header\r\n      this.tableData = results\r\n      this.sheetName = meta.sheetName\r\n    },\r\n    procesarPagos(){\r\n        let me = this\r\n\r\n        me.$vs.loading()\r\n        let json_pagos = JSON.stringify(me.tableData)\r\n        let formData = new FormData();\r\n        formData.append('data_pagos', json_pagos);\r\n        formData.append('id_usuario', me.usuario.idusuario);\r\n        formData.append('tipo', me.tipo_selected);\r\n        this.$http.post(this.$server_url+'procesar_pagos', formData)\r\n        .then(res => {\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({\r\n            text:'Pagos procesados exitosamente',\r\n            color:'success',\r\n            iconPack: 'feather',\r\n            icon:'icon-check'})\r\n            \r\n            if( res.data.length > 0 ){\r\n              me.modalConfirm = false\r\n              me.cedulas_no_encontradas = res.data\r\n              me.modalCedulas = true\r\n            }else{\r\n              setTimeout(function() {location.reload()}, 1000);\r\n            }\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            me.$vs.notify({\r\n            text:'Verifique que la información se haya guardado correctamente.',\r\n            color:'warning',\r\n            iconPack: 'feather',\r\n            icon:'icon-alert-triangle'})\r\n            me.$vs.loading.close()\r\n            // setTimeout(function() {location.reload()}, 1000);\r\n        })\r\n    },\r\n    openConfirm(tipo) {\r\n\r\n      let me = this\r\n      me.tipo_selected = tipo\r\n      \r\n      if( !me.tableData[0].cedula || !me.tableData[0].valor ){\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({ text:'Corrija el formato del excel y vuelva a intentar.', color:'warning', iconPack: 'feather', icon:'icon-alert-triangle'})\r\n            return\r\n        }\r\n\r\n      me.errores = []\r\n      $.each(me.tableData,function(key, value){\r\n        if( !value.cedula || isNaN(value.valor) ){\r\n          me.errores.push(value)\r\n        }\r\n      })\r\n\r\n      if( me.errores.length > 0 ){\r\n        me.modalErrores = true\r\n      }else{\r\n        me.modalConfirm = true\r\n      }\r\n    },\r\n    recargar(){\r\n      location.reload()\r\n    }\r\n\r\n\r\n\r\n  }\r\n}\r\n</script>\r\n"]}]}