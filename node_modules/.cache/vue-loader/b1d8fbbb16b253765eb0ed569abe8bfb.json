{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\facturacion\\10_10_1_4\\documentoliq\\comparacionliq.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\facturacion\\10_10_1_4\\documentoliq\\comparacionliq.vue","mtime":1712682815894},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport Vue from \"vue\";\r\nimport axios from \"axios\";\r\nimport { mapState } from \"vuex\";\r\nimport vSelect from \"vue-select\";\r\nimport TableSelectInstitucionVue from \"../../../usuarios/GestionEstudiantes/components/TableSelectInstitucion.vue\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      arregloMostrar: [],\r\n\r\n      Activo: false,\r\n\r\n      tabPeriodo: {\r\n        id: \"\",\r\n      },\r\n      Lista: [],\r\n      Listar: [],\r\n      Listar1: [],\r\n      busquedaxcodigo: \"\",\r\n      valorBusqueda: \"0\",\r\n\r\n      checkBox_mostrarinactivos: false,\r\n      options1: [\r\n        { text: \"2024 2024\", value: \"24\" },\r\n        { text: \"2023 2023\", value: \"23\" },\r\n        { text: \"2022 2022\", value: \"22\" },\r\n        { text: \"2021 2021\", value: \"21\" },\r\n        { text: \"2020 2020\", value: \"20\" },\r\n      ],\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapState([\"auth\", \"userRoot\", \"susuario\"]),\r\n  },\r\n\r\n  components: {\r\n    TableSelectInstitucionVue,\r\n    \"v-select\": vSelect,\r\n  },\r\n  mounted() {\r\n    var institucion_id = \"\";\r\n  },\r\n  methods: {\r\n    changeHandle(e) {\r\n      let me = this;\r\n      let valor = e.change;\r\n      if (valor == \"institucion\"){ \r\n\t\t  me.institucion_id = e.value;\r\n\t\t  me.arregloMostrar = [];\r\n\t\t  me.Listar1 = [];\r\n\t\t  me.tabPeriodo.id = \"\";\r\n\t\t  me.getListar(me.institucion_id);\r\n\t  }\r\n    },\r\n    getListar(Id) {\r\n      let me = this;\r\n      me.$vs.loading();\r\n      this.Activo = true;\r\n      this.$http\r\n        .get(\r\n          this.$server_url +\r\n            \"Get_Cliente_Institucionx3pedidosanteriores?id_institucion=\" +\r\n            Id\r\n        )\r\n\r\n        .then((res) => {\r\n          me.$vs.loading.close();\r\n          if (res.data.status == 0) {\r\n            me.$vs.notify({\r\n              text: res.data.message,\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-check\",\r\n            });\r\n          }\r\n          this.Lista = res.data;\r\n          if (me.Lista.length > 0) {\r\n            me.renderValores(me.Lista);\r\n          }else{\r\n            me.$vs.notify({\r\n              text: \"No hay anticipos para esta institución\",\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-x\",\r\n            });\r\n          }\r\n\r\n          me.$vs.loading.close();\r\n        })\r\n        .catch((err) => {\r\n          if (err.response.status == 500) {\r\n            me.$vs.notify({\r\n              text: \"No hay Instituciones de esta búsqueda\",\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-x\",\r\n            });\r\n            me.Lista = [];\r\n            me.$vs.loading.close();\r\n          } else {\r\n            me.$vs.loading.close();\r\n          }\r\n        });\r\n    },\r\n    renderValores(tr) {\r\n      let me = this;\r\n      var agruparPeriodos = [];\r\n      var datosSeteados = [];\r\n      tr.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.PERIODO = element.PERIODO;\r\n        agruparPeriodos.push(cal);\r\n      });\r\n      //QUITAR ARRAYS DUPLICADOS\r\n      let hash = {};\r\n      let resultado = agruparPeriodos.filter((o) =>\r\n        hash[o.PERIODO] ? false : (hash[o.PERIODO] = true)\r\n      );\r\n      datosSeteados = resultado;\r\n      //ingresar valores en el PERIODO\r\n      datosSeteados.map((p) => {\r\n        p[\"valores\"] = tr.filter((s) => s.PERIODO == p.PERIODO);\r\n        return p;\r\n      });\r\n      let ArregloOrdenar = [];\r\n      //separar los anticipos y liquidacion\r\n      datosSeteados.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.PERIODO = element.PERIODO;\r\n        cal.estado_contrato = element.valores[0].estado_contrato;\r\n        cal.contrato = element.valores[0].ven_codigo;\r\n        cal.ven_valor = element.valores[0].venValor;\r\n        cal.ven_descuento = element.valores[0].venDescuento;\r\n        cal.anticipos = element.valores.filter((p) => p.doc_ci == \"ANT\");\r\n        cal.liquidados = element.valores.filter((p) => p.doc_ci == \"LIQ\");\r\n        ArregloOrdenar.push(cal);\r\n      });\r\n      let mostrarValores = [];\r\n      ArregloOrdenar.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.PERIODO = element.PERIODO;\r\n        cal.estado_contrato = element.estado_contrato;\r\n        cal.contrato = element.contrato;\r\n        cal.ven_valor = element.ven_valor;\r\n        cal.ven_descuento = element.ven_descuento;\r\n        let array = element.anticipos;\r\n        let array2 = element.liquidados;\r\n        cal.anticipo = array.reduce(\r\n          (a, b) => parseFloat(a) + parseFloat(b[\"doc_valor\"] || 0),\r\n          0\r\n        );\r\n        cal.liquidacion = array2.reduce(\r\n          (a, b) => parseFloat(a) + parseFloat(b[\"doc_valor\"] || 0),\r\n          0\r\n        );\r\n        mostrarValores.push(cal);\r\n      });\r\n      //ORDENAR LOS PERIODOS\r\n      me.arregloMostrar = mostrarValores.sort((a, b) => {\r\n        if (a.PERIODO < b.PERIODO) {\r\n          return 1;\r\n        }\r\n        if (a.PERIODO > b.PERIODO) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      console.log(me.arregloMostrar);\r\n      //====DEUDA====\r\n      //si existe deuda mandar a guardar la deuda y asignar como anticipo aprobado\r\n      var deuda = me.arregloMostrar[0];\r\n      var getDeuda = parseFloat(deuda.liquidacion);\r\n      //deuda\r\n      if (getDeuda < 0) {\r\n        //si  ya existe un valor en el anticipo aprobado no actualizo\r\n        if (\r\n          me.anticipoAprobado == 0 ||\r\n          me.anticipoAprobado == null ||\r\n          me.anticipoAprobado == \"\"\r\n        ) {\r\n          let datos = {\r\n            setDeuda: getDeuda,\r\n            periodo: deuda.periodo,\r\n          };\r\n          me.$emit(\"sendDeuda\", datos);\r\n        }\r\n      }\r\n    },\r\n    getListarxPeriodo(Id, per) {\r\n      let me = this;\r\n      me.$vs.loading();\r\n      this.$http\r\n        .get(\r\n          this.$server_url +\r\n            \"Get_Cliente_Institucionx3yearanterior?id_institucion=\" +\r\n            Id +\r\n            \"&ven_codigo=\" +\r\n            per\r\n        )\r\n\r\n        .then((res) => {\r\n          me.$vs.loading.close();\r\n          if (res.data.status == 0) {\r\n            me.$vs.notify({\r\n              text: res.data.message,\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-check\",\r\n            });\r\n          }\r\n          this.Listar = res.data;\r\n          if (me.Listar.length > 0) {\r\n            me.renderValores1(me.Listar);\r\n          }else{\r\n            me.$vs.notify({\r\n              text: \"No hay anticipos para esta institución\",\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-x\",\r\n            });\r\n          }\r\n\r\n          me.$vs.loading.close();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          me.$vs.loading.close();\r\n        });\r\n    },\r\n    renderValores1(tr) {\r\n      let me = this;\r\n      var agruparPeriodos = [];\r\n      var datosSeteados = [];\r\n      tr.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.periodo = element.periodo;\r\n        agruparPeriodos.push(cal);\r\n      });\r\n      //QUITAR ARRAYS DUPLICADOS\r\n      let hash = {};\r\n      let resultado = agruparPeriodos.filter((o) =>\r\n        hash[o.periodo] ? false : (hash[o.periodo] = true)\r\n      );\r\n      datosSeteados = resultado;\r\n      //ingresar valores en el periodo\r\n      datosSeteados.map((p) => {\r\n        p[\"valores\"] = tr.filter((s) => s.periodo == p.periodo);\r\n        return p;\r\n      });\r\n      let ArregloOrdenar = [];\r\n      //separar los anticipos y liquidacion\r\n      datosSeteados.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.periodo = element.periodo;\r\n        cal.estado = element.estado_contrato;\r\n        cal.contrato = element.valores[0].ven_codigo;\r\n        cal.ven_valor = element.valores[0].venValor;\r\n        cal.ven_descuento = element.valores[0].venDescuento;\r\n        cal.anticipos = element.valores.filter((p) => p.doc_ci == \"ANT\");\r\n        cal.liquidados = element.valores.filter((p) => p.doc_ci == \"LIQ\");\r\n        ArregloOrdenar.push(cal);\r\n      });\r\n      let mostrarValores = [];\r\n      ArregloOrdenar.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.periodo = element.periodo;\r\n        cal.estado = element.estado_contrato;\r\n        cal.contrato = element.contrato;\r\n        cal.ven_valor = element.ven_valor;\r\n        cal.ven_descuento = element.ven_descuento;\r\n        let array = element.anticipos;\r\n        let array2 = element.liquidados;\r\n        cal.anticipo = array.reduce(\r\n          (a, b) => parseFloat(a) + parseFloat(b[\"doc_valor\"] || 0),\r\n          0\r\n        );\r\n        cal.liquidacion = array2.reduce(\r\n          (a, b) => parseFloat(a) + parseFloat(b[\"doc_valor\"] || 0),\r\n          0\r\n        );\r\n        mostrarValores.push(cal);\r\n      });\r\n      //ORDENAR LOS PERIODOS\r\n      me.Listar1 = mostrarValores.sort((a, b) => {\r\n        if (a.periodo < b.periodo) {\r\n          return 1;\r\n        }\r\n        if (a.periodo > b.periodo) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      console.log(me.Listar1);\r\n      //====DEUDA====\r\n      //si existe deuda mandar a guardar la deuda y asignar como anticipo aprobado\r\n      var deuda = me.Listar1[0];\r\n      var getDeuda = parseFloat(deuda.liquidacion);\r\n      //deuda\r\n      if (getDeuda < 0) {\r\n        //si  ya existe un valor en el anticipo aprobado no actualizo\r\n        if (\r\n          me.anticipoAprobado == 0 ||\r\n          me.anticipoAprobado == null ||\r\n          me.anticipoAprobado == \"\"\r\n        ) {\r\n          let datos = {\r\n            setDeuda: getDeuda,\r\n            periodo: deuda.periodo,\r\n          };\r\n          me.$emit(\"sendDeuda\", datos);\r\n        }\r\n      }\r\n    },\r\n  },\r\n};\r\n",{"version":3,"sources":["comparacionliq.vue"],"names":[],"mappings":";AAmfile":"comparacionliq.vue","sourceRoot":"src/views/facturacion/10_10_1_4/documentoliq","sourcesContent":["<template>\r\n  <vx-card class=\"crear\" title=\"Busqueda por Institución\">\r\n    <vs-row vs-justify=\"flex-start\">\r\n      <vs-col vs-type=\"flex\" vs-justify=\"center\" vs-align=\"center\" vs-w=\"12\">\r\n        <TableSelectInstitucionVue\r\n          @change=\"changeHandle\"\r\n          style=\"margin-top: -25px\"\r\n          :hacerValidacion='Number(0)'\r\n        />\r\n        <!-- <vs-button\r\n          color=\"primary\"\r\n          type=\"border\"\r\n          icon=\"search\"\r\n          @click=\"getListar(institucion_id)\"\r\n        ></vs-button> -->\r\n      </vs-col>\r\n    </vs-row>\r\n    <vx-card class=\"crear\" title=\"Busqueda por Periódo\">\r\n      <vs-row vs-justify=\"left\" vs-w=\"12\" class=\"buscar\" :active.sync=\"Activo\">\r\n        <v-select\r\n          :options=\"options1\"\r\n          :reduce=\"(options1) => options1\"\r\n          label=\"text\"\r\n          class=\"small\"\r\n          value=\"value\"\r\n          v-model=\"tabPeriodo.id\"\r\n        />\r\n\r\n        <vs-button\r\n          color=\"primary\"\r\n          type=\"border\"\r\n          icon=\"search\"\r\n          @click=\"getListarxPeriodo(institucion_id, tabPeriodo.id.value)\"\r\n        ></vs-button>\r\n      </vs-row>\r\n    </vx-card>\r\n    <vs-row>\r\n      <vs-col\r\n        vs-justify=\"center\"\r\n        vs-align=\"space-between\"\r\n        vs-lg=\"12\"\r\n        vs-sm=\"12\"\r\n        vs-xs=\"12\"\r\n      >\r\n        <vs-row vs-type=\"flex\" vs-justify=\"space-between\" vs-w=\"12\">\r\n          <vs-col vs-type=\"flex\" vs-w=\"5\" vs-sm=\"12\" vs-lg=\"5\">\r\n            <vs-table max-items=\"10\" pagination :data=\"Listar1\">\r\n              <template slot=\"header\">\r\n\t\t\t  <vs-divider>3 AÑOS POSTERIORES AL AÑO SELECCIONADO</vs-divider>\r\n            <br>\r\n                <vs-chip color=\"primary\"\r\n                  >Cantidad: <b> {{ Listar1.length }}</b></vs-chip\r\n                >\r\n              </template>\r\n              <!-- {{cliCi}} -->\r\n              <template slot=\"thead\">\r\n                <vs-th width=\"300\"> Id Contrato </vs-th>\r\n                <vs-th width=\"600\"> Información contrato </vs-th>\r\n                <vs-th width=\"100\"> Periódo</vs-th>\r\n              </template>\r\n              <template slot-scope=\"{ data }\">\r\n                <vs-tr :key=\"indextr\" v-for=\"(td, indextr) in data\">\r\n                  <vs-td :data=\"data[indextr].doc_codigo\">\r\n                    {{ td.contrato }} <br />\r\n                  </vs-td>\r\n                  <vs-td>\r\n                    <br />\r\n                    <small><b>Valor contrato $:</b> {{ td.ven_valor }}</small\r\n                    ><br />\r\n                    <small><b>Comisión $:</b> {{ td.ven_descuento }} % </small><br />\r\n                    <small\r\n                      >Anticipo $: <b>{{ td.anticipo.toFixed(2) }}</b></small\r\n                    ><br />\r\n                    <small\r\n                      >Liquidación $:\r\n                      <b v-if=\"td.liquidacion < 0\" class=\"text-danger\">{{\r\n                        td.liquidacion\r\n                      }}</b>\r\n                      <b v-else>{{ td.liquidacion }}</b></small\r\n                    ><br />\r\n                  </vs-td>\r\n                  <vs-td> {{ td.periodo }} <br /> </vs-td>\r\n                </vs-tr>\r\n              </template>\r\n            </vs-table>\r\n          </vs-col>\r\n\r\n          <vs-col vs-type=\"flex\" vs-w=\"5\" vs-sm=\"12\" vs-lg=\"5\">\r\n            <vs-table max-items=\"10\" pagination :data=\"arregloMostrar\">\r\n              <template slot=\"header\">\r\n\t\t\t  <vs-divider>ULTIMOS 3 PEDIDOS </vs-divider>\r\n            <br>\r\n                <vs-chip color=\"primary\"\r\n                  >Cantidad: <b> {{ arregloMostrar.length }}</b></vs-chip\r\n                >\r\n              </template>\r\n              <template slot=\"thead\">\r\n                <vs-th width=\"300\">Id Contrato </vs-th>\r\n                <vs-th width=\"600\"> Información contrato </vs-th>\r\n                <vs-th width=\"100\"> Periódo</vs-th>\r\n              </template>\r\n              <template slot-scope=\"{ data }\">\r\n                <vs-tr :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                  <vs-td :data=\"data[indextr].doc_codigo\">\r\n                    {{ tr.contrato }} <br />\r\n                  </vs-td>\r\n\r\n                  <vs-td>\r\n                    <br />\r\n                    <small\r\n                      >Anticipo $: <b>{{ tr.anticipo.toFixed(2) }}</b></small\r\n                    ><br />\r\n                    <small\r\n                      >Liquidación $:\r\n                      <b v-if=\"tr.liquidacion < 0\" class=\"text-danger\">{{\r\n                        tr.liquidacion\r\n                      }}</b>\r\n                      <b v-else>{{ tr.liquidacion }}</b></small\r\n                    ><br />\r\n                  </vs-td>\r\n                  <vs-td> {{ tr.PERIODO }} <br /> </vs-td>\r\n                </vs-tr>\r\n              </template>\r\n            </vs-table>\r\n          </vs-col>\r\n        </vs-row>\r\n      </vs-col>\r\n    </vs-row>\r\n  </vx-card>\r\n</template>\r\n<script>\r\nimport Vue from \"vue\";\r\nimport axios from \"axios\";\r\nimport { mapState } from \"vuex\";\r\nimport vSelect from \"vue-select\";\r\nimport TableSelectInstitucionVue from \"../../../usuarios/GestionEstudiantes/components/TableSelectInstitucion.vue\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      arregloMostrar: [],\r\n\r\n      Activo: false,\r\n\r\n      tabPeriodo: {\r\n        id: \"\",\r\n      },\r\n      Lista: [],\r\n      Listar: [],\r\n      Listar1: [],\r\n      busquedaxcodigo: \"\",\r\n      valorBusqueda: \"0\",\r\n\r\n      checkBox_mostrarinactivos: false,\r\n      options1: [\r\n        { text: \"2024 2024\", value: \"24\" },\r\n        { text: \"2023 2023\", value: \"23\" },\r\n        { text: \"2022 2022\", value: \"22\" },\r\n        { text: \"2021 2021\", value: \"21\" },\r\n        { text: \"2020 2020\", value: \"20\" },\r\n      ],\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapState([\"auth\", \"userRoot\", \"susuario\"]),\r\n  },\r\n\r\n  components: {\r\n    TableSelectInstitucionVue,\r\n    \"v-select\": vSelect,\r\n  },\r\n  mounted() {\r\n    var institucion_id = \"\";\r\n  },\r\n  methods: {\r\n    changeHandle(e) {\r\n      let me = this;\r\n      let valor = e.change;\r\n      if (valor == \"institucion\"){ \r\n\t\t  me.institucion_id = e.value;\r\n\t\t  me.arregloMostrar = [];\r\n\t\t  me.Listar1 = [];\r\n\t\t  me.tabPeriodo.id = \"\";\r\n\t\t  me.getListar(me.institucion_id);\r\n\t  }\r\n    },\r\n    getListar(Id) {\r\n      let me = this;\r\n      me.$vs.loading();\r\n      this.Activo = true;\r\n      this.$http\r\n        .get(\r\n          this.$server_url +\r\n            \"Get_Cliente_Institucionx3pedidosanteriores?id_institucion=\" +\r\n            Id\r\n        )\r\n\r\n        .then((res) => {\r\n          me.$vs.loading.close();\r\n          if (res.data.status == 0) {\r\n            me.$vs.notify({\r\n              text: res.data.message,\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-check\",\r\n            });\r\n          }\r\n          this.Lista = res.data;\r\n          if (me.Lista.length > 0) {\r\n            me.renderValores(me.Lista);\r\n          }else{\r\n            me.$vs.notify({\r\n              text: \"No hay anticipos para esta institución\",\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-x\",\r\n            });\r\n          }\r\n\r\n          me.$vs.loading.close();\r\n        })\r\n        .catch((err) => {\r\n          if (err.response.status == 500) {\r\n            me.$vs.notify({\r\n              text: \"No hay Instituciones de esta búsqueda\",\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-x\",\r\n            });\r\n            me.Lista = [];\r\n            me.$vs.loading.close();\r\n          } else {\r\n            me.$vs.loading.close();\r\n          }\r\n        });\r\n    },\r\n    renderValores(tr) {\r\n      let me = this;\r\n      var agruparPeriodos = [];\r\n      var datosSeteados = [];\r\n      tr.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.PERIODO = element.PERIODO;\r\n        agruparPeriodos.push(cal);\r\n      });\r\n      //QUITAR ARRAYS DUPLICADOS\r\n      let hash = {};\r\n      let resultado = agruparPeriodos.filter((o) =>\r\n        hash[o.PERIODO] ? false : (hash[o.PERIODO] = true)\r\n      );\r\n      datosSeteados = resultado;\r\n      //ingresar valores en el PERIODO\r\n      datosSeteados.map((p) => {\r\n        p[\"valores\"] = tr.filter((s) => s.PERIODO == p.PERIODO);\r\n        return p;\r\n      });\r\n      let ArregloOrdenar = [];\r\n      //separar los anticipos y liquidacion\r\n      datosSeteados.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.PERIODO = element.PERIODO;\r\n        cal.estado_contrato = element.valores[0].estado_contrato;\r\n        cal.contrato = element.valores[0].ven_codigo;\r\n        cal.ven_valor = element.valores[0].venValor;\r\n        cal.ven_descuento = element.valores[0].venDescuento;\r\n        cal.anticipos = element.valores.filter((p) => p.doc_ci == \"ANT\");\r\n        cal.liquidados = element.valores.filter((p) => p.doc_ci == \"LIQ\");\r\n        ArregloOrdenar.push(cal);\r\n      });\r\n      let mostrarValores = [];\r\n      ArregloOrdenar.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.PERIODO = element.PERIODO;\r\n        cal.estado_contrato = element.estado_contrato;\r\n        cal.contrato = element.contrato;\r\n        cal.ven_valor = element.ven_valor;\r\n        cal.ven_descuento = element.ven_descuento;\r\n        let array = element.anticipos;\r\n        let array2 = element.liquidados;\r\n        cal.anticipo = array.reduce(\r\n          (a, b) => parseFloat(a) + parseFloat(b[\"doc_valor\"] || 0),\r\n          0\r\n        );\r\n        cal.liquidacion = array2.reduce(\r\n          (a, b) => parseFloat(a) + parseFloat(b[\"doc_valor\"] || 0),\r\n          0\r\n        );\r\n        mostrarValores.push(cal);\r\n      });\r\n      //ORDENAR LOS PERIODOS\r\n      me.arregloMostrar = mostrarValores.sort((a, b) => {\r\n        if (a.PERIODO < b.PERIODO) {\r\n          return 1;\r\n        }\r\n        if (a.PERIODO > b.PERIODO) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      console.log(me.arregloMostrar);\r\n      //====DEUDA====\r\n      //si existe deuda mandar a guardar la deuda y asignar como anticipo aprobado\r\n      var deuda = me.arregloMostrar[0];\r\n      var getDeuda = parseFloat(deuda.liquidacion);\r\n      //deuda\r\n      if (getDeuda < 0) {\r\n        //si  ya existe un valor en el anticipo aprobado no actualizo\r\n        if (\r\n          me.anticipoAprobado == 0 ||\r\n          me.anticipoAprobado == null ||\r\n          me.anticipoAprobado == \"\"\r\n        ) {\r\n          let datos = {\r\n            setDeuda: getDeuda,\r\n            periodo: deuda.periodo,\r\n          };\r\n          me.$emit(\"sendDeuda\", datos);\r\n        }\r\n      }\r\n    },\r\n    getListarxPeriodo(Id, per) {\r\n      let me = this;\r\n      me.$vs.loading();\r\n      this.$http\r\n        .get(\r\n          this.$server_url +\r\n            \"Get_Cliente_Institucionx3yearanterior?id_institucion=\" +\r\n            Id +\r\n            \"&ven_codigo=\" +\r\n            per\r\n        )\r\n\r\n        .then((res) => {\r\n          me.$vs.loading.close();\r\n          if (res.data.status == 0) {\r\n            me.$vs.notify({\r\n              text: res.data.message,\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-check\",\r\n            });\r\n          }\r\n          this.Listar = res.data;\r\n          if (me.Listar.length > 0) {\r\n            me.renderValores1(me.Listar);\r\n          }else{\r\n            me.$vs.notify({\r\n              text: \"No hay anticipos para esta institución\",\r\n              color: \"danger\",\r\n              iconPack: \"feather\",\r\n              icon: \"icon-x\",\r\n            });\r\n          }\r\n\r\n          me.$vs.loading.close();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          me.$vs.loading.close();\r\n        });\r\n    },\r\n    renderValores1(tr) {\r\n      let me = this;\r\n      var agruparPeriodos = [];\r\n      var datosSeteados = [];\r\n      tr.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.periodo = element.periodo;\r\n        agruparPeriodos.push(cal);\r\n      });\r\n      //QUITAR ARRAYS DUPLICADOS\r\n      let hash = {};\r\n      let resultado = agruparPeriodos.filter((o) =>\r\n        hash[o.periodo] ? false : (hash[o.periodo] = true)\r\n      );\r\n      datosSeteados = resultado;\r\n      //ingresar valores en el periodo\r\n      datosSeteados.map((p) => {\r\n        p[\"valores\"] = tr.filter((s) => s.periodo == p.periodo);\r\n        return p;\r\n      });\r\n      let ArregloOrdenar = [];\r\n      //separar los anticipos y liquidacion\r\n      datosSeteados.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.periodo = element.periodo;\r\n        cal.estado = element.estado_contrato;\r\n        cal.contrato = element.valores[0].ven_codigo;\r\n        cal.ven_valor = element.valores[0].venValor;\r\n        cal.ven_descuento = element.valores[0].venDescuento;\r\n        cal.anticipos = element.valores.filter((p) => p.doc_ci == \"ANT\");\r\n        cal.liquidados = element.valores.filter((p) => p.doc_ci == \"LIQ\");\r\n        ArregloOrdenar.push(cal);\r\n      });\r\n      let mostrarValores = [];\r\n      ArregloOrdenar.forEach((element) => {\r\n        var cal = new Object();\r\n        cal.periodo = element.periodo;\r\n        cal.estado = element.estado_contrato;\r\n        cal.contrato = element.contrato;\r\n        cal.ven_valor = element.ven_valor;\r\n        cal.ven_descuento = element.ven_descuento;\r\n        let array = element.anticipos;\r\n        let array2 = element.liquidados;\r\n        cal.anticipo = array.reduce(\r\n          (a, b) => parseFloat(a) + parseFloat(b[\"doc_valor\"] || 0),\r\n          0\r\n        );\r\n        cal.liquidacion = array2.reduce(\r\n          (a, b) => parseFloat(a) + parseFloat(b[\"doc_valor\"] || 0),\r\n          0\r\n        );\r\n        mostrarValores.push(cal);\r\n      });\r\n      //ORDENAR LOS PERIODOS\r\n      me.Listar1 = mostrarValores.sort((a, b) => {\r\n        if (a.periodo < b.periodo) {\r\n          return 1;\r\n        }\r\n        if (a.periodo > b.periodo) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      console.log(me.Listar1);\r\n      //====DEUDA====\r\n      //si existe deuda mandar a guardar la deuda y asignar como anticipo aprobado\r\n      var deuda = me.Listar1[0];\r\n      var getDeuda = parseFloat(deuda.liquidacion);\r\n      //deuda\r\n      if (getDeuda < 0) {\r\n        //si  ya existe un valor en el anticipo aprobado no actualizo\r\n        if (\r\n          me.anticipoAprobado == 0 ||\r\n          me.anticipoAprobado == null ||\r\n          me.anticipoAprobado == \"\"\r\n        ) {\r\n          let datos = {\r\n            setDeuda: getDeuda,\r\n            periodo: deuda.periodo,\r\n          };\r\n          me.$emit(\"sendDeuda\", datos);\r\n        }\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]}]}