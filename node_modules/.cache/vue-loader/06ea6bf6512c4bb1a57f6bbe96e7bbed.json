{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\GenerateCodigos.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\GenerateCodigos.vue","mtime":1712682815620},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nexport default{\r\n  name:'GenerateCodigosVue',\r\n  data(){\r\n    return{\r\n      usuario:[],\r\n      arregloLibros:[],\r\n      codigosGenerado:[],\r\n      codigosVerificados:[],\r\n      estado_codigo_fisico:2,\r\n      verCodigos:false,\r\n      porcentaje:0,\r\n      //variables de excel\r\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n      cellAutoWidth: true,\r\n      selectedFormat: 'xlsx',\r\n    }\r\n  },\r\n  computed:{\r\n    sumaSelect(){\r\n        let me = this;\r\n        let filter = []\r\n        var suma = 0;\r\n        filter = me.arregloLibros.filter(p => p.cantidad > 0)\r\n        if(filter.length >0){\r\n            let total = filter.reduce((a, b) => parseInt(a) + parseInt((b[\"cantidad\"] || 0)), 0);\r\n            suma = suma+ total;\r\n        }else{\r\n            return 0;\r\n        }\r\n        return suma;\r\n    },\r\n  },\r\n  created(){\r\n    let me = this;\r\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n  },\r\n  mounted(){\r\n    let me = this;\r\n    me.getLibros()\r\n  },\r\n  methods:{\r\n    getLibros() {\r\n      let me = this\r\n      me.porcentaje = 0;\r\n      this.$http.get(this.$server_url+`libros_series`).then(res => {\r\n        me.arregloLibros = res.data;\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error)\r\n      })\r\n    },\r\n    openConfirm(){\r\n      this.porcentaje = 0;\r\n      this.$vs.dialog({\r\n        type:'confirm',\r\n        color: 'danger',\r\n        title: `Confirm`,\r\n        text: 'Esta seguro de generar estos códigos?',\r\n        accept:this.generarCodigos\r\n      })\r\n    },\r\n    generarCodigos(){\r\n      let me = this;\r\n      let formData = new FormData();\r\n      //enviar solo los que tienen mayor a 0\r\n      let filter = []\r\n      filter = me.arregloLibros.filter(p => p.cantidad > 0)\r\n      formData.append('responsable',  me.usuario.idusuario);\r\n      formData.append('data_codigos', JSON.stringify(filter));\r\n      formData.append('estado_codigo_fisico',me.estado_codigo_fisico)\r\n      me.$vs.loading()\r\n        this.$http.post(this.$server_url+'generarCodigosUnicos', formData)\r\n        .then(res => {\r\n          me.$vs.loading.close()\r\n          me.codigosGenerado = res.data.codigos\r\n          me.codigosVerificados = res.data.codigosVerificados\r\n          if(me.codigosVerificados.length > 0){\r\n            me.verCodigos = true;\r\n          }\r\n          me.porcentaje      = res.data.porcentaje\r\n          me.exportToExcel()\r\n          me.$vs.notify({\r\n          text:'Se guardo correctamente',\r\n          color:'success',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'\r\n        })\r\n        .catch(function (error) {\r\n            me.$vs.loading.close()\r\n        })\r\n      })\r\n    },\r\n    exportToExcel() {\r\n      let headerTitle = ['codigo','libro'];\r\n      let headerVal = ['codigo', 'libro',];\r\n      let codigoSelectedMayus = this.codigosGenerado\r\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n        for (var key in codigoSelectedMayus[i]) {\r\n          if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n            codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n          }\r\n        }\r\n      }\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const list = codigoSelectedMayus\r\n        const data = this.formatJson(headerVal, list)\r\n        excel.export_json_to_excel({\r\n          header: headerTitle,\r\n          data,\r\n          filename: 'Codigos generados',\r\n          autoWidth: this.cellAutoWidth,\r\n          bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n        this.guardarActivo = '';\r\n        this.generarActivo = ' ';\r\n        this.textAlertCant = '';\r\n        this.cantidad = '';\r\n        this.codigoSelected = [];\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n      return jsonData.map(v => filterVal.map(j => {\r\n        return v[j]\r\n      }))\r\n    },\r\n  }\r\n}\r\n",{"version":3,"sources":["GenerateCodigos.vue"],"names":[],"mappingsfile":"GenerateCodigos.vue","sourceRoot":"src/views/codigos/components","sourcesContent":["<template>\r\n  <vx-card\r\n  title=\"Generaración de códigos\"\r\n  title-color=\"primary\" subtitle=\"Ingrese el valor de los libros que desea generar\"\r\n  >\r\n  <p class=\"text-success font-bold\"><i class=\"fa-solid fa-code\"></i> {{sumaSelect}} códigos seleccionados</p>\r\n  <vs-divider></vs-divider>\r\n  <vs-alert class=\"mt-4\" v-if=\"(porcentaje > 0)\">Se generaron {{porcentaje}} codigos</vs-alert>\r\n  <div class=\"flex\">\r\n    <vs-button color=\"success\" class=\"mt-5\"  type=\"gradient\" @click=\"openConfirm()\">Generar códigos</vs-button>\r\n    <vs-button color=\"warning\" class=\"mt-5 ml-2\" type=\"gradient\" @click=\"getLibros()\">Resetear</vs-button>\r\n    <ul class=\"flex ml-4\" style=\"margin-top: 30px;\">\r\n      <li>\r\n        <vs-radio v-model=\"estado_codigo_fisico\" vs-name=\"radios1\" vs-value=\"2\">Desprendido</vs-radio>\r\n      </li>\r\n      <li>\r\n        <vs-radio v-model=\"estado_codigo_fisico\" class=\"ml-2\" vs-name=\"radios1\" vs-value=\"1\">Liquidado</vs-radio>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n    <vs-table max-items=\"50\" search pagination :data=\"arregloLibros\">\r\n      <template slot=\"header\">\r\n        <div>\r\n        <p>Cantidad: <span>{{arregloLibros.length}}</span> </p>\r\n        </div>\r\n      </template>\r\n      <template slot=\"thead\">\r\n          <vs-th>Libro</vs-th>\r\n          <vs-th>Acciones</vs-th>\r\n      </template>\r\n      <template slot-scope=\"{data}\">\r\n        <vs-tr :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n          <vs-td>\r\n            {{ tr.nombrelibro }} <br>\r\n            <small>{{tr.codigo_liquidacion}}</small>\r\n          </vs-td>\r\n          <vs-td>\r\n            <vs-input icon-after=\"true\" label-placeholder=\"icon-after\" min=\"0\" type=\"number\" icon=\"mode_edit\" placeholder=\"Cantidad a generar\" v-model=\"tr.cantidad\"/>\r\n          </vs-td>\r\n        </vs-tr>\r\n      </template>\r\n    </vs-table>\r\n    <!--MODALES-->\r\n    <vs-popup class=\"holamundo\"  :title=\"porcentaje +' Codigos generados'\" :active.sync=\"verCodigos\">\r\n      <vs-table max-items=\"10\" search pagination :data=\"codigosVerificados\">\r\n          <template slot=\"header\">\r\n            <vs-chip color=\"primary\">Cantidad: {{codigosVerificados.length}}</vs-chip>\r\n          </template>\r\n          <template slot=\"thead\">\r\n            <vs-th>Codigo</vs-th>\r\n            <vs-th>libro</vs-th>\r\n            <vs-th>Fecha create</vs-th>\r\n            <vs-th>Estado fisico</vs-th>\r\n          </template>\r\n          <template slot-scope=\"{data}\">\r\n            <vs-tr :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n              <vs-td>\r\n                {{data[indextr].codigo}}<br>\r\n              </vs-td>\r\n              <vs-td>\r\n                {{data[indextr].libro}}<br>\r\n              </vs-td>\r\n              <vs-td>\r\n                {{data[indextr].fecha_create}}<br>\r\n              </vs-td>\r\n              <vs-td>\r\n                <vs-chip color=\"primary\" v-if=\"tr.estado_codigo_fisico == 1\">Uso Liquidado</vs-chip>\r\n                <vs-chip color=\"success\" v-if=\"tr.estado_codigo_fisico == 2\">Uso Desprendidos</vs-chip>\r\n                <vs-chip v-if=\"tr.estado_codigo_fisico == 0\">uso normal</vs-chip>\r\n              </vs-td>\r\n            </vs-tr>\r\n          </template>\r\n      </vs-table>\r\n    </vs-popup>\r\n  </vx-card>\r\n</template>\r\n<script>\r\nexport default{\r\n  name:'GenerateCodigosVue',\r\n  data(){\r\n    return{\r\n      usuario:[],\r\n      arregloLibros:[],\r\n      codigosGenerado:[],\r\n      codigosVerificados:[],\r\n      estado_codigo_fisico:2,\r\n      verCodigos:false,\r\n      porcentaje:0,\r\n      //variables de excel\r\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n      cellAutoWidth: true,\r\n      selectedFormat: 'xlsx',\r\n    }\r\n  },\r\n  computed:{\r\n    sumaSelect(){\r\n        let me = this;\r\n        let filter = []\r\n        var suma = 0;\r\n        filter = me.arregloLibros.filter(p => p.cantidad > 0)\r\n        if(filter.length >0){\r\n            let total = filter.reduce((a, b) => parseInt(a) + parseInt((b[\"cantidad\"] || 0)), 0);\r\n            suma = suma+ total;\r\n        }else{\r\n            return 0;\r\n        }\r\n        return suma;\r\n    },\r\n  },\r\n  created(){\r\n    let me = this;\r\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n  },\r\n  mounted(){\r\n    let me = this;\r\n    me.getLibros()\r\n  },\r\n  methods:{\r\n    getLibros() {\r\n      let me = this\r\n      me.porcentaje = 0;\r\n      this.$http.get(this.$server_url+`libros_series`).then(res => {\r\n        me.arregloLibros = res.data;\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error)\r\n      })\r\n    },\r\n    openConfirm(){\r\n      this.porcentaje = 0;\r\n      this.$vs.dialog({\r\n        type:'confirm',\r\n        color: 'danger',\r\n        title: `Confirm`,\r\n        text: 'Esta seguro de generar estos códigos?',\r\n        accept:this.generarCodigos\r\n      })\r\n    },\r\n    generarCodigos(){\r\n      let me = this;\r\n      let formData = new FormData();\r\n      //enviar solo los que tienen mayor a 0\r\n      let filter = []\r\n      filter = me.arregloLibros.filter(p => p.cantidad > 0)\r\n      formData.append('responsable',  me.usuario.idusuario);\r\n      formData.append('data_codigos', JSON.stringify(filter));\r\n      formData.append('estado_codigo_fisico',me.estado_codigo_fisico)\r\n      me.$vs.loading()\r\n        this.$http.post(this.$server_url+'generarCodigosUnicos', formData)\r\n        .then(res => {\r\n          me.$vs.loading.close()\r\n          me.codigosGenerado = res.data.codigos\r\n          me.codigosVerificados = res.data.codigosVerificados\r\n          if(me.codigosVerificados.length > 0){\r\n            me.verCodigos = true;\r\n          }\r\n          me.porcentaje      = res.data.porcentaje\r\n          me.exportToExcel()\r\n          me.$vs.notify({\r\n          text:'Se guardo correctamente',\r\n          color:'success',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'\r\n        })\r\n        .catch(function (error) {\r\n            me.$vs.loading.close()\r\n        })\r\n      })\r\n    },\r\n    exportToExcel() {\r\n      let headerTitle = ['codigo','libro'];\r\n      let headerVal = ['codigo', 'libro',];\r\n      let codigoSelectedMayus = this.codigosGenerado\r\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n        for (var key in codigoSelectedMayus[i]) {\r\n          if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n            codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n          }\r\n        }\r\n      }\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const list = codigoSelectedMayus\r\n        const data = this.formatJson(headerVal, list)\r\n        excel.export_json_to_excel({\r\n          header: headerTitle,\r\n          data,\r\n          filename: 'Codigos generados',\r\n          autoWidth: this.cellAutoWidth,\r\n          bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n        this.guardarActivo = '';\r\n        this.generarActivo = ' ';\r\n        this.textAlertCant = '';\r\n        this.cantidad = '';\r\n        this.codigoSelected = [];\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n      return jsonData.map(v => filterVal.map(j => {\r\n        return v[j]\r\n      }))\r\n    },\r\n  }\r\n}\r\n</script>\r\n"]}]}