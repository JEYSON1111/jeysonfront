{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\content\\FormFormat\\Form.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\content\\FormFormat\\Form.vue","mtime":1712682815556},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport InputModel from '@/models/InputModel';\r\nimport vSelect from 'vue-select';\r\nexport default ({\r\n  components: {\r\n    vSelect,\r\n  },\r\n  props: {\r\n    area: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      contenidos: [],\r\n      tipos: [\r\n        {\r\n          name: \"Texto corto\",\r\n          type: \"texto corto\",\r\n        },\r\n        {\r\n          name: \"Menú de opciones\",\r\n          type: \"menu de opciones\",\r\n        },\r\n        {\r\n          name: \"Editor de texto\",\r\n          type: \"editor de texto\",\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    agregarContenido() {\r\n      this.contenidos.push(\r\n        new InputModel(\r\n          'nombre del campo',\r\n          'texto corto',\r\n          [],\r\n        )\r\n      );\r\n    },\r\n    removerContenido(index) {\r\n      this.contenidos.splice(index, 1); // Remover el elemento del arreglo\r\n    },\r\n    agregarOpciones(event, contenido) {\r\n      const valorInput = event; // El valor del input está directamente en event\r\n      if (valorInput.includes(',')) {\r\n        const opciones = valorInput.split(',');\r\n        contenido.opciones = [...contenido.opciones, ...opciones]; // Agregar opciones\r\n        contenido.opciones = [...new Set(contenido.opciones)]; // Remover duplicados\r\n        contenido.opciones = contenido.opciones.filter((o) => o !== ''); // Remover vacíos\r\n      }\r\n    },\r\n    removerOpciones(opcion, contenido) {\r\n      contenido.opciones = contenido.opciones.filter((o) => o !== opcion); // Remover la opción del arreglo\r\n    },\r\n    async guardarFormato() {\r\n      const me = this;\r\n\r\n      me.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para guardar el formato del contenido\r\n      await me.$http.post(`${me.$server_url}contenido/formato/${this.$props.area.idarea}/store`, {\r\n        area: this.$props.area,\r\n        contenidos: this.contenidos\r\n      }).then((res) => {\r\n        me.$vs.notify({\r\n          title: 'Éxito',\r\n          text: res.data.message,\r\n          color: 'success',\r\n          position: 'top-right',\r\n        });\r\n      }).catch((err) => {\r\n        me.$vs.loading.close();\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close();\r\n        location.reload();\r\n      })\r\n    },\r\n    async obtenerFormato() {\r\n      const me = this;\r\n\r\n      me.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para obtener el formato del contenido\r\n      await me.$http.get(`${me.$server_url}contenidos/formatos?areaId=${me.$props.area.idarea}`).then((res) => {\r\n        const data = res.data.data; // Asigna los datos obtenidos a la variable 'data'\r\n        me.contenidos = JSON.parse(data.contenidoformato); // Parsea la cadena JSON a un objeto\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close(); // Cierra el indicador de carga\r\n      });\r\n    },\r\n  },\r\n  mounted() {\r\n    this.obtenerFormato(); // Obtiene el formato del contenido\r\n  }\r\n})\r\n",{"version":3,"sources":["Form.vue"],"names":[],"mappings":";AAqfile":"Form.vue","sourceRoot":"src/views/biblioteca/content/FormFormat","sourcesContent":["<template>\r\n  <div class=\"w-full h-full\">\r\n    <div v-if=\"contenidos.length === 0\" class=\"mb-4\">\r\n      <span>\r\n        Agrega los elementos que deberá contener el formato para guardar contenido relacionado al área de\r\n        <span class=\"text-indigo-900 font-bold\">{{ area.nombrearea }}</span>\r\n      </span>\r\n    </div>\r\n    <div class=\"flex flex-col space-y-2\">\r\n      <div v-for=\"(contenido, index) in contenidos\" :key=\"index\" class=\"w-full p-2 my-2 rounded shadow\">\r\n        <div class=\"flex justify-between items-baseline\">\r\n          <span>{{ contenido.label === '' ? 'Aquí va el nombre del campo' : contenido.label }}</span>\r\n          <vs-button type=\"border\" color=\"danger\" class=\"p-1 flex justify-center items-center\"\r\n            @click=\"removerContenido(index)\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#EA5455\" height=\"1em\" viewBox=\"0 0 512 512\">\r\n              <path\r\n                d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z\" />\r\n            </svg>\r\n            &nbsp;\r\n            Remover\r\n          </vs-button>\r\n        </div>\r\n        <vs-divider class=\"mb-6 bt-2\" />\r\n        <vs-input label-placeholder=\"Nombre del campo (label)\" v-model=\"contenido.label\" class=\"w-full\" />\r\n        <v-select class=\"w-full\" label=\"name\" :options=\"tipos\" :reduce=\"tipos => tipos.type\" v-model=\"contenido.tipo\">\r\n          <template #header>Tipo de campo</template>\r\n        </v-select>\r\n        <div v-if=\"contenido.tipo === 'menu de opciones'\">\r\n          <span class=\"font-bold\">Agregar opciones <span class=\"text-xs text-gray font-light\">(separar con\r\n              \",\")</span></span>\r\n          <vs-input class=\"w-full\" @input=\"agregarOpciones($event, contenido)\"></vs-input>\r\n          <vs-chip v-for=\"(opcion, index) in contenido.opciones\" :key=\"index\" closable class=\"my-4 mr-2\"\r\n            @click=\"removerOpciones(opcion, contenido)\">\r\n            <span class=\"text-black font-semibold\">{{ opcion }}</span>\r\n          </vs-chip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div @click=\"agregarContenido\"\r\n      class=\"w-full border border-gray-500 p-4 shadow dotted-border rounded flex justify-center space-x-4 items-center\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"mr-4\" height=\"1em\" viewBox=\"0 0 512 512\">\r\n        <path\r\n          d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM232 344V280H168c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V168c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H280v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z\" />\r\n      </svg>\r\n      Agregar elemento\r\n    </div>\r\n    <div class=\"flex justify-end mt-4\">\r\n      <vs-button type=\"border\" @click=\"guardarFormato\">Guardar</vs-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport InputModel from '@/models/InputModel';\r\nimport vSelect from 'vue-select';\r\nexport default ({\r\n  components: {\r\n    vSelect,\r\n  },\r\n  props: {\r\n    area: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      contenidos: [],\r\n      tipos: [\r\n        {\r\n          name: \"Texto corto\",\r\n          type: \"texto corto\",\r\n        },\r\n        {\r\n          name: \"Menú de opciones\",\r\n          type: \"menu de opciones\",\r\n        },\r\n        {\r\n          name: \"Editor de texto\",\r\n          type: \"editor de texto\",\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    agregarContenido() {\r\n      this.contenidos.push(\r\n        new InputModel(\r\n          'nombre del campo',\r\n          'texto corto',\r\n          [],\r\n        )\r\n      );\r\n    },\r\n    removerContenido(index) {\r\n      this.contenidos.splice(index, 1); // Remover el elemento del arreglo\r\n    },\r\n    agregarOpciones(event, contenido) {\r\n      const valorInput = event; // El valor del input está directamente en event\r\n      if (valorInput.includes(',')) {\r\n        const opciones = valorInput.split(',');\r\n        contenido.opciones = [...contenido.opciones, ...opciones]; // Agregar opciones\r\n        contenido.opciones = [...new Set(contenido.opciones)]; // Remover duplicados\r\n        contenido.opciones = contenido.opciones.filter((o) => o !== ''); // Remover vacíos\r\n      }\r\n    },\r\n    removerOpciones(opcion, contenido) {\r\n      contenido.opciones = contenido.opciones.filter((o) => o !== opcion); // Remover la opción del arreglo\r\n    },\r\n    async guardarFormato() {\r\n      const me = this;\r\n\r\n      me.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para guardar el formato del contenido\r\n      await me.$http.post(`${me.$server_url}contenido/formato/${this.$props.area.idarea}/store`, {\r\n        area: this.$props.area,\r\n        contenidos: this.contenidos\r\n      }).then((res) => {\r\n        me.$vs.notify({\r\n          title: 'Éxito',\r\n          text: res.data.message,\r\n          color: 'success',\r\n          position: 'top-right',\r\n        });\r\n      }).catch((err) => {\r\n        me.$vs.loading.close();\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close();\r\n        location.reload();\r\n      })\r\n    },\r\n    async obtenerFormato() {\r\n      const me = this;\r\n\r\n      me.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para obtener el formato del contenido\r\n      await me.$http.get(`${me.$server_url}contenidos/formatos?areaId=${me.$props.area.idarea}`).then((res) => {\r\n        const data = res.data.data; // Asigna los datos obtenidos a la variable 'data'\r\n        me.contenidos = JSON.parse(data.contenidoformato); // Parsea la cadena JSON a un objeto\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close(); // Cierra el indicador de carga\r\n      });\r\n    },\r\n  },\r\n  mounted() {\r\n    this.obtenerFormato(); // Obtiene el formato del contenido\r\n  }\r\n})\r\n</script>\r\n\r\n<style>\r\n.dotted-border {\r\n  border: 1px dashed #ccc;\r\n}\r\n\r\n.dotted-border:hover {\r\n  border: 1px dashed #000;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"]}]}