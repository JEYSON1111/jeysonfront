{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\PreguntasInstituciones\\AsignarPreguntas.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\PreguntasInstituciones\\AsignarPreguntas.vue","mtime":1712682815862},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\n  import vSelect from 'vue-select'\r\n  const TablaPreguntasVue   = () => import('./TablaPreguntas.vue')\r\n  const ConfirmEliminarVue  = () => import('../../configuracion/Reutilizable/ConfirmEliminar.vue');\r\n  export default {\r\n      components: {\r\n        'v-select': vSelect,\r\n        TablaPreguntasVue,\r\n        ConfirmEliminarVue\r\n      },\r\n      data() {\r\n          return {\r\n              asignaturaSelected: '',\r\n              asignaturas: [],\r\n              asignatura: {\r\n                  id: '',\r\n                  label: ''\r\n              },\r\n              arrayPreguntas: [],\r\n              arrayPreguntasSelected: [],\r\n              pregSelected: '',\r\n              show: false,\r\n              usuario:[],\r\n              popupAsignar:false,\r\n              institucionSelected:'',\r\n              popupConfirm:false,\r\n              popupNoAsignadas:false,\r\n          };\r\n      },\r\n      props: {\r\n        arrayInstituciones: {\r\n          type: Array,\r\n          default: () => []\r\n        },\r\n        asignaturas: {\r\n          type: Array,\r\n          default: () => []\r\n        }\r\n      },\r\n      created() {\r\n          let me = this;\r\n          me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n      },\r\n      mounted() {\r\n          let me = this;\r\n      },\r\n      methods: {\r\n        changeConfirm(e){\r\n          let me = this;\r\n          //cancelar\r\n          if(e == 0) { me.popupConfirm = false;  }\r\n          //asignar\r\n          if(e == 1) { me.asignarPreguntas(); }\r\n        },\r\n        asignarPreguntas(){\r\n          let me = this;\r\n          me.arrayNoIngresadas = []\r\n          if(me.institucionSelected == null || me.institucionSelected == ''){\r\n            me.$vs.notify({\r\n              title: 'Error',\r\n              text: 'Debe seleccionar una institución',\r\n              iconPack: 'feather',\r\n              icon: 'icon-alert-circle',\r\n              color: 'danger'\r\n            })\r\n            return\r\n          }\r\n          me.$vs.loading()\r\n          const formData = new FormData();\r\n          formData.append('institucion_id', me.institucionSelected);\r\n          formData.append('user_created',   me.usuario.idusuario);\r\n          formData.append('arrayPreguntas', JSON.stringify(me.arrayPreguntasSelected));\r\n          this.$http.post(this.$server_url + 'asignar_preguntas_institucion', formData)\r\n          .then(res => {\r\n            me.$vs.loading.close()\r\n            //si no se asignaron preguntas\r\n            me.popupAsignar = false\r\n            me.popupConfirm = false\r\n            if(res.data.preguntasIngresadas == 0){\r\n              me.$vs.notify({\r\n                title: 'Error',\r\n                text: 'Preguntas ya asignadas con anterioridad',\r\n                iconPack: 'feather',\r\n                icon: 'icon-alert-circle',\r\n                color: 'danger'\r\n              })\r\n            }else{\r\n              //si se asignaron preguntas\r\n              me.$vs.notify({\r\n                title: 'Exito',\r\n                text: `${ res.data.preguntasIngresadas } Preguntas  asignadas correctamente`,\r\n                iconPack: 'feather',\r\n                icon: 'icon-check',\r\n                color: 'success',\r\n                time:6000\r\n              })\r\n            }\r\n            //preguntas que no se asignaron que estan ingresada\r\n            if(res.data.preguntasYaIngresadas.length > 0){\r\n              me.checkPreguntasIngresadas(res.data.preguntasYaIngresadas)\r\n            }\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({\r\n              title: 'Error',\r\n              text: 'Error al asignar las preguntas',\r\n              iconPack: 'feather',\r\n              icon: 'icon-alert-circle',\r\n              color: 'danger'\r\n            })\r\n          })\r\n        },\r\n        checkPreguntasIngresadas(preguntas){\r\n          let me = this;\r\n          me.arrayNoIngresadas = preguntas\r\n          me.popupNoAsignadas = true\r\n        },\r\n\r\n        changeAsignar(e,datos){\r\n          this.arrayPreguntasSelected = datos\r\n          this.popupAsignar           = true\r\n        },\r\n        filtrarPreguntas() {\r\n            let me = this;\r\n            me.arrayPreguntas = []\r\n            if (me.asignaturaSelected == null || me.asignaturaSelected == '') {\r\n                me.$vs.notify({\r\n                    title: 'Error',\r\n                    text: 'Debe seleccionar una asignatura',\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-alert-circle',\r\n                    color: 'danger'\r\n                })\r\n                return\r\n            }\r\n            me.$vs.loading()\r\n            const formData = new FormData();\r\n            formData.append('asignatura', me.asignaturaSelected.id);\r\n            formData.append('idusuario',  me.usuario.idusuario);\r\n            this.$http.post(this.$server_url + 'temas_preguntas_respuestas', formData)\r\n            .then(res => {\r\n              me.$vs.loading.close()\r\n              me.arrayPreguntas = res.data\r\n                //si esta vacio el array mostrar un alert\r\n                if(me.arrayPreguntas.length == 0){\r\n                    me.$vs.notify({\r\n                        title: 'Error',\r\n                        text: 'No hay preguntas para esta asignatura',\r\n                        iconPack: 'feather',\r\n                        icon: 'icon-alert-circle',\r\n                        color: 'danger'\r\n                    })\r\n                }\r\n            })\r\n              .catch(function (error) {\r\n                console.log(error);\r\n                me.$vs.loading.close()\r\n                me.$vs.notify({\r\n                  title: 'Error',\r\n                  text: 'Error al cargar las preguntas',\r\n                  iconPack: 'feather',\r\n                  icon: 'icon-alert-circle',\r\n                  color: 'danger'\r\n                })\r\n            })\r\n        },\r\n      }\r\n  };\r\n  ",{"version":3,"sources":["AsignarPreguntas.vue"],"names":[],"mappings":";AAyfile":"AsignarPreguntas.vue","sourceRoot":"src/views/evaluaciones/PreguntasInstituciones","sourcesContent":["<template>\r\n  <vx-card class='vx-col w-full mt-4'>\r\n    <div class=\"vx-row mb-5 mt-4\">\r\n        <div class=\"vx-col sm:w-1/2 w-full\">\r\n            Seleccionar asignatura:\r\n            <v-select class=\"mb-2\" v-model=\"asignaturaSelected\" :options=\"asignaturas\" @input=\"filtrarPreguntas()\" />\r\n        </div>\r\n    </div>\r\n    <div>\r\n      <TablaPreguntasVue :arrayPreguntas=\"arrayPreguntas\" @changeAsignar=\"changeAsignar\"/>\r\n    </div>\r\n    <!--MODLALES-->\r\n    <!--MODLAL PARA ASIGNAR A INSTITUCION-->\r\n    <vs-popup classContent=\"popup-example\" title=\"Preguntas que seras asignadas\" :active.sync=\"popupAsignar\" fullscreen>\r\n      <!--select de institucion-->\r\n      <div class=\"vx-row mb-6\">\r\n        <div class=\"vx-col sm:w-1/3 w-full\">\r\n          <span>Seleccione la institución</span>\r\n        </div>\r\n        <div class=\"vx-col sm:w-2/3 w-full\">\r\n          <v-select :options=\"arrayInstituciones\" :reduce=\"arrayInstituciones => arrayInstituciones.idinstitucion\" label=\"nombreinstitucion\" class=\"w-full\" v-model=\"institucionSelected\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"flex justify-center\">\r\n        <vs-button color=\"rgb(11, 189, 135)\" v-if=\"institucionSelected\" @click=\"popupConfirm=true;\" type=\"border\" icon=\"check\">Asignar preguntas a la institución</vs-button>\r\n      </div>\r\n      <vs-divider>{{arrayPreguntasSelected.length}} Preguntas que seras asignadas (?)</vs-divider>\r\n      <TablaPreguntasVue v-if=\"popupAsignar\" btnAsignar=\"0\" :arrayPreguntas=\"arrayPreguntasSelected\" :isMultipleEnabled=\"Boolean(false)\"/>\r\n      <!--POPOP DE CONFIRMACION-->\r\n      <vs-popup title=\"Confirmación\" :active.sync=\"popupConfirm\">\r\n        <ConfirmEliminarVue otroValor=\"1\" title=\"Estás seguro de asignar estas preguntas a la institución?\" subtitle=\"Si, deseo asignar\" @changeConfirm=\"changeConfirm\"/>\r\n      </vs-popup>\r\n    </vs-popup>\r\n    <!--MODAL PARA MOSTRAR PREGUNTAS QUE NO SE ASIGNARON-->\r\n    <vs-popup classContent=\"popup-example\" title=\"preguntas ya asignadas con anterioridad\" :active.sync=\"popupNoAsignadas\" fullscreen>\r\n      <TablaPreguntasVue v-if=\"popupNoAsignadas\" :arrayPreguntas=\"arrayNoIngresadas\" :isMultipleEnabled=\"Boolean(false)\"/>\r\n    </vs-popup>\r\n  </vx-card>\r\n  </template>\r\n\r\n  <script>\r\n  import vSelect from 'vue-select'\r\n  const TablaPreguntasVue   = () => import('./TablaPreguntas.vue')\r\n  const ConfirmEliminarVue  = () => import('../../configuracion/Reutilizable/ConfirmEliminar.vue');\r\n  export default {\r\n      components: {\r\n        'v-select': vSelect,\r\n        TablaPreguntasVue,\r\n        ConfirmEliminarVue\r\n      },\r\n      data() {\r\n          return {\r\n              asignaturaSelected: '',\r\n              asignaturas: [],\r\n              asignatura: {\r\n                  id: '',\r\n                  label: ''\r\n              },\r\n              arrayPreguntas: [],\r\n              arrayPreguntasSelected: [],\r\n              pregSelected: '',\r\n              show: false,\r\n              usuario:[],\r\n              popupAsignar:false,\r\n              institucionSelected:'',\r\n              popupConfirm:false,\r\n              popupNoAsignadas:false,\r\n          };\r\n      },\r\n      props: {\r\n        arrayInstituciones: {\r\n          type: Array,\r\n          default: () => []\r\n        },\r\n        asignaturas: {\r\n          type: Array,\r\n          default: () => []\r\n        }\r\n      },\r\n      created() {\r\n          let me = this;\r\n          me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n      },\r\n      mounted() {\r\n          let me = this;\r\n      },\r\n      methods: {\r\n        changeConfirm(e){\r\n          let me = this;\r\n          //cancelar\r\n          if(e == 0) { me.popupConfirm = false;  }\r\n          //asignar\r\n          if(e == 1) { me.asignarPreguntas(); }\r\n        },\r\n        asignarPreguntas(){\r\n          let me = this;\r\n          me.arrayNoIngresadas = []\r\n          if(me.institucionSelected == null || me.institucionSelected == ''){\r\n            me.$vs.notify({\r\n              title: 'Error',\r\n              text: 'Debe seleccionar una institución',\r\n              iconPack: 'feather',\r\n              icon: 'icon-alert-circle',\r\n              color: 'danger'\r\n            })\r\n            return\r\n          }\r\n          me.$vs.loading()\r\n          const formData = new FormData();\r\n          formData.append('institucion_id', me.institucionSelected);\r\n          formData.append('user_created',   me.usuario.idusuario);\r\n          formData.append('arrayPreguntas', JSON.stringify(me.arrayPreguntasSelected));\r\n          this.$http.post(this.$server_url + 'asignar_preguntas_institucion', formData)\r\n          .then(res => {\r\n            me.$vs.loading.close()\r\n            //si no se asignaron preguntas\r\n            me.popupAsignar = false\r\n            me.popupConfirm = false\r\n            if(res.data.preguntasIngresadas == 0){\r\n              me.$vs.notify({\r\n                title: 'Error',\r\n                text: 'Preguntas ya asignadas con anterioridad',\r\n                iconPack: 'feather',\r\n                icon: 'icon-alert-circle',\r\n                color: 'danger'\r\n              })\r\n            }else{\r\n              //si se asignaron preguntas\r\n              me.$vs.notify({\r\n                title: 'Exito',\r\n                text: `${ res.data.preguntasIngresadas } Preguntas  asignadas correctamente`,\r\n                iconPack: 'feather',\r\n                icon: 'icon-check',\r\n                color: 'success',\r\n                time:6000\r\n              })\r\n            }\r\n            //preguntas que no se asignaron que estan ingresada\r\n            if(res.data.preguntasYaIngresadas.length > 0){\r\n              me.checkPreguntasIngresadas(res.data.preguntasYaIngresadas)\r\n            }\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({\r\n              title: 'Error',\r\n              text: 'Error al asignar las preguntas',\r\n              iconPack: 'feather',\r\n              icon: 'icon-alert-circle',\r\n              color: 'danger'\r\n            })\r\n          })\r\n        },\r\n        checkPreguntasIngresadas(preguntas){\r\n          let me = this;\r\n          me.arrayNoIngresadas = preguntas\r\n          me.popupNoAsignadas = true\r\n        },\r\n\r\n        changeAsignar(e,datos){\r\n          this.arrayPreguntasSelected = datos\r\n          this.popupAsignar           = true\r\n        },\r\n        filtrarPreguntas() {\r\n            let me = this;\r\n            me.arrayPreguntas = []\r\n            if (me.asignaturaSelected == null || me.asignaturaSelected == '') {\r\n                me.$vs.notify({\r\n                    title: 'Error',\r\n                    text: 'Debe seleccionar una asignatura',\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-alert-circle',\r\n                    color: 'danger'\r\n                })\r\n                return\r\n            }\r\n            me.$vs.loading()\r\n            const formData = new FormData();\r\n            formData.append('asignatura', me.asignaturaSelected.id);\r\n            formData.append('idusuario',  me.usuario.idusuario);\r\n            this.$http.post(this.$server_url + 'temas_preguntas_respuestas', formData)\r\n            .then(res => {\r\n              me.$vs.loading.close()\r\n              me.arrayPreguntas = res.data\r\n                //si esta vacio el array mostrar un alert\r\n                if(me.arrayPreguntas.length == 0){\r\n                    me.$vs.notify({\r\n                        title: 'Error',\r\n                        text: 'No hay preguntas para esta asignatura',\r\n                        iconPack: 'feather',\r\n                        icon: 'icon-alert-circle',\r\n                        color: 'danger'\r\n                    })\r\n                }\r\n            })\r\n              .catch(function (error) {\r\n                console.log(error);\r\n                me.$vs.loading.close()\r\n                me.$vs.notify({\r\n                  title: 'Error',\r\n                  text: 'Error al cargar las preguntas',\r\n                  iconPack: 'feather',\r\n                  icon: 'icon-alert-circle',\r\n                  color: 'danger'\r\n                })\r\n            })\r\n        },\r\n      }\r\n  };\r\n  </script>\r\n"]}]}