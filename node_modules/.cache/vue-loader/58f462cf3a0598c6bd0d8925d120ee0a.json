{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\PreguntasInstituciones\\TranspasarPreguntas.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\evaluaciones\\PreguntasInstituciones\\TranspasarPreguntas.vue","mtime":1712682815866},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport vSelect from 'vue-select'\r\nconst TablaPreguntasVue = () => import('./TablaPreguntas.vue')\r\nexport default {\r\n  components: {\r\n    TablaPreguntasVue,\r\n    'v-select': vSelect,\r\n  },\r\n  data() {\r\n    return{\r\n      institucion1Select: '',\r\n      institucion2Select: '',\r\n      countPreguntas: 0,\r\n      arrayPreguntas: [],\r\n      usuario:[],\r\n      preguntasYaIngresadas: [],\r\n      preguntasIngresadas: 0,\r\n      popopMostrarResultados: false\r\n    }\r\n  },\r\n  created(){\r\n    let me = this\r\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n  },\r\n  props:{\r\n    arrayInstituciones: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n  },\r\n  methods: {\r\n    contarPreguntas(){\r\n      let me = this\r\n      me.countPreguntas = 0\r\n      if(me.institucion1Select == '' || me.institucion1Select == undefined || me.institucion1Select == null){\r\n        me.$vs.notify({\r\n          title: 'Aviso',\r\n          text: 'Debe seleccionar la institución de origen',\r\n          color: 'warning',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n        return\r\n      }\r\n      me.$vs.loading()\r\n      me.$http.get(me.$server_url + 'getCountQuestions?idinstitucion='+me.institucion1Select.idinstitucion)\r\n      .then(res => {\r\n        me.countPreguntas = res.data.length\r\n        me.arrayPreguntas = res.data\r\n        me.$vs.loading.close()\r\n      })\r\n      .catch(err => {\r\n        me.$vs.loading.close()\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Error al obtener preguntas',\r\n          color: 'danger',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n      })\r\n    },\r\n    openConfirm(){\r\n      let me = this\r\n      if(me.institucion1Select == '' || me.institucion1Select == undefined || me.institucion1Select == null){\r\n        me.$vs.notify({\r\n          title: 'Aviso',\r\n          text: 'Debe seleccionar la institución de origen',\r\n          color: 'warning',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n        return\r\n      }\r\n\r\n      if(me.institucion2Select == '' || me.institucion2Select == undefined || me.institucion2Select == null){\r\n        me.$vs.notify({\r\n          title: 'Aviso',\r\n          text: 'Debe seleccionar la institución de destino',\r\n          color: 'warning',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n        return\r\n      }\r\n      //si ambas son iguales\r\n      if(me.institucion1Select == me.institucion2Select){\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Debe seleccionar instituciones diferentes',\r\n          color: 'danger',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n        return;\r\n      }\r\n      me.$vs.dialog({\r\n        title: 'Confirmación',\r\n        text: `¿Desea copiar las ${me.countPreguntas} preguntas de la institución ${me.institucion1Select.nombreinstitucion} a la institución ${me.institucion2Select.nombreinstitucion}?`,\r\n        acceptText: 'Aceptar',\r\n        acceptColor: 'rgb(11, 189, 135)',\r\n        acceptButtonAlign: 'center', // Center align the accept button\r\n        accept:this.asignarPreguntas\r\n      })\r\n    },\r\n    asignarPreguntas(){\r\n      let me = this;\r\n      // me.arrayNoIngresadas = []\r\n      me.preguntasYaIngresadas     = []\r\n      me.preguntasIngresadas       = 0\r\n      me.$vs.loading()\r\n      const formData = new FormData();\r\n      formData.append('institucion_id', me.institucion2Select.idinstitucion);\r\n      formData.append('user_created',   me.usuario.idusuario);\r\n      formData.append('arrayPreguntas', JSON.stringify(me.arrayPreguntas));\r\n      this.$http.post(this.$server_url + 'asignar_preguntas_institucion', formData)\r\n      .then(res => {\r\n        me.$vs.loading.close()\r\n        //si no se asignaron preguntas\r\n        if(res.data.preguntasIngresadas == 0){\r\n          me.$vs.notify({\r\n            title: 'Error',\r\n            text: 'Preguntas ya asignadas con anterioridad',\r\n            iconPack: 'feather',\r\n            icon: 'icon-alert-circle',\r\n            color: 'danger'\r\n          })\r\n        }else{\r\n          //si se asignaron preguntas\r\n          me.$vs.notify({\r\n            title: 'Exito',\r\n            text: `${ res.data.preguntasIngresadas } Preguntas  asignadas correctamente`,\r\n            iconPack: 'feather',\r\n            icon: 'icon-check',\r\n            color: 'success',\r\n            time:8000\r\n          })\r\n        }\r\n        me.preguntasYaIngresadas = res.data.preguntasYaIngresadas\r\n        me.preguntasIngresadas   = res.data.preguntasIngresadas\r\n        me.popopMostrarResultados = true\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        me.$vs.loading.close()\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Error al asignar las preguntas',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle',\r\n          color: 'danger'\r\n        })\r\n      })\r\n    },\r\n  },\r\n}\r\n",{"version":3,"sources":["TranspasarPreguntas.vue"],"names":[],"mappings":";AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TranspasarPreguntas.vue","sourceRoot":"src/views/evaluaciones/PreguntasInstituciones","sourcesContent":["<template>\r\n  <div>\r\n    <vx-card title=\"Copiar Preguntas:\" title-color=\"#6728CE\" subtitle=\"Seleccione 2 instituciones\">\r\n      <!-- Your HTML code here -->\r\n      <div>\r\n        <div class=\"vx-row\">\r\n          <div class=\"vx-col w-full sm:w-1/2 md:w-1/2 lg:w-1/2 xl:w-1/2 mb-6\">\r\n            <small>Copiar Desde:</small>\r\n            <v-select :options=\"arrayInstituciones\" @input=\"contarPreguntas()\" :reduce=\"arrayInstituciones => arrayInstituciones\" label=\"nombreinstitucion\" class=\"w-full\" v-model=\"institucion1Select\" />\r\n            </div>\r\n          <div class=\"vx-col w-full sm:w-1/2 md:w-1/2 lg:w-1/1 xl:w-1/2 mb-6\">\r\n            <small>Copiar a:</small>\r\n            <div class=\"flex\">\r\n              <v-select :options=\"arrayInstituciones\"  :reduce=\"arrayInstituciones => arrayInstituciones\" label=\"nombreinstitucion\" class=\"w-full\" v-model=\"institucion2Select\" />\r\n              <vs-button icon=\"edit\" class=\"ml-1\" @click=\"openConfirm();\">Copiar</vs-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div v-if=\"countPreguntas > 0\">\r\n          <vs-alert color=\"success\" title=\"Preguntas a ser copiadas\" active=\"true\">\r\n              <p class=\"text-center\">(?)<b> {{ countPreguntas }}</b> Preguntas encontradas</p>\r\n          </vs-alert>\r\n        </div>\r\n        <br><br><br><br><br><br>\r\n       </div>\r\n    </vx-card>\r\n    <!--modales-->\r\n    <vs-popup title=\"Resultado de la copia\" :active.sync=\"popopMostrarResultados\">\r\n      <div v-if=\"popopMostrarResultados\">\r\n        <vs-list>\r\n          <vs-list-header title=\"Resultados\"></vs-list-header>\r\n          <vs-list-item title=\"Preguntas Ingresadas\">\r\n            <p>{{ preguntasIngresadas }}</p>\r\n          </vs-list-item>\r\n          <vs-list-item title=\"Preguntas que ya existen\">\r\n            <p>{{ preguntasYaIngresadas.length }}</p>\r\n          </vs-list-item>\r\n        </vs-list>\r\n        <!--boton de aceptar-->\r\n        <div class=\"flex justify-center\">\r\n          <vs-button color=\"rgb(11, 189, 135)\" @click=\"popopMostrarResultados = false;\" type=\"border\" icon=\"check\">Aceptar</vs-button>\r\n        </div>\r\n      </div>\r\n    </vs-popup>\r\n  </div>\r\n</template>\r\n<script>\r\nimport vSelect from 'vue-select'\r\nconst TablaPreguntasVue = () => import('./TablaPreguntas.vue')\r\nexport default {\r\n  components: {\r\n    TablaPreguntasVue,\r\n    'v-select': vSelect,\r\n  },\r\n  data() {\r\n    return{\r\n      institucion1Select: '',\r\n      institucion2Select: '',\r\n      countPreguntas: 0,\r\n      arrayPreguntas: [],\r\n      usuario:[],\r\n      preguntasYaIngresadas: [],\r\n      preguntasIngresadas: 0,\r\n      popopMostrarResultados: false\r\n    }\r\n  },\r\n  created(){\r\n    let me = this\r\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n  },\r\n  props:{\r\n    arrayInstituciones: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n  },\r\n  methods: {\r\n    contarPreguntas(){\r\n      let me = this\r\n      me.countPreguntas = 0\r\n      if(me.institucion1Select == '' || me.institucion1Select == undefined || me.institucion1Select == null){\r\n        me.$vs.notify({\r\n          title: 'Aviso',\r\n          text: 'Debe seleccionar la institución de origen',\r\n          color: 'warning',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n        return\r\n      }\r\n      me.$vs.loading()\r\n      me.$http.get(me.$server_url + 'getCountQuestions?idinstitucion='+me.institucion1Select.idinstitucion)\r\n      .then(res => {\r\n        me.countPreguntas = res.data.length\r\n        me.arrayPreguntas = res.data\r\n        me.$vs.loading.close()\r\n      })\r\n      .catch(err => {\r\n        me.$vs.loading.close()\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Error al obtener preguntas',\r\n          color: 'danger',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n      })\r\n    },\r\n    openConfirm(){\r\n      let me = this\r\n      if(me.institucion1Select == '' || me.institucion1Select == undefined || me.institucion1Select == null){\r\n        me.$vs.notify({\r\n          title: 'Aviso',\r\n          text: 'Debe seleccionar la institución de origen',\r\n          color: 'warning',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n        return\r\n      }\r\n\r\n      if(me.institucion2Select == '' || me.institucion2Select == undefined || me.institucion2Select == null){\r\n        me.$vs.notify({\r\n          title: 'Aviso',\r\n          text: 'Debe seleccionar la institución de destino',\r\n          color: 'warning',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n        return\r\n      }\r\n      //si ambas son iguales\r\n      if(me.institucion1Select == me.institucion2Select){\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Debe seleccionar instituciones diferentes',\r\n          color: 'danger',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle'\r\n        })\r\n        return;\r\n      }\r\n      me.$vs.dialog({\r\n        title: 'Confirmación',\r\n        text: `¿Desea copiar las ${me.countPreguntas} preguntas de la institución ${me.institucion1Select.nombreinstitucion} a la institución ${me.institucion2Select.nombreinstitucion}?`,\r\n        acceptText: 'Aceptar',\r\n        acceptColor: 'rgb(11, 189, 135)',\r\n        acceptButtonAlign: 'center', // Center align the accept button\r\n        accept:this.asignarPreguntas\r\n      })\r\n    },\r\n    asignarPreguntas(){\r\n      let me = this;\r\n      // me.arrayNoIngresadas = []\r\n      me.preguntasYaIngresadas     = []\r\n      me.preguntasIngresadas       = 0\r\n      me.$vs.loading()\r\n      const formData = new FormData();\r\n      formData.append('institucion_id', me.institucion2Select.idinstitucion);\r\n      formData.append('user_created',   me.usuario.idusuario);\r\n      formData.append('arrayPreguntas', JSON.stringify(me.arrayPreguntas));\r\n      this.$http.post(this.$server_url + 'asignar_preguntas_institucion', formData)\r\n      .then(res => {\r\n        me.$vs.loading.close()\r\n        //si no se asignaron preguntas\r\n        if(res.data.preguntasIngresadas == 0){\r\n          me.$vs.notify({\r\n            title: 'Error',\r\n            text: 'Preguntas ya asignadas con anterioridad',\r\n            iconPack: 'feather',\r\n            icon: 'icon-alert-circle',\r\n            color: 'danger'\r\n          })\r\n        }else{\r\n          //si se asignaron preguntas\r\n          me.$vs.notify({\r\n            title: 'Exito',\r\n            text: `${ res.data.preguntasIngresadas } Preguntas  asignadas correctamente`,\r\n            iconPack: 'feather',\r\n            icon: 'icon-check',\r\n            color: 'success',\r\n            time:8000\r\n          })\r\n        }\r\n        me.preguntasYaIngresadas = res.data.preguntasYaIngresadas\r\n        me.preguntasIngresadas   = res.data.preguntasIngresadas\r\n        me.popopMostrarResultados = true\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        me.$vs.loading.close()\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Error al asignar las preguntas',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle',\r\n          color: 'danger'\r\n        })\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n"]}]}