{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\biblioteca.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\biblioteca.vue","mtime":1712682815545},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport AreaContent from \"./content/Area/AreaContent.vue\"\r\nimport Contenidos from \"./content/Contenidos/Contenidos.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    AreaContent,\r\n    Contenidos\r\n  },\r\n  created() {\r\n    this.currentUser = JSON.parse(localStorage.getItem('usuario')); // Obtiene el usuario actual\r\n  },\r\n  data() {\r\n    return {\r\n      currentUser: null,\r\n      buscarArea: '',\r\n      area: null,\r\n      areas: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    const me = this; // Variable para almacenar el contexto actual\r\n    const settArea = JSON.parse(localStorage.getItem('area')); // Obtiene el área seleccionada\r\n\r\n    // Si no hay un área seleccionada, obtiene las áreas\r\n    if (!settArea) {\r\n      me.getAreas(); // Obtiene las áreas\r\n    } else {\r\n      // Si hay un área seleccionada, la asigna a la variable 'area' y la agrega al arreglo 'areas'\r\n      this.areas.push(settArea);\r\n      this.area = settArea;\r\n    }\r\n    this.checkRole(); // Verifica los permisos del usuario\r\n  },\r\n  methods: {\r\n    clearArea() {\r\n      localStorage.removeItem('area'); // Elimina el área seleccionada del almacenamiento local\r\n      this.area = null; // Asigna 'null' a la variable 'area'\r\n      this.getAreas(); // Obtiene las áreas\r\n    },\r\n    setArea(area) {\r\n      localStorage.setItem('area', JSON.stringify(area)); // Almacena el área seleccionada en el almacenamiento local\r\n      this.areas = []; // Asigna un arreglo vacío a la variable 'areas'\r\n      this.area = area; // Asigna el área seleccionada a la variable 'area'\r\n      this.areas = [area]; // Agrega el área seleccionada al arreglo 'areas'\r\n    },\r\n    async searchArea(area) {\r\n      // Si el parámetro 'area' es una cadena vacía, obtiene las áreas\r\n      if (area === '') {\r\n        this.getAreas(); // Obtiene las áreas\r\n        return;\r\n      }\r\n      this.areas = this.areas.filter((a) => a.nombrearea.toLowerCase().includes(area.toLowerCase())); // Filtra las áreas por el nombre\r\n    },\r\n    async getAreas() {\r\n      this.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para obtener las áreas\r\n      this.$http.get(`${this.$server_url}biblioteca/areas`).then((res) => {\r\n        this.areas = res.data.data; // Asigna los datos obtenidos a la variable 'areas'\r\n\r\n        // Ordena las áreas por nombre\r\n        this.areas.sort((a, b) => {\r\n          if (a.nombrearea < b.nombrearea) {\r\n            return -1;\r\n          }\r\n          if (a.nombrearea > b.nombrearea) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        });\r\n      }).catch((err) => {\r\n        this.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        this.$vs.loading.close(); // Cierra el indicador de carga\r\n      });\r\n    },\r\n    checkRole() {\r\n      const me = this; // Variable para almacenar el contexto actual\r\n      me.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para obtener los permisos del usuario actual\r\n      me.$http.get(`${this.$server_url}permisos/${this.currentUser.idusuario}`).then((res) => {\r\n        // Si el usuario no tiene permisos para acceder a esta sección, lo redirecciona a la página principal\r\n        if (res.data.length === 0) {\r\n          // Si el usuario no tiene permisos para acceder a esta sección, lo redirecciona a la página principal\r\n          if (me.currentUser.id_group === 1 || me.currentUser.id_group === 29 || me.currentUser.id_group === 30) {\r\n            return;\r\n          } else {\r\n            me.$vs.notify({\r\n              title: 'Error',\r\n              text: 'No tiene permisos para acceder a esta sección',\r\n              color: 'danger',\r\n              position: 'top-right',\r\n            });\r\n            me.$router.push('/');\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n        me.$router.push('/');\r\n      }).finally(() => {\r\n        me.$vs.loading.close();\r\n      });\r\n    }\r\n  },\r\n};\r\n",{"version":3,"sources":["biblioteca.vue"],"names":[],"mappings":";AAefile":"biblioteca.vue","sourceRoot":"src/views/biblioteca","sourcesContent":["<template>\r\n  <div class=\"w-screen h-screen px-6 py-2\">\r\n    <vs-row vs-justify=\"flex-start\">\r\n      <vs-col>\r\n        <AreaContent :areas=\"areas\" :selected-area=\"area\" :searchAreas=\"searchArea\" :clear=\"clearArea\"\r\n          :set-area=\"setArea\" />\r\n      </vs-col>\r\n      <vs-col v-if=\"area\">\r\n        <Contenidos :area=\"area\" />\r\n      </vs-col>\r\n    </vs-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport AreaContent from \"./content/Area/AreaContent.vue\"\r\nimport Contenidos from \"./content/Contenidos/Contenidos.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    AreaContent,\r\n    Contenidos\r\n  },\r\n  created() {\r\n    this.currentUser = JSON.parse(localStorage.getItem('usuario')); // Obtiene el usuario actual\r\n  },\r\n  data() {\r\n    return {\r\n      currentUser: null,\r\n      buscarArea: '',\r\n      area: null,\r\n      areas: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    const me = this; // Variable para almacenar el contexto actual\r\n    const settArea = JSON.parse(localStorage.getItem('area')); // Obtiene el área seleccionada\r\n\r\n    // Si no hay un área seleccionada, obtiene las áreas\r\n    if (!settArea) {\r\n      me.getAreas(); // Obtiene las áreas\r\n    } else {\r\n      // Si hay un área seleccionada, la asigna a la variable 'area' y la agrega al arreglo 'areas'\r\n      this.areas.push(settArea);\r\n      this.area = settArea;\r\n    }\r\n    this.checkRole(); // Verifica los permisos del usuario\r\n  },\r\n  methods: {\r\n    clearArea() {\r\n      localStorage.removeItem('area'); // Elimina el área seleccionada del almacenamiento local\r\n      this.area = null; // Asigna 'null' a la variable 'area'\r\n      this.getAreas(); // Obtiene las áreas\r\n    },\r\n    setArea(area) {\r\n      localStorage.setItem('area', JSON.stringify(area)); // Almacena el área seleccionada en el almacenamiento local\r\n      this.areas = []; // Asigna un arreglo vacío a la variable 'areas'\r\n      this.area = area; // Asigna el área seleccionada a la variable 'area'\r\n      this.areas = [area]; // Agrega el área seleccionada al arreglo 'areas'\r\n    },\r\n    async searchArea(area) {\r\n      // Si el parámetro 'area' es una cadena vacía, obtiene las áreas\r\n      if (area === '') {\r\n        this.getAreas(); // Obtiene las áreas\r\n        return;\r\n      }\r\n      this.areas = this.areas.filter((a) => a.nombrearea.toLowerCase().includes(area.toLowerCase())); // Filtra las áreas por el nombre\r\n    },\r\n    async getAreas() {\r\n      this.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para obtener las áreas\r\n      this.$http.get(`${this.$server_url}biblioteca/areas`).then((res) => {\r\n        this.areas = res.data.data; // Asigna los datos obtenidos a la variable 'areas'\r\n\r\n        // Ordena las áreas por nombre\r\n        this.areas.sort((a, b) => {\r\n          if (a.nombrearea < b.nombrearea) {\r\n            return -1;\r\n          }\r\n          if (a.nombrearea > b.nombrearea) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        });\r\n      }).catch((err) => {\r\n        this.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        this.$vs.loading.close(); // Cierra el indicador de carga\r\n      });\r\n    },\r\n    checkRole() {\r\n      const me = this; // Variable para almacenar el contexto actual\r\n      me.$vs.loading(); // Muestra el indicador de carga\r\n\r\n      // Realiza una petición para obtener los permisos del usuario actual\r\n      me.$http.get(`${this.$server_url}permisos/${this.currentUser.idusuario}`).then((res) => {\r\n        // Si el usuario no tiene permisos para acceder a esta sección, lo redirecciona a la página principal\r\n        if (res.data.length === 0) {\r\n          // Si el usuario no tiene permisos para acceder a esta sección, lo redirecciona a la página principal\r\n          if (me.currentUser.id_group === 1 || me.currentUser.id_group === 29 || me.currentUser.id_group === 30) {\r\n            return;\r\n          } else {\r\n            me.$vs.notify({\r\n              title: 'Error',\r\n              text: 'No tiene permisos para acceder a esta sección',\r\n              color: 'danger',\r\n              position: 'top-right',\r\n            });\r\n            me.$router.push('/');\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n        me.$router.push('/');\r\n      }).finally(() => {\r\n        me.$vs.loading.close();\r\n      });\r\n    }\r\n  },\r\n};\r\n</script>\r\n"]}]}