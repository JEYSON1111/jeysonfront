{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\utils\\RevisionVentaAgrupado.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\utils\\RevisionVentaAgrupado.vue","mtime":1712682815650},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nexport default{\r\n  data(){\r\n    return{\r\n      //VARIABLES PARA EXPORTAR A EXCEL\r\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n      fileName:'Reporte de codigos agrupados',\r\n      selectedFormat: 'xlsx',\r\n      cellAutoWidth: true,\r\n      activePrompt: false,\r\n      //FIN VARIABLES PARA EXPORTAR A EXCEL\r\n    }\r\n  },\r\n  computed:{\r\n    sumaTotal(){\r\n      let me = this;\r\n      if(me.groupedData.length >0){\r\n        let datos = me.groupedData.filter(p => p.cantidad)\r\n        let total = datos.reduce((a, b) => a + (b[\"cantidad\"] || 0), 0);\r\n        return total\r\n      }\r\n    },\r\n  },\r\n  props:{\r\n    groupedData:{\r\n      type:Array,\r\n      default:[]\r\n    }\r\n  },\r\n  mounted(){\r\n    let me = this\r\n    me.ordenar()\r\n  },\r\n  methods:{\r\n    ordenar(){\r\n      let me = this;\r\n      if(me.groupedData.length > 0)\r\n      this.groupedData.sort((a, b) => {\r\n          if (a.libro < b.libro) {\r\n            return -1;\r\n          }\r\n          if (a.libro > b.libro) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        });\r\n    },\r\n    //para limipiar los campos del excel\r\n    clearFields() {\r\n      this.fileName = ''\r\n      this.cellAutoWidth = true\r\n      this.selectedFormat = 'xls'\r\n    },\r\n    //metodo par descargar el excel\r\n    exportToExcel() {\r\n      let headerTitle = ['Libro' ,'Cantidad'];\r\n      let headerVal = [ 'libro','cantidad'];\r\n      let codigoSelectedMayus = this.groupedData\r\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n        for (var key in codigoSelectedMayus[i]) {\r\n            if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n                codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n            }\r\n        }\r\n    }\r\n    import('@/vendor/Export2Excel').then(excel => {\r\n        const list = codigoSelectedMayus\r\n        const data = this.formatJson(headerVal, list)\r\n        excel.export_json_to_excel({\r\n            header: headerTitle,\r\n            data,\r\n            filename: this.fileName,\r\n            autoWidth: this.cellAutoWidth,\r\n            bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n      })\r\n    },\r\n      formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => {\r\n            return v[j]\r\n        }))\r\n      },\r\n  }\r\n}\r\n",{"version":3,"sources":["RevisionVentaAgrupado.vue"],"names":[],"mappings":";AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RevisionVentaAgrupado.vue","sourceRoot":"src/views/codigos/components/utils","sourcesContent":["<template>\r\n  <div>\r\n    <vs-table max-items=\"20\" search pagination :data=\"groupedData\">\r\n        <template slot=\"header\">\r\n          <vs-chip  color=\"primary\">Cantidad: <b> {{ groupedData.length }}</b></vs-chip>\r\n          <vs-chip  color=\"success\" class=\"ml-2\">Total c√≥digos: <b> {{ sumaTotal }}</b></vs-chip>\r\n          <span @click=\"exportToExcel()\">\r\n            <vx-tooltip style=\"display: inline-block;\" text=\"Exportar\" position=\"top\" color=\"primary\">\r\n              <vs-avatar color=\"warning\" icon-pack=\"feather\" icon=\"icon-printer\" />\r\n            </vx-tooltip>\r\n          </span>\r\n        </template>\r\n        <template slot=\"thead\">\r\n            <vs-th>Libro</vs-th>\r\n            <vs-th>Cantidad</vs-th>\r\n        </template>\r\n        <template slot-scope=\"{data}\">\r\n          <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n            <vs-td>\r\n              {{data[indextr].libro}}<br>\r\n            </vs-td>\r\n            <vs-td>\r\n              {{data[indextr].cantidad}}<br>\r\n            </vs-td>\r\n          </vs-tr>\r\n        </template>\r\n    </vs-table>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default{\r\n  data(){\r\n    return{\r\n      //VARIABLES PARA EXPORTAR A EXCEL\r\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n      fileName:'Reporte de codigos agrupados',\r\n      selectedFormat: 'xlsx',\r\n      cellAutoWidth: true,\r\n      activePrompt: false,\r\n      //FIN VARIABLES PARA EXPORTAR A EXCEL\r\n    }\r\n  },\r\n  computed:{\r\n    sumaTotal(){\r\n      let me = this;\r\n      if(me.groupedData.length >0){\r\n        let datos = me.groupedData.filter(p => p.cantidad)\r\n        let total = datos.reduce((a, b) => a + (b[\"cantidad\"] || 0), 0);\r\n        return total\r\n      }\r\n    },\r\n  },\r\n  props:{\r\n    groupedData:{\r\n      type:Array,\r\n      default:[]\r\n    }\r\n  },\r\n  mounted(){\r\n    let me = this\r\n    me.ordenar()\r\n  },\r\n  methods:{\r\n    ordenar(){\r\n      let me = this;\r\n      if(me.groupedData.length > 0)\r\n      this.groupedData.sort((a, b) => {\r\n          if (a.libro < b.libro) {\r\n            return -1;\r\n          }\r\n          if (a.libro > b.libro) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        });\r\n    },\r\n    //para limipiar los campos del excel\r\n    clearFields() {\r\n      this.fileName = ''\r\n      this.cellAutoWidth = true\r\n      this.selectedFormat = 'xls'\r\n    },\r\n    //metodo par descargar el excel\r\n    exportToExcel() {\r\n      let headerTitle = ['Libro' ,'Cantidad'];\r\n      let headerVal = [ 'libro','cantidad'];\r\n      let codigoSelectedMayus = this.groupedData\r\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n        for (var key in codigoSelectedMayus[i]) {\r\n            if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n                codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n            }\r\n        }\r\n    }\r\n    import('@/vendor/Export2Excel').then(excel => {\r\n        const list = codigoSelectedMayus\r\n        const data = this.formatJson(headerVal, list)\r\n        excel.export_json_to_excel({\r\n            header: headerTitle,\r\n            data,\r\n            filename: this.fileName,\r\n            autoWidth: this.cellAutoWidth,\r\n            bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n      })\r\n    },\r\n      formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => {\r\n            return v[j]\r\n        }))\r\n      },\r\n  }\r\n}\r\n</script>\r\n"]}]}