{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\areas\\areas.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\areas\\areas.vue","mtime":1712682815505},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport Vue from 'vue'\r\nimport axios from 'axios'\r\nimport vSelect from 'vue-select'\r\nimport LibroRepository from '../../repositories/LibroRepository';\r\nexport default {\r\n    data() {\r\n        return{\r\n            areas:[],\r\n            tipos:[],\r\n            activeConfirm:false,\r\n            popupEditArea:false,\r\n            update:false,\r\n            id:0,\r\n            idarea:0,\r\n            popupAddTema:false,\r\n            area:{\r\n                nombrearea:'',\r\n                tipo:''\r\n            },\r\n            estado:'',\r\n            permisoRoot:false,\r\n            usuario:[],\r\n        }\r\n    },\r\n    components: {\r\n       'v-select': vSelect,\r\n                \r\n    },\r\n    methods:{\r\n        obtenerAreas(){ \r\n             //para obtener el listado de las areas\r\n            LibroRepository.getAreas().then(r => { this.areas = r.data.area });\r\n             //para obtener el listado de los tipos \r\n            LibroRepository.getAreas().then(r => { this.tipos = r.data.tipoArea }); \r\n        },\r\n         //para obtener el listado de los usuarios root\r\n         getUserRoot() {\r\n            let me = this;\r\n            this.$http.get(this.$server_url+'permisos?permiso=yes&usuario_id='+me.usuario.idusuario)\r\n                .then(function (res) {\r\n                    if(res.data.status == '1'){\r\n                        me.permisoRoot = true\r\n                    }else{\r\n                        me.permisoRoot = false\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error + ' error');\r\n                })\r\n        },\r\n        //para eliminar la area\r\n         eliminarArea(idarea) {\r\n            let me = this;\r\n            let formData = new FormData();\r\n            formData.append('idarea',me.idarea);\r\n            formData.append('estado',me.estado);\r\n            me.$vs.loading()\r\n            this.$http.post(this.$server_url+'area-eliminar', formData)\r\n            .then(res => {\r\n            me.obtenerAreas();\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({\r\n                text:'Area eliminado con exito',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n            })\r\n        },\r\n        //para abrir el popup de confimacion para eliminar\r\n        openConfirm(idarea,estado){\r\n        this.idarea = idarea;\r\n        this.estado = estado\r\n        this.$vs.dialog({\r\n            type:'confirm',\r\n            color: 'danger',\r\n            title: `Confirmacion`,\r\n            text: 'Estas seguro de cambiar de estado.',\r\n            accept:this.eliminarArea\r\n        })\r\n        },\r\n        //para guardar las areas\r\n         guardarArea(){\r\n            let me = this;\r\n             //datos que se obtienen de los inputs\r\n                if(me.area.nombrearea.trim() === ''){\r\n                    this.$vs.notify({\r\n                        text:'Debe completar todos los campos antes de guardar',\r\n                        color:'warning',\r\n                        iconPack: 'feather',\r\n                        icon:'icon-check'})\r\n                    return;\r\n                }\r\n            let formData = new FormData();\r\n            if(me.update){\r\n                formData.append('idarea',     me.id);\r\n                formData.append('nombrearea', me.area.nombrearea);\r\n                formData.append('idtipoarea', me.area.tipo.idtipoarea);\r\n            }else{\r\n                formData.append('nombrearea', me.area.nombrearea);\r\n                formData.append('idtipoarea', me.area.tipo.idtipoarea);\r\n            }\r\n            this.$http.post(this.$server_url+'areas', formData)\r\n                .then(function (res) {\r\n                    me.$vs.notify({\r\n                        text: res.data,\r\n                        color: 'primary',\r\n                        iconPack: 'feather',\r\n                        icon: 'icon-alert-triangle'\r\n                    })\r\n                    me.obtenerAreas()\r\n                    me.popupAddTema=false,\r\n                    me.popupEditArea=false,\r\n                    me.update = false;\r\n                    limpiar()\r\n                  \r\n                })\r\n                .catch(function (error) {})\r\n        },\r\n        //para editar los campos\r\n        openModalEditar(data={}){\r\n            let me = this;\r\n            me.popupEditArea = true;\r\n            //llenar la data en los campos\r\n            me.id = data.idarea;\r\n            me.area.nombrearea = data.nombrearea;\r\n            me.area.tipo = {idtipoarea:data.tipoareas_idtipoarea, nombretipoarea:data.nombretipoarea};\r\n        },\r\n        //para limpiar los campos\r\n        limpiar(){\r\n           let me = this;\r\n           me.area.nombrearea = \"\";\r\n           me.area.tipo = \"\";\r\n        },\r\n    },\r\n    mounted() {\r\n        this.obtenerAreas()\r\n    },\r\n    created(){\r\n        console.log(\"diseno2\")\r\n        this.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n        this.getUserRoot()\r\n    }\r\n}\r\n",{"version":3,"sources":["areas.vue"],"names":[],"mappingsfile":"areas.vue","sourceRoot":"src/views/areas","sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"con-tab-ejemplo\">\r\n            <div v-if=\"areas.length > 0 \">\r\n              <vs-button color=\"dark\" v-if=\"permisoRoot\" @click=\"limpiar();popupAddTema=true;\"   type=\"filled\">Crear Area</vs-button>\r\n                <vs-table max-items=\"10\" search pagination :data=\"areas\">\r\n                    <template slot=\"header\">\r\n                        <vs-chip  color=\"primary\">Cantidad: <b> {{ areas.length }}</b></vs-chip>\r\n                    </template>\r\n                    <template slot=\"thead\">\r\n                        <vs-th>Nombre</vs-th>\r\n                        <vs-th>Tipo de area</vs-th>\r\n                        <vs-th>Estado</vs-th>\r\n                        <vs-th  style=\"width:100px;\">Acciones</vs-th>\r\n                    </template>\r\n                    <template slot-scope=\"{data}\">\r\n                        <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n                            <vs-td>\r\n                                {{data[indextr].nombrearea}}<br>\r\n                                \r\n                            </vs-td>\r\n                            <vs-td>\r\n                                {{data[indextr].nombretipoarea}}<br>\r\n                            </vs-td>\r\n                            <vs-td>\r\n                                <vs-chip v-if=\"tr.estado == 1\" color=\"success\">Activo</vs-chip>\r\n                                <vs-chip v-else color=\"danger\">Inactivo</vs-chip>\r\n                            </vs-td>\r\n                            <vs-td>\r\n                                <div style=\"display: flex;\">\r\n                                    <div>\r\n                                        <vx-tooltip style=\"display: inline-block;\" text=\"Editar area\" position=\"top\" color=\"primary\">\r\n                                            <vs-button class=\"modal-default-button\" size=\"small\" color=\"success\" @click=\"update=true;openModalEditar(data[indextr])\" type=\"filled\" icon-pack=\"feather\" icon=\"icon-edit\"> </vs-button>\r\n                                        </vx-tooltip> &nbsp;\r\n                                    </div>\r\n                                    <div>\r\n                                        <vx-tooltip v-if=\"tr.estado == 1\" style=\"display: inline-block;\" text=\"Desactivar area\" position=\"top\" color=\"primary\">\r\n                                            <vs-button class=\"modal-default-button\" size=\"small\" color=\"danger\" @click=\"openConfirm(data[indextr].idarea,0)\" type=\"filled\" icon-pack=\"feather\" icon=\"icon-x-square\"> </vs-button>\r\n                                        </vx-tooltip> &nbsp;\r\n                                        <vx-tooltip v-if=\"tr.estado == 0\" style=\"display: inline-block;\" text=\"activar area\" position=\"top\" color=\"primary\">\r\n                                            <vs-button class=\"modal-default-button\" size=\"small\" color=\"primary\" @click=\"openConfirm(data[indextr].idarea,1)\" type=\"filled\" icon-pack=\"feather\" icon=\"icon-check\"> </vs-button>\r\n                                        </vx-tooltip> &nbsp;\r\n                                    </div>\r\n                                </div>\r\n                            </vs-td> \r\n                        </vs-tr>\r\n                    </template>\r\n                </vs-table>   \r\n            </div>\r\n            <div v-else class=\"p-3\">\r\n                <p> No existe areas aun. </p>\r\n            </div>\r\n        </div>\r\n        <!--PARA LOS MODALES -->\r\n          <!-- Modal Agregar-->\r\n        <div class=\"demo-alignment\">\r\n            <vs-popup classContent=\"popup-example\" title=\"Agregar Area\" :active.sync=\"popupAddTema\">\r\n                <vs-input class=\"inputx mb-3 w-full\" label=\"Nombre Area\" v-model=\"area.nombrearea\" />\r\n                Tipo Area:\r\n                <v-select :options=\"tipos\" :reduce=\"tipos => tipos\" label=\"nombretipoarea\" class=\"w-full\" v-model=\"area.tipo\" />\r\n                 <br><br>       \r\n                <vs-button color=\"success\" class=\"w-full mb-3\" @click=\"guardarArea()\" type=\"gradient\" >Guardar</vs-button>\r\n            </vs-popup>\r\n        </div>\r\n        <!-- Modal Editar-->\r\n        <div class=\"demo-alignment\">\r\n            <vs-popup classContent=\"popup-example\" title=\"Editar Area\" :active.sync=\"popupEditArea\">\r\n                <vs-input class=\"inputx mb-3 w-full\" label=\"Nombre Area\" v-model=\"area.nombrearea\" />\r\n                Tipo Area:\r\n                <v-select :options=\"tipos\" :reduce=\"tipos => tipos\" label=\"nombretipoarea\" class=\"w-full\" v-model=\"area.tipo\" />\r\n                 <br><br>       \r\n                <vs-button color=\"success\" class=\"w-full mb-3\" @click=\"guardarArea()\" type=\"gradient\" >Actualizar</vs-button>\r\n            </vs-popup>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport Vue from 'vue'\r\nimport axios from 'axios'\r\nimport vSelect from 'vue-select'\r\nimport LibroRepository from '../../repositories/LibroRepository';\r\nexport default {\r\n    data() {\r\n        return{\r\n            areas:[],\r\n            tipos:[],\r\n            activeConfirm:false,\r\n            popupEditArea:false,\r\n            update:false,\r\n            id:0,\r\n            idarea:0,\r\n            popupAddTema:false,\r\n            area:{\r\n                nombrearea:'',\r\n                tipo:''\r\n            },\r\n            estado:'',\r\n            permisoRoot:false,\r\n            usuario:[],\r\n        }\r\n    },\r\n    components: {\r\n       'v-select': vSelect,\r\n                \r\n    },\r\n    methods:{\r\n        obtenerAreas(){ \r\n             //para obtener el listado de las areas\r\n            LibroRepository.getAreas().then(r => { this.areas = r.data.area });\r\n             //para obtener el listado de los tipos \r\n            LibroRepository.getAreas().then(r => { this.tipos = r.data.tipoArea }); \r\n        },\r\n         //para obtener el listado de los usuarios root\r\n         getUserRoot() {\r\n            let me = this;\r\n            this.$http.get(this.$server_url+'permisos?permiso=yes&usuario_id='+me.usuario.idusuario)\r\n                .then(function (res) {\r\n                    if(res.data.status == '1'){\r\n                        me.permisoRoot = true\r\n                    }else{\r\n                        me.permisoRoot = false\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error + ' error');\r\n                })\r\n        },\r\n        //para eliminar la area\r\n         eliminarArea(idarea) {\r\n            let me = this;\r\n            let formData = new FormData();\r\n            formData.append('idarea',me.idarea);\r\n            formData.append('estado',me.estado);\r\n            me.$vs.loading()\r\n            this.$http.post(this.$server_url+'area-eliminar', formData)\r\n            .then(res => {\r\n            me.obtenerAreas();\r\n            me.$vs.loading.close()\r\n            me.$vs.notify({\r\n                text:'Area eliminado con exito',\r\n                color:'success',\r\n                iconPack: 'feather',\r\n                icon:'icon-check'})\r\n            })\r\n        },\r\n        //para abrir el popup de confimacion para eliminar\r\n        openConfirm(idarea,estado){\r\n        this.idarea = idarea;\r\n        this.estado = estado\r\n        this.$vs.dialog({\r\n            type:'confirm',\r\n            color: 'danger',\r\n            title: `Confirmacion`,\r\n            text: 'Estas seguro de cambiar de estado.',\r\n            accept:this.eliminarArea\r\n        })\r\n        },\r\n        //para guardar las areas\r\n         guardarArea(){\r\n            let me = this;\r\n             //datos que se obtienen de los inputs\r\n                if(me.area.nombrearea.trim() === ''){\r\n                    this.$vs.notify({\r\n                        text:'Debe completar todos los campos antes de guardar',\r\n                        color:'warning',\r\n                        iconPack: 'feather',\r\n                        icon:'icon-check'})\r\n                    return;\r\n                }\r\n            let formData = new FormData();\r\n            if(me.update){\r\n                formData.append('idarea',     me.id);\r\n                formData.append('nombrearea', me.area.nombrearea);\r\n                formData.append('idtipoarea', me.area.tipo.idtipoarea);\r\n            }else{\r\n                formData.append('nombrearea', me.area.nombrearea);\r\n                formData.append('idtipoarea', me.area.tipo.idtipoarea);\r\n            }\r\n            this.$http.post(this.$server_url+'areas', formData)\r\n                .then(function (res) {\r\n                    me.$vs.notify({\r\n                        text: res.data,\r\n                        color: 'primary',\r\n                        iconPack: 'feather',\r\n                        icon: 'icon-alert-triangle'\r\n                    })\r\n                    me.obtenerAreas()\r\n                    me.popupAddTema=false,\r\n                    me.popupEditArea=false,\r\n                    me.update = false;\r\n                    limpiar()\r\n                  \r\n                })\r\n                .catch(function (error) {})\r\n        },\r\n        //para editar los campos\r\n        openModalEditar(data={}){\r\n            let me = this;\r\n            me.popupEditArea = true;\r\n            //llenar la data en los campos\r\n            me.id = data.idarea;\r\n            me.area.nombrearea = data.nombrearea;\r\n            me.area.tipo = {idtipoarea:data.tipoareas_idtipoarea, nombretipoarea:data.nombretipoarea};\r\n        },\r\n        //para limpiar los campos\r\n        limpiar(){\r\n           let me = this;\r\n           me.area.nombrearea = \"\";\r\n           me.area.tipo = \"\";\r\n        },\r\n    },\r\n    mounted() {\r\n        this.obtenerAreas()\r\n    },\r\n    created(){\r\n        console.log(\"diseno2\")\r\n        this.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n        this.getUserRoot()\r\n    }\r\n}\r\n</script>"]}]}