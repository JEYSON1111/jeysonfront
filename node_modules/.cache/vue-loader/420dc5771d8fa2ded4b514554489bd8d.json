{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\Form\\Form.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\biblioteca\\Form\\Form.vue","mtime":1712682815544},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport vSelect from 'vue-select';\r\nimport { quillEditor } from 'vue-quill-editor'\r\n\r\nimport 'quill/dist/quill.core.css' // import styles\r\nimport 'quill/dist/quill.snow.css' // for snow theme\r\nimport 'quill/dist/quill.bubble.css' // for bubble theme\r\n\r\nexport default ({\r\n  components: {\r\n    vSelect,\r\n    quillEditor,\r\n  },\r\n  data() {\r\n    return {\r\n      area: null,\r\n      contenidoId: null,\r\n      libros: [],\r\n      libro: null,\r\n      unidades: [],\r\n      unidad: null,\r\n      contenidos: [],\r\n      contentData: null,\r\n      cUser: null,\r\n    };\r\n  },\r\n  created() {\r\n    this.area = JSON.parse(localStorage.getItem('area')); // Obtiene el área seleccionada\r\n    this.contenidoId = this.$route.params.id; // Obtiene el id del contenido\r\n    this.cUser = JSON.parse(localStorage.getItem('usuario')); // Obtiene el usuario actual\r\n  },\r\n  async mounted() {\r\n    await this.obtenerLibros(); // Obtiene los libros\r\n    await this.obtenerUnidades(); // Obtiene las unidades\r\n    await this.obtenerFormato(); // Obtiene el formato del contenido\r\n  },\r\n  methods: {\r\n    async obtenerFormato() {\r\n      const me = this; // Variable para almacenar el contexto actual\r\n\r\n      me.$vs.loading(); // Muestra el spinner de carga\r\n\r\n      // Obtiene el formato del contenido\r\n      me.$http.get(`${me.$server_url}biblioteca/contenido/formato?areaId=${me.area.idarea}${me.contenidoId ? `&contenidoId=${me.contenidoId}` : ''}`).then((res) => {\r\n        me.libro = me.libros.find((libro) => libro.idlibro === res.data.data.id_libro) || null; // Asigna el libro del contenido\r\n        me.contentData = res.data.data; // Asigna los datos del contenido\r\n\r\n        // Si el contenido tiene un formato, lo asigna a la variable 'contenidos'\r\n        if (res.data.data.contenidoformato) {\r\n          me.contenidos = JSON.parse(res.data.data.contenidoformato); // Parsea la cadena JSON a un objeto\r\n        } else {\r\n          me.contenidos = JSON.parse(res.data.data.contenido); // Parsea la cadena JSON a un objeto\r\n        }\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close();\r\n      });\r\n    },\r\n    async obtenerLibros() {\r\n      const me = this;\r\n\r\n      me.$vs.loading();\r\n\r\n      // Obtiene los libros del área seleccionada\r\n      me.$http.get(`${me.$server_url}biblioteca/libros?idArea=${me.area.idarea}`).then((res) => {\r\n        me.libros = res.data.data; // Asigna los libros obtenidos a la variable 'libros'\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close(); // Cierra el spinner de carga\r\n      });\r\n    },\r\n    async obtenerUnidades() {\r\n      const me = this;\r\n\r\n      if (me.libro) {\r\n        me.$vs.loading(); // Muestra el spinner de carga\r\n\r\n        // Obtiene las unidades del libro seleccionado\r\n        me.$http.get(`${me.$server_url}biblioteca/libros/${me.libro.idlibro}/unidades`).then((res) => {\r\n          me.unidades = res.data.data; // Asigna las unidades obtenidas a la variable 'unidades'\r\n\r\n          // Si el contenido tiene un id de unidad, asigna la unidad del contenido a la variable 'unidad'\r\n          if (me.libro) {\r\n            me.unidad = me.unidades.find((u) => u.id_unidad_libro === me.contentData.id_unidad_libro) || null; // Asigna la unidad del contenido\r\n          }\r\n        }).catch((err) => {\r\n          me.$vs.notify({\r\n            title: 'Error',\r\n            text: err.message,\r\n            color: 'danger',\r\n            position: 'top-right',\r\n          });\r\n        }).finally(() => {\r\n          me.$vs.loading.close(); // Cierra el spinner de carga\r\n        });\r\n      }\r\n    },\r\n    datopdfconguia(url) {\r\n      let me = this\r\n\r\n      event.preventDefault(); // Evita que se recargue la página\r\n\r\n      // Si el contenido no tiene un PDF con guía, muestra una notificación\r\n      if (url === null || url === 'null') {\r\n        me.$vs.notify({\r\n          text: 'El PDF con guía aun no está disponible',\r\n          color: 'warning',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-triangle'\r\n        })\r\n        return\r\n      }\r\n      localStorage.url_guia = url; // Almacena la URL del PDF con guía en el almacenamiento local\r\n      let route = this.$router.resolve({ path: '/docente/libro/pdfconguia' }); // Obtiene la ruta de la página de visualización del PDF con guía\r\n      window.open(route.href, '_blank'); // Abre la página de visualización del PDF con guía en una nueva pestaña\r\n    },\r\n    handleSubmit() {\r\n      const me = this;\r\n      const formData = new FormData(); // Crea un objeto FormData\r\n\r\n      if (!me.area) {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Ha ocurrido un error al obtener el área',\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!me.libro) {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Debe seleccionar un libro',\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!me.unidad) {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Debe seleccionar una unidad',\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n\r\n\r\n      formData.append('idArea', me.area.idarea); // Agrega el id del área al objeto FormData\r\n      formData.append('idLibro', me.libro.idlibro); // Agrega el id del libro al objeto FormData\r\n      formData.append('idUnidad', me.unidad.id_unidad_libro); // Agrega el id de la unidad al objeto FormData\r\n      formData.append('contenido', JSON.stringify(me.contenidos)); // Agrega el contenido al objeto FormData\r\n      formData.append('idUsuario', me.cUser.idusuario); // Agrega el id del usuario al objeto FormData\r\n\r\n      // Si el contenido tiene un id, agrega el id del contenido al objeto FormData\r\n      if (me.contenidoId) {\r\n        formData.append('idContenido', me.contenidoId); // Agrega el id del contenido al objeto FormData\r\n      }\r\n\r\n      me.$vs.loading(); // Muestra el spinner de carga\r\n\r\n      // Realiza una petición para guardar el contenido\r\n      me.$http.post(`${me.$server_url}biblioteca/contenido`, formData).then((res) => {\r\n        me.$vs.notify({\r\n          title: 'Éxito',\r\n          text: res.data.message,\r\n          color: 'success',\r\n          position: 'top-right',\r\n        });\r\n        me.$emit('close'); // Emite un evento para cerrar el modal\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close(); // Cierra el spinner de carga\r\n        me.$router.push({ name: 'biblioteca', query: { id: me.area.idarea } }); // Redirecciona a la ruta de biblioteca\r\n      });\r\n    },\r\n    onEditorChange(event, contenido) {\r\n      contenido.valor = event.html;\r\n    },\r\n  },\r\n  watch: {\r\n    // Si el libro cambia, obtiene las unidades\r\n    libro: function (val) {\r\n      this.obtenerUnidades(); // Obtiene las unidades\r\n    },\r\n  },\r\n\r\n});\r\n",{"version":3,"sources":["Form.vue"],"names":[],"mappings":";AA+CA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"Form.vue","sourceRoot":"src/views/biblioteca/Form","sourcesContent":["<template>\r\n  <div class=\"p-4\">\r\n    <vs-button type=\"border\" color=\"primary\" @click=\"$router.go(-1)\">\r\n      Regresar\r\n    </vs-button>\r\n    <form onsubmit=\"handleSubmit\" class=\"w-full flex flex-col\">\r\n      <div class=\"flex flex-col md:flex-row md:justify-between md:space-x-2\">\r\n        <div class=\"w-full\">\r\n          <v-select class=\"w-full\" label=\"nombrelibro\" :options=\"libros\" v-model=\"libro\">\r\n            <template #header>Libro</template>\r\n          </v-select>\r\n          <button v-if=\"libro && libro.pdfconguia\" class=\"outline-none border-none hover:underline bg-none cursor-pointer\"\r\n            @click=\"datopdfconguia(libro.pdfconguia)\">\r\n            Ver libro\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full\">\r\n          <v-select class=\"w-full\" label=\"unidad\" :options=\"unidades\" v-model=\"unidad\">\r\n            <template #header>Unidad</template>\r\n          </v-select>\r\n        </div>\r\n      </div>\r\n      <span class=\"mt-4 mb-2 text-md font-bold\">\r\n        Contenido:\r\n      </span>\r\n      <div v-for=\"(contenido, index) in contenidos\" :key=\"index\">\r\n        <vs-input v-if=\"contenido.tipo === 'texto corto'\" class=\"w-full my-2\" :label-placeholder=\"contenido.label\"\r\n          v-model=\"contenido.valor\" />\r\n        <v-select v-else-if=\"contenido.tipo === 'menu de opciones'\" class=\"w-full my-2\" :options=\"contenido.opciones\"\r\n          v-model=\"contenido.valor\">\r\n          <template #header>{{ contenido.label }}</template>\r\n        </v-select>\r\n        <div v-else>\r\n          <span>{{ contenido.label }}</span>\r\n          <quill-editor :content=\"contenido.valor\" @change=\"onEditorChange($event, contenido)\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"mt-4 flex justify-end\">\r\n        <vs-button type=\"border\" color=\"primary\" @click=\"handleSubmit\">\r\n          Guardar\r\n        </vs-button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport vSelect from 'vue-select';\r\nimport { quillEditor } from 'vue-quill-editor'\r\n\r\nimport 'quill/dist/quill.core.css' // import styles\r\nimport 'quill/dist/quill.snow.css' // for snow theme\r\nimport 'quill/dist/quill.bubble.css' // for bubble theme\r\n\r\nexport default ({\r\n  components: {\r\n    vSelect,\r\n    quillEditor,\r\n  },\r\n  data() {\r\n    return {\r\n      area: null,\r\n      contenidoId: null,\r\n      libros: [],\r\n      libro: null,\r\n      unidades: [],\r\n      unidad: null,\r\n      contenidos: [],\r\n      contentData: null,\r\n      cUser: null,\r\n    };\r\n  },\r\n  created() {\r\n    this.area = JSON.parse(localStorage.getItem('area')); // Obtiene el área seleccionada\r\n    this.contenidoId = this.$route.params.id; // Obtiene el id del contenido\r\n    this.cUser = JSON.parse(localStorage.getItem('usuario')); // Obtiene el usuario actual\r\n  },\r\n  async mounted() {\r\n    await this.obtenerLibros(); // Obtiene los libros\r\n    await this.obtenerUnidades(); // Obtiene las unidades\r\n    await this.obtenerFormato(); // Obtiene el formato del contenido\r\n  },\r\n  methods: {\r\n    async obtenerFormato() {\r\n      const me = this; // Variable para almacenar el contexto actual\r\n\r\n      me.$vs.loading(); // Muestra el spinner de carga\r\n\r\n      // Obtiene el formato del contenido\r\n      me.$http.get(`${me.$server_url}biblioteca/contenido/formato?areaId=${me.area.idarea}${me.contenidoId ? `&contenidoId=${me.contenidoId}` : ''}`).then((res) => {\r\n        me.libro = me.libros.find((libro) => libro.idlibro === res.data.data.id_libro) || null; // Asigna el libro del contenido\r\n        me.contentData = res.data.data; // Asigna los datos del contenido\r\n\r\n        // Si el contenido tiene un formato, lo asigna a la variable 'contenidos'\r\n        if (res.data.data.contenidoformato) {\r\n          me.contenidos = JSON.parse(res.data.data.contenidoformato); // Parsea la cadena JSON a un objeto\r\n        } else {\r\n          me.contenidos = JSON.parse(res.data.data.contenido); // Parsea la cadena JSON a un objeto\r\n        }\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close();\r\n      });\r\n    },\r\n    async obtenerLibros() {\r\n      const me = this;\r\n\r\n      me.$vs.loading();\r\n\r\n      // Obtiene los libros del área seleccionada\r\n      me.$http.get(`${me.$server_url}biblioteca/libros?idArea=${me.area.idarea}`).then((res) => {\r\n        me.libros = res.data.data; // Asigna los libros obtenidos a la variable 'libros'\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close(); // Cierra el spinner de carga\r\n      });\r\n    },\r\n    async obtenerUnidades() {\r\n      const me = this;\r\n\r\n      if (me.libro) {\r\n        me.$vs.loading(); // Muestra el spinner de carga\r\n\r\n        // Obtiene las unidades del libro seleccionado\r\n        me.$http.get(`${me.$server_url}biblioteca/libros/${me.libro.idlibro}/unidades`).then((res) => {\r\n          me.unidades = res.data.data; // Asigna las unidades obtenidas a la variable 'unidades'\r\n\r\n          // Si el contenido tiene un id de unidad, asigna la unidad del contenido a la variable 'unidad'\r\n          if (me.libro) {\r\n            me.unidad = me.unidades.find((u) => u.id_unidad_libro === me.contentData.id_unidad_libro) || null; // Asigna la unidad del contenido\r\n          }\r\n        }).catch((err) => {\r\n          me.$vs.notify({\r\n            title: 'Error',\r\n            text: err.message,\r\n            color: 'danger',\r\n            position: 'top-right',\r\n          });\r\n        }).finally(() => {\r\n          me.$vs.loading.close(); // Cierra el spinner de carga\r\n        });\r\n      }\r\n    },\r\n    datopdfconguia(url) {\r\n      let me = this\r\n\r\n      event.preventDefault(); // Evita que se recargue la página\r\n\r\n      // Si el contenido no tiene un PDF con guía, muestra una notificación\r\n      if (url === null || url === 'null') {\r\n        me.$vs.notify({\r\n          text: 'El PDF con guía aun no está disponible',\r\n          color: 'warning',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-triangle'\r\n        })\r\n        return\r\n      }\r\n      localStorage.url_guia = url; // Almacena la URL del PDF con guía en el almacenamiento local\r\n      let route = this.$router.resolve({ path: '/docente/libro/pdfconguia' }); // Obtiene la ruta de la página de visualización del PDF con guía\r\n      window.open(route.href, '_blank'); // Abre la página de visualización del PDF con guía en una nueva pestaña\r\n    },\r\n    handleSubmit() {\r\n      const me = this;\r\n      const formData = new FormData(); // Crea un objeto FormData\r\n\r\n      if (!me.area) {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Ha ocurrido un error al obtener el área',\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!me.libro) {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Debe seleccionar un libro',\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!me.unidad) {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: 'Debe seleccionar una unidad',\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n\r\n\r\n      formData.append('idArea', me.area.idarea); // Agrega el id del área al objeto FormData\r\n      formData.append('idLibro', me.libro.idlibro); // Agrega el id del libro al objeto FormData\r\n      formData.append('idUnidad', me.unidad.id_unidad_libro); // Agrega el id de la unidad al objeto FormData\r\n      formData.append('contenido', JSON.stringify(me.contenidos)); // Agrega el contenido al objeto FormData\r\n      formData.append('idUsuario', me.cUser.idusuario); // Agrega el id del usuario al objeto FormData\r\n\r\n      // Si el contenido tiene un id, agrega el id del contenido al objeto FormData\r\n      if (me.contenidoId) {\r\n        formData.append('idContenido', me.contenidoId); // Agrega el id del contenido al objeto FormData\r\n      }\r\n\r\n      me.$vs.loading(); // Muestra el spinner de carga\r\n\r\n      // Realiza una petición para guardar el contenido\r\n      me.$http.post(`${me.$server_url}biblioteca/contenido`, formData).then((res) => {\r\n        me.$vs.notify({\r\n          title: 'Éxito',\r\n          text: res.data.message,\r\n          color: 'success',\r\n          position: 'top-right',\r\n        });\r\n        me.$emit('close'); // Emite un evento para cerrar el modal\r\n      }).catch((err) => {\r\n        me.$vs.notify({\r\n          title: 'Error',\r\n          text: err.message,\r\n          color: 'danger',\r\n          position: 'top-right',\r\n        });\r\n      }).finally(() => {\r\n        me.$vs.loading.close(); // Cierra el spinner de carga\r\n        me.$router.push({ name: 'biblioteca', query: { id: me.area.idarea } }); // Redirecciona a la ruta de biblioteca\r\n      });\r\n    },\r\n    onEditorChange(event, contenido) {\r\n      contenido.valor = event.html;\r\n    },\r\n  },\r\n  watch: {\r\n    // Si el libro cambia, obtiene las unidades\r\n    libro: function (val) {\r\n      this.obtenerUnidades(); // Obtiene las unidades\r\n    },\r\n  },\r\n\r\n});\r\n</script>\r\n"]}]}