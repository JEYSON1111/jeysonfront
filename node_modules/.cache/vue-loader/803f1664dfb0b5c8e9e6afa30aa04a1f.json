{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\pedidos\\gerencia\\reportes\\ReporteVentaVendedor2.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\pedidos\\gerencia\\reportes\\ReporteVentaVendedor2.vue","mtime":1712682816346},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport vSelect from 'vue-select'\r\nimport moment from \"moment\";\r\nimport * as XLSX from 'xlsx';\r\nexport default{\r\n    data(){\r\n        return{\r\n            TmparregloVenta:[],\r\n            arregloVenta:[],\r\n            arregloPeriodos:[],\r\n            periodoSelectAnterior:'',\r\n            periodoSelectDespues:'',\r\n            checkList:false,\r\n            year:'',\r\n            tipo:0,\r\n            region:2,\r\n        }\r\n    },\r\n    components:{\r\n        vSelect,\r\n    },\r\n    mounted(){\r\n        let me = this;\r\n        me.year = moment().format('YYYY')\r\n        // me.getValoresVenta()\r\n        me.getPeriodos()\r\n    },\r\n    computed:{\r\n        sumaVentaBrutaAnterior(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.VentaBAnterior)\r\n                let total = datos.reduce((a, b) => a + (b[\"VentaBAnterior\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n        sumaNetaAnterior(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.ventaNAnterior)\r\n                let total = datos.reduce((a, b) => a + (b[\"ventaNAnterior\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n        sumaVentaBrutaActual(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.ventaBrutaActual)\r\n                let total = datos.reduce((a, b) => a + (b[\"ventaBrutaActual\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n        sumaVentaNetaActual(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.ven_neta_actual)\r\n                let total = datos.reduce((a, b) => a + (b[\"ven_neta_actual\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n        sumaVariacionVentaBruta(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.VariacionVentaBruta)\r\n                let total = datos.reduce((a, b) => a + (b[\"VariacionVentaBruta\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n    },\r\n    methods:{\r\n        getPeriodos(){\r\n            let me = this\r\n            this.$http.get(this.$server_url+'get_periodos_pedidos')\r\n            .then(res => {\r\n                let datos = res.data\r\n                me.arregloPeriodos = datos.filter(p => p.region_idregion == me.region)\r\n            })\r\n            .catch(function (error) {\r\n            })\r\n        },\r\n        filtrarDecimal(numero){\r\n            let me = this\r\n            const transformar = (numero).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n            return transformar\r\n        },\r\n        getValoresVenta() {\r\n            let me = this;\r\n            me.arregloVenta = []\r\n            me.TmparregloVenta = []\r\n            let msj = \"\"\r\n            if(me.periodoSelectAnterior == \"\" || me.periodoSelectAnterior == null || me.periodoSelectAnterior == undefined){\r\n                msj = 'Seleccione un período anterior por favor'\r\n                me.f_notificaciones(msj, 'warning', 'icon-alert-triangle')\r\n                return\r\n            }\r\n            if(me.periodoSelectDespues == \"\" || me.periodoSelectDespues == null || me.periodoSelectDespues == undefined){\r\n                msj = 'Seleccione un período despues por favor'\r\n                me.f_notificaciones(msj, 'warning', 'icon-alert-triangle')\r\n                return\r\n            }\r\n            me.$vs.loading()\r\n            var url = 'pruebatest?periodo_idUno='+me.periodoSelectAnterior.idperiodoescolar+'&periodo_idDos='+me.periodoSelectDespues.idperiodoescolar+'&codigoC='+me.periodoSelectAnterior.codigo_contrato+'&codigoC2='+me.periodoSelectDespues.codigo_contrato\r\n            this.$http.get(this.$server_url+url)\r\n                .then(function (res) {\r\n                    me.$vs.loading.close()\r\n                    if(res.data.status == 0){\r\n                        let msj = res.data.message\r\n                        me.f_notificaciones(msj, 'warning', 'icon-alert-triangle')\r\n                        return\r\n                    }\r\n                    var arregloPredatos = []\r\n                    var datos = []\r\n                    datos = res.data\r\n                    datos.forEach(element => {\r\n                        var cal = new Object();\r\n                        cal.id_asesor          = element.id_asesor\r\n                        cal.asesor             = element.asesor\r\n                        cal.iniciales          = element.iniciales\r\n                        cal.cedula             = element.cedula\r\n                        let arrayContratos     = element.ContratosDespues.contratos\r\n                        let arraySinContratos  = element.ContratosDespues.sin_contratos[0]\r\n                        let arrayAnterior      = element.ContratosAnterior\r\n                        //venta actual contratos\r\n                        cal.ConCVentaBruta     = arrayContratos.reduce((a, b) => parseFloat(a) + parseFloat((b[\"VEN_VALOR\"] || 0)), 0);\r\n                        cal.ConCVentaNeta      = arrayContratos.reduce((a, b) => parseFloat(a) + parseFloat((b[\"ven_neta\"] || 0)), 0);\r\n                        //venta actual sin contratos\r\n                        cal.SinCVentaBruta     = parseFloat(arraySinContratos.ventaBrutaActual)\r\n                        cal.SinCVentaNeta      = parseFloat(arraySinContratos.ven_neta_actual)\r\n                        //venta anterior\r\n                        cal.VentaBAnterior     = arrayAnterior.reduce((a, b) => parseFloat(a) + parseFloat((b[\"VEN_VALOR\"] || 0)), 0);\r\n                        cal.ventaNAnterior     = arrayAnterior.reduce((a, b) => parseFloat(a) + parseFloat((b[\"ven_neta\"] || 0)), 0);\r\n                        arregloPredatos.push(cal)\r\n                    });\r\n                    me.arregloVenta = arregloPredatos\r\n                    console.log(\"uno\",me.arregloVenta)\r\n                    me.renderType()\r\n                })\r\n                .catch(function (error) {\r\n                    me.$vs.loading.close()\r\n                    console.log(error + ' error');\r\n                })\r\n        },\r\n        renderType(){\r\n            let me = this;\r\n            me.TmparregloVenta = []\r\n            let preDatos = []\r\n            preDatos     = me.arregloVenta\r\n            var arregloPreFinal = []\r\n            //segundos calculos\r\n            preDatos.forEach(element => {\r\n                var cal = new Object();\r\n                cal.id_asesor               = element.id_asesor\r\n                cal.asesor                  = element.asesor\r\n                cal.iniciales               = element.iniciales\r\n                cal.cedula                  = element.cedula\r\n                //venta actual contratos\r\n                cal.ConCVentaBruta          = element.ConCVentaBruta\r\n                cal.ConCVentaNeta           = element.ConCVentaNeta\r\n                //venta actual sin contratos\r\n                cal.SinCVentaBruta          = element.SinCVentaBruta\r\n                cal.SinCVentaNeta           = element.SinCVentaNeta\r\n                //venta anterior\r\n                cal.VentaBAnterior          = element.VentaBAnterior\r\n                cal.ventaNAnterior          = element.ventaNAnterior\r\n                //VENTA QUE SE MOSTRARA EN EL FRONT\r\n                //con contratos\r\n                var preVentaBActual         = 0\r\n                if(me.tipo == 0){\r\n                    cal.ventaBrutaActual    = element.ConCVentaBruta\r\n                    cal.ven_neta_actual     = element.ConCVentaNeta\r\n                    preVentaBActual         = element.ConCVentaBruta\r\n                }\r\n                //sin contratos\r\n                if(me.tipo == 1){\r\n                    cal.ventaBrutaActual    = element.SinCVentaBruta\r\n                    cal.ven_neta_actual     = element.SinCVentaNeta\r\n                    preVentaBActual         = element.SinCVentaBruta\r\n                }\r\n                //todos(bruta con contrato y sin contrato)\r\n                if(me.tipo == 2){\r\n                    cal.ventaBrutaActual    = parseFloat(element.ConCVentaBruta) + parseFloat(element.SinCVentaBruta )\r\n                    cal.ven_neta_actual     = parseFloat(element.ConCVentaNeta)  + parseFloat(element.SinCVentaNeta )\r\n                    preVentaBActual         = parseFloat(element.ConCVentaBruta) + parseFloat(element.SinCVentaBruta )\r\n                }\r\n                //VARIACION VENTAS BRUTAS => venta actual bruta - venta bruta anterior\r\n                cal.VariacionVentaBruta     = preVentaBActual - element.VentaBAnterior\r\n                let restaVentasBrutas       = preVentaBActual - element.VentaBAnterior\r\n                //validar division para cero\r\n                var prePorcentajeVariaciacionPresupuesto = 0;\r\n                if((element.VentaBAnterior == 0)){\r\n                    prePorcentajeVariaciacionPresupuesto = 0\r\n                }else{\r\n                    prePorcentajeVariaciacionPresupuesto = restaVentasBrutas / element.VentaBAnterior\r\n                }\r\n                //PORCENTAJE EN RELACION AL PRESUPUESTO => ( (venta actual bruta - venta bruta anterior)/venta actual bruta ) *100\r\n                cal.PorcentajeVariacionPresupuesto = ((prePorcentajeVariaciacionPresupuesto) * 100).toFixed(0)\r\n                arregloPreFinal.push(cal)\r\n            });\r\n            console.log(\"dos\",arregloPreFinal)\r\n            //me.TmparregloVenta = arregloPreFinal\r\n             //FILTRO\r\n             //si checkList es true se mostrara todo los asesores\r\n             if(me.checkList){\r\n              console.log(\"entro1\")\r\n                me.TmparregloVenta = arregloPreFinal\r\n            }else{\r\n              // si checkList es false se mostrara solo los asesores que tengan ventas\r\n              console.log(\"entro2\",arregloPreFinal)\r\n              console.table(arregloPreFinal)\r\n                me.TmparregloVenta = arregloPreFinal.filter(p => (p.preVentaBActual > 0 || p.VentaBAnterior > 0))\r\n            }\r\n        },\r\n        f_notificaciones(msj, color, icono) {\r\n            let me = this;\r\n            me.$vs.notify({\r\n                text: msj,\r\n                color: color,\r\n                iconPack: 'feather',\r\n                icon: icono\r\n            })\r\n            return;\r\n        },\r\n        //metodo par descargar el excel\r\n        ExportToExcel(type, fn, dl) {\r\n          var elt = document.getElementById('miTabla');\r\n          var wb = XLSX.utils.table_to_book(elt, { sheet: \"sheet1\" });\r\n          return dl ?\r\n              XLSX.write(wb, { bookType: type, bookSST: true, type: 'base64' }):\r\n              XLSX.writeFile(wb, fn || ('ReporteVendedores.' + (type || 'xlsx')));\r\n        },\r\n    }\r\n}\r\n",{"version":3,"sources":["ReporteVentaVendedor2.vue"],"names":[],"mappingsfile":"ReporteVentaVendedor2.vue","sourceRoot":"src/views/pedidos/gerencia/reportes","sourcesContent":["<template>\r\n    <div>\r\n        <div>\r\n          <b>Filtro:</b>\r\n          <ul class=\"flex mt-2\">\r\n              <li class=\"modelx\">\r\n                  <vs-radio v-model=\"tipo\" @input=\"renderType()\" vs-name=\"radios1tipo\" vs-value=\"0\">Con contratos</vs-radio>\r\n              </li>\r\n              <li class=\"ml-2\">\r\n              <vs-radio v-model=\"tipo\" @input=\"renderType()\" vs-name=\"radios1tipo\" vs-value=\"1\">Sin contrato</vs-radio>\r\n              </li>\r\n              <li class=\"ml-2\">\r\n              <vs-radio v-model=\"tipo\" @input=\"renderType()\" vs-name=\"radios1tipo\" vs-value=\"2\">Todos</vs-radio>\r\n              </li>\r\n              <li style=\"list-style: none;\">\r\n                  <vs-checkbox v-model=\"checkList\" style=\"margin-left: 10px;\" @input=\"renderType()\">Mostrar todo los asesores</vs-checkbox>\r\n              </li>\r\n          </ul>\r\n          <vs-divider>Region</vs-divider>\r\n          <div class=\"flex justify-center\">\r\n            <ul class=\"flex\">\r\n              <li>\r\n                <vs-radio v-model=\"region\" @input=\"getPeriodos();TmparregloVenta=[];\" vs-name=\"radios1region\" vs-value=\"2\" class=\"mr-3\">Costa</vs-radio>\r\n              </li>\r\n              <li>\r\n                <vs-radio v-model=\"region\" @input=\"getPeriodos();TmparregloVenta=[];\" vs-name=\"radios1region\" vs-value=\"1\">Sierra</vs-radio>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <br>\r\n          <div class=\"vx-row\">\r\n            <div class=\"vx-col w-full sm:w-full md:w-1/2 lg:w-1/2 xl:w-1/2 mb-6\">\r\n              <p> <ion-icon name=\"contract-outline\"></ion-icon>Período anterior</p>\r\n              <v-select :options=\"arregloPeriodos\" @input=\"TmparregloVenta=[];\" :reduce=\"arregloPeriodos => arregloPeriodos\" label=\"periodoescolar\" class=\"w-full\" v-model=\"periodoSelectAnterior\" />\r\n            </div>\r\n            <div class=\"vx-col w-full sm:w-full md:w-1/2 lg:w-1/2 xl:w-1/2 mb-6\">\r\n              <p> <ion-icon name=\"contract-outline\"></ion-icon>Período despues</p>\r\n              <v-select :options=\"arregloPeriodos\" @input=\"TmparregloVenta=[];\" :reduce=\"arregloPeriodos => arregloPeriodos\" label=\"periodoescolar\" class=\"w-full\" v-model=\"periodoSelectDespues\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"flex justify-center\">\r\n            <vs-button color=\"primary\" @click=\"getValoresVenta()\" type=\"border\" icon=\"save\">Generar reporte</vs-button>\r\n          </div>\r\n        </div>\r\n        <div v-if=\"TmparregloVenta.length > 0 && periodoSelectAnterior && periodoSelectDespues\">\r\n            <div class=\"mt-2 flex\">\r\n                <vs-button color=\"success\" @click=\"ExportToExcel('xlsx')\" type=\"border\"><i class=\"fa-solid fa-file-excel\"></i>  Exportar</vs-button>\r\n            </div>\r\n            <p class=\"mt-2\">Cantidad :{{ TmparregloVenta.length }}</p>\r\n            <table width=\"100%\" border=\"1\"  cellspacing=\"0\" cellpadding=\"0\" id=\"miTabla\" class=\"mt-4\">\r\n                <vs-tr>\r\n                  <vs-th colspan=\"1\" rowspan=\"2\" style=\"width: 150px;\" class=\"rotar\"><b>VENDEDOR</b></vs-th>\r\n                  <vs-th colspan=\"1\" rowspan=\"2\" style=\"width: 150px;\" class=\"rotar\"><b>PERIODO ANTERIOR</b></vs-th>\r\n                  <vs-th colspan=\"2\" class=\"rotar\"><b>VENTAS REALES  {{ periodoSelectAnterior.periodoescolar }} </b></vs-th>\r\n                  <vs-th colspan=\"1\" rowspan=\"2\" style=\"width: 150px;\" class=\"rotar\"><b>PERIODO DESPUES</b></vs-th>\r\n                  <vs-th colspan=\"2\" class=\"rotar\"><b>VENTA SEGUN PROMOCION   {{ periodoSelectDespues.periodoescolar }} </b></vs-th>\r\n                  <vs-th rowspan=\"2\">VARIACION VENTAS BRUTAS POR TEMPORADA</vs-th>\r\n                  <vs-th rowspan=\"2\">% DE VARIACION EN  RELACION AL PRESUPUESTO</vs-th>\r\n                </vs-tr>\r\n                <vs-tr>\r\n                  <vs-th>VENTA BRUTA</vs-th>\r\n                  <vs-th>VENTA NETA</vs-th>\r\n                  <vs-th>VENTA BRUTA</vs-th>\r\n                  <vs-th>VENTA NETA</vs-th>\r\n                </vs-tr>\r\n                <tr v-for=\"(tr,key) in TmparregloVenta\" :key=\"key\">\r\n                    <td>\r\n                        <vs-button color=\"success\" @click=\"removeItemFromArr(TmparregloVenta,tr)\"  type=\"flat\" icon-pack=\"feather\" icon=\"icon-x\"></vs-button>\r\n                        <p>{{ tr.asesor.toUpperCase() }}</p>\r\n                        <p>{{ tr.iniciales}}</p>\r\n                    </td>\r\n                    <td>\r\n                      {{ periodoSelectAnterior.periodoescolar }}\r\n                    </td>\r\n                    <td>\r\n                        ${{ filtrarDecimal(tr.VentaBAnterior) }}\r\n                    </td>\r\n                    <td>\r\n                        ${{ filtrarDecimal(tr.ventaNAnterior) }}\r\n                    </td>\r\n                    <vs-td>\r\n                      {{ periodoSelectDespues.periodoescolar }}\r\n                    </vs-td>\r\n                    <td>\r\n                        <p v-if=\"tr.ventaBrutaActual == 0\">$0</p>\r\n                        <p v-else>${{ filtrarDecimal(tr.ventaBrutaActual) }}</p>\r\n                    </td>\r\n                    <td>\r\n                        <p v-if=\"tr.ven_neta_actual == 0\">$0</p>\r\n                        <p v-else>${{ filtrarDecimal(tr.ven_neta_actual) }}</p>\r\n                    </td>\r\n                    <td>${{ filtrarDecimal(tr.VariacionVentaBruta) }}</td>\r\n                    <td>{{ tr.PorcentajeVariacionPresupuesto }} <b style=\"display: none;\">.</b>%</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>TOTAL</b></td>\r\n                    <td><b>${{ sumaVentaBrutaAnterior }}</b></td>\r\n                    <td><b>${{ sumaNetaAnterior }}</b></td>\r\n                    <td><b>${{ sumaVentaBrutaActual }}</b></td>\r\n                    <td><b>${{ sumaVentaNetaActual }}</b></td>\r\n                    <td><b>${{ sumaVariacionVentaBruta }}</b></td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n        <br><br><br><br>\r\n    </div>\r\n</template>\r\n<script>\r\nimport vSelect from 'vue-select'\r\nimport moment from \"moment\";\r\nimport * as XLSX from 'xlsx';\r\nexport default{\r\n    data(){\r\n        return{\r\n            TmparregloVenta:[],\r\n            arregloVenta:[],\r\n            arregloPeriodos:[],\r\n            periodoSelectAnterior:'',\r\n            periodoSelectDespues:'',\r\n            checkList:false,\r\n            year:'',\r\n            tipo:0,\r\n            region:2,\r\n        }\r\n    },\r\n    components:{\r\n        vSelect,\r\n    },\r\n    mounted(){\r\n        let me = this;\r\n        me.year = moment().format('YYYY')\r\n        // me.getValoresVenta()\r\n        me.getPeriodos()\r\n    },\r\n    computed:{\r\n        sumaVentaBrutaAnterior(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.VentaBAnterior)\r\n                let total = datos.reduce((a, b) => a + (b[\"VentaBAnterior\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n        sumaNetaAnterior(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.ventaNAnterior)\r\n                let total = datos.reduce((a, b) => a + (b[\"ventaNAnterior\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n        sumaVentaBrutaActual(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.ventaBrutaActual)\r\n                let total = datos.reduce((a, b) => a + (b[\"ventaBrutaActual\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n        sumaVentaNetaActual(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.ven_neta_actual)\r\n                let total = datos.reduce((a, b) => a + (b[\"ven_neta_actual\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n        sumaVariacionVentaBruta(){\r\n            let me = this;\r\n            if(me.TmparregloVenta.length > 0){\r\n                let datos = me.TmparregloVenta.filter(p => p.VariacionVentaBruta)\r\n                let total = datos.reduce((a, b) => a + (b[\"VariacionVentaBruta\"] || 0), 0);\r\n                var transformar = 0\r\n                if(total == 0 || total == \"0\"){\r\n                }else{\r\n                    transformar = (total).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n                }\r\n                return transformar\r\n            }\r\n        },\r\n    },\r\n    methods:{\r\n        getPeriodos(){\r\n            let me = this\r\n            this.$http.get(this.$server_url+'get_periodos_pedidos')\r\n            .then(res => {\r\n                let datos = res.data\r\n                me.arregloPeriodos = datos.filter(p => p.region_idregion == me.region)\r\n            })\r\n            .catch(function (error) {\r\n            })\r\n        },\r\n        filtrarDecimal(numero){\r\n            let me = this\r\n            const transformar = (numero).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n            return transformar\r\n        },\r\n        getValoresVenta() {\r\n            let me = this;\r\n            me.arregloVenta = []\r\n            me.TmparregloVenta = []\r\n            let msj = \"\"\r\n            if(me.periodoSelectAnterior == \"\" || me.periodoSelectAnterior == null || me.periodoSelectAnterior == undefined){\r\n                msj = 'Seleccione un período anterior por favor'\r\n                me.f_notificaciones(msj, 'warning', 'icon-alert-triangle')\r\n                return\r\n            }\r\n            if(me.periodoSelectDespues == \"\" || me.periodoSelectDespues == null || me.periodoSelectDespues == undefined){\r\n                msj = 'Seleccione un período despues por favor'\r\n                me.f_notificaciones(msj, 'warning', 'icon-alert-triangle')\r\n                return\r\n            }\r\n            me.$vs.loading()\r\n            var url = 'pruebatest?periodo_idUno='+me.periodoSelectAnterior.idperiodoescolar+'&periodo_idDos='+me.periodoSelectDespues.idperiodoescolar+'&codigoC='+me.periodoSelectAnterior.codigo_contrato+'&codigoC2='+me.periodoSelectDespues.codigo_contrato\r\n            this.$http.get(this.$server_url+url)\r\n                .then(function (res) {\r\n                    me.$vs.loading.close()\r\n                    if(res.data.status == 0){\r\n                        let msj = res.data.message\r\n                        me.f_notificaciones(msj, 'warning', 'icon-alert-triangle')\r\n                        return\r\n                    }\r\n                    var arregloPredatos = []\r\n                    var datos = []\r\n                    datos = res.data\r\n                    datos.forEach(element => {\r\n                        var cal = new Object();\r\n                        cal.id_asesor          = element.id_asesor\r\n                        cal.asesor             = element.asesor\r\n                        cal.iniciales          = element.iniciales\r\n                        cal.cedula             = element.cedula\r\n                        let arrayContratos     = element.ContratosDespues.contratos\r\n                        let arraySinContratos  = element.ContratosDespues.sin_contratos[0]\r\n                        let arrayAnterior      = element.ContratosAnterior\r\n                        //venta actual contratos\r\n                        cal.ConCVentaBruta     = arrayContratos.reduce((a, b) => parseFloat(a) + parseFloat((b[\"VEN_VALOR\"] || 0)), 0);\r\n                        cal.ConCVentaNeta      = arrayContratos.reduce((a, b) => parseFloat(a) + parseFloat((b[\"ven_neta\"] || 0)), 0);\r\n                        //venta actual sin contratos\r\n                        cal.SinCVentaBruta     = parseFloat(arraySinContratos.ventaBrutaActual)\r\n                        cal.SinCVentaNeta      = parseFloat(arraySinContratos.ven_neta_actual)\r\n                        //venta anterior\r\n                        cal.VentaBAnterior     = arrayAnterior.reduce((a, b) => parseFloat(a) + parseFloat((b[\"VEN_VALOR\"] || 0)), 0);\r\n                        cal.ventaNAnterior     = arrayAnterior.reduce((a, b) => parseFloat(a) + parseFloat((b[\"ven_neta\"] || 0)), 0);\r\n                        arregloPredatos.push(cal)\r\n                    });\r\n                    me.arregloVenta = arregloPredatos\r\n                    console.log(\"uno\",me.arregloVenta)\r\n                    me.renderType()\r\n                })\r\n                .catch(function (error) {\r\n                    me.$vs.loading.close()\r\n                    console.log(error + ' error');\r\n                })\r\n        },\r\n        renderType(){\r\n            let me = this;\r\n            me.TmparregloVenta = []\r\n            let preDatos = []\r\n            preDatos     = me.arregloVenta\r\n            var arregloPreFinal = []\r\n            //segundos calculos\r\n            preDatos.forEach(element => {\r\n                var cal = new Object();\r\n                cal.id_asesor               = element.id_asesor\r\n                cal.asesor                  = element.asesor\r\n                cal.iniciales               = element.iniciales\r\n                cal.cedula                  = element.cedula\r\n                //venta actual contratos\r\n                cal.ConCVentaBruta          = element.ConCVentaBruta\r\n                cal.ConCVentaNeta           = element.ConCVentaNeta\r\n                //venta actual sin contratos\r\n                cal.SinCVentaBruta          = element.SinCVentaBruta\r\n                cal.SinCVentaNeta           = element.SinCVentaNeta\r\n                //venta anterior\r\n                cal.VentaBAnterior          = element.VentaBAnterior\r\n                cal.ventaNAnterior          = element.ventaNAnterior\r\n                //VENTA QUE SE MOSTRARA EN EL FRONT\r\n                //con contratos\r\n                var preVentaBActual         = 0\r\n                if(me.tipo == 0){\r\n                    cal.ventaBrutaActual    = element.ConCVentaBruta\r\n                    cal.ven_neta_actual     = element.ConCVentaNeta\r\n                    preVentaBActual         = element.ConCVentaBruta\r\n                }\r\n                //sin contratos\r\n                if(me.tipo == 1){\r\n                    cal.ventaBrutaActual    = element.SinCVentaBruta\r\n                    cal.ven_neta_actual     = element.SinCVentaNeta\r\n                    preVentaBActual         = element.SinCVentaBruta\r\n                }\r\n                //todos(bruta con contrato y sin contrato)\r\n                if(me.tipo == 2){\r\n                    cal.ventaBrutaActual    = parseFloat(element.ConCVentaBruta) + parseFloat(element.SinCVentaBruta )\r\n                    cal.ven_neta_actual     = parseFloat(element.ConCVentaNeta)  + parseFloat(element.SinCVentaNeta )\r\n                    preVentaBActual         = parseFloat(element.ConCVentaBruta) + parseFloat(element.SinCVentaBruta )\r\n                }\r\n                //VARIACION VENTAS BRUTAS => venta actual bruta - venta bruta anterior\r\n                cal.VariacionVentaBruta     = preVentaBActual - element.VentaBAnterior\r\n                let restaVentasBrutas       = preVentaBActual - element.VentaBAnterior\r\n                //validar division para cero\r\n                var prePorcentajeVariaciacionPresupuesto = 0;\r\n                if((element.VentaBAnterior == 0)){\r\n                    prePorcentajeVariaciacionPresupuesto = 0\r\n                }else{\r\n                    prePorcentajeVariaciacionPresupuesto = restaVentasBrutas / element.VentaBAnterior\r\n                }\r\n                //PORCENTAJE EN RELACION AL PRESUPUESTO => ( (venta actual bruta - venta bruta anterior)/venta actual bruta ) *100\r\n                cal.PorcentajeVariacionPresupuesto = ((prePorcentajeVariaciacionPresupuesto) * 100).toFixed(0)\r\n                arregloPreFinal.push(cal)\r\n            });\r\n            console.log(\"dos\",arregloPreFinal)\r\n            //me.TmparregloVenta = arregloPreFinal\r\n             //FILTRO\r\n             //si checkList es true se mostrara todo los asesores\r\n             if(me.checkList){\r\n              console.log(\"entro1\")\r\n                me.TmparregloVenta = arregloPreFinal\r\n            }else{\r\n              // si checkList es false se mostrara solo los asesores que tengan ventas\r\n              console.log(\"entro2\",arregloPreFinal)\r\n              console.table(arregloPreFinal)\r\n                me.TmparregloVenta = arregloPreFinal.filter(p => (p.preVentaBActual > 0 || p.VentaBAnterior > 0))\r\n            }\r\n        },\r\n        f_notificaciones(msj, color, icono) {\r\n            let me = this;\r\n            me.$vs.notify({\r\n                text: msj,\r\n                color: color,\r\n                iconPack: 'feather',\r\n                icon: icono\r\n            })\r\n            return;\r\n        },\r\n        //metodo par descargar el excel\r\n        ExportToExcel(type, fn, dl) {\r\n          var elt = document.getElementById('miTabla');\r\n          var wb = XLSX.utils.table_to_book(elt, { sheet: \"sheet1\" });\r\n          return dl ?\r\n              XLSX.write(wb, { bookType: type, bookSST: true, type: 'base64' }):\r\n              XLSX.writeFile(wb, fn || ('ReporteVendedores.' + (type || 'xlsx')));\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.tabla1 {\r\n  table-layout: fixed;\r\n  width: 95%;\r\n  border-collapse: collapse;\r\n  border: none;\r\n  margin-left: 15px;\r\n}\r\n.encabezado ,td,th {\r\n    border: 1px solid rgb(227, 227, 227);\r\n    text-align: center;\r\n    border-spacing: 0;\r\n}\r\n</style>\r\n"]}]}