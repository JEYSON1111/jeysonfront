{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\paquetes\\components\\GenerarCodigosPaquetes.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\paquetes\\components\\GenerarCodigosPaquetes.vue","mtime":1712682815672},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nexport default{\r\n  data(){\r\n    return{\r\n      usuario:[],\r\n      arregloCodigos:[],\r\n      codigoSelected:[],\r\n      codigosNoIngresados:[],\r\n      cantidad:0,\r\n      code:'',\r\n      codigo_paquete:'',\r\n      longitud_codigo:0,\r\n      estadoProceso:0,\r\n      porcentaje:0,\r\n      progressInterActivo:0,\r\n      textAlertCant:'',\r\n      popupProblemas:false,\r\n      //varaibles para exportar excel\r\n      fileName: null,\r\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n      cellAutoWidth: true,\r\n      selectedFormat: 'xlsx',\r\n      exportado:0,\r\n    }\r\n  },\r\n  created(){\r\n    let me = this;\r\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n  },\r\n  mounted(){\r\n    let me = this;\r\n    me.getCodigoPaquete()\r\n  },\r\n  methods:{\r\n    getCodigoPaquete(){\r\n      let me = this;\r\n      this.$http.get(this.$server_url+'paquetes/paquetes?traerConfiguracionPaquete=yes')\r\n      .then(function (res) {\r\n        if(res.data.length == 0){\r\n          me.codigo_paquete   = '0'\r\n        }else{\r\n          me.codigo_paquete   = res.data[0].codigo_paquete\r\n          me.longitud_codigo  = res.data[0].longitud\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error + ' error');\r\n      })\r\n    },\r\n    //generar codigos\r\n    generarCodigos(fin) {\r\n      let me = this;\r\n      this.textAlertCant  = '';\r\n      this.exportado      = 0,\r\n      this.arregloCodigos = []\r\n      this.codigoSelected = [];\r\n      this.estadoProceso  = 0\r\n      if (fin > 5000) {\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'Máximo 5000 códigos se puede generar para el excel'\r\n        })\r\n        return false;\r\n      }\r\n      if(fin == 0 ){\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'Debe escribir al menos 1 código para generar'\r\n        })\r\n        return false;\r\n      }\r\n      if(me.codigo_paquete == 0){\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'No existe la configuración para los paquetes'\r\n        })\r\n        return false;\r\n      }\r\n      if(me.longitud_codigo < 2){\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'La longitud del código no puede ser menor a 2'\r\n        })\r\n        return false;\r\n      }\r\n      this.code = this.codigo_paquete + \"-\";\r\n      me.arregloCodigos              = [];\r\n      let formData = new FormData();\r\n      formData.append('longitud', this.longitud_codigo);\r\n      formData.append('code',     this.code);\r\n      formData.append('cantidad', fin);\r\n      me.$vs.loading();\r\n      this.$http.post(this.$server_url+'paquetes/generarCodigosPaquete', formData)\r\n      .then(function (res) {\r\n        me.$vs.loading.close()\r\n        me.arregloCodigos = res.data.codigos;\r\n        me.estadoProceso = 1;\r\n        me.$vs.notify({\r\n          color: 'primary',\r\n          title: 'Mensaje',\r\n          text: 'Codigos Cargados'\r\n        })\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error + ' error');\r\n        me.$vs.loading.close()\r\n      })\r\n    },\r\n    //Guardar codigos en la BD\r\n    async guardarCodigos() {\r\n      let me = this;\r\n      this.progressInterActivo     = 1;\r\n      var codigosEnviar            = [];\r\n      for (var i = 0; i < this.arregloCodigos.length; i++) {\r\n        codigosEnviar.push(this.arregloCodigos[i].codigo);\r\n      }\r\n      this.openLoadingColor()\r\n      var formData = new FormData();\r\n      formData.append(\"user_created\",     me.usuario.idusuario);\r\n      formData.append(\"codigo\",           codigosEnviar);\r\n      me.$vs.loading();\r\n      //SE GENERA LOS CODIGOS PERO NO SE VERIFICA CON LA BASE\r\n      this.$http.post(this.$server_url + 'paquetes/paquetes', formData)\r\n      .then(res => {\r\n        //porcentaje\r\n        me.arregloCodigos           = []\r\n        me.arregloCodigos           = res.data.codigosGuardados\r\n        var porcentajeAnterior      = 0\r\n        porcentajeAnterior          = res.data.porcentajeAnterior\r\n        this.codigosNoIngresados    = res.data.codigosNoIngresadosAnterior;\r\n        this.porcentaje             = porcentajeAnterior\r\n        me.estadoProceso            = 2;\r\n        this.$vs.loading.close()\r\n        this.textAlertCant          = 'Se han guardado con éxito: ' + this.porcentaje + ' códigos.';\r\n        this.progressInterActivo    = '';\r\n        if(this.codigosNoIngresados > 0){\r\n          me.popupProblemas = true\r\n        }\r\n        me.exportToExcel()\r\n      })\r\n      .catch(function (error) {\r\n        this.$vs.loading.close()\r\n        alert('Error no existen códigos disponibles ' + error);\r\n      });\r\n    },\r\n    //METODOS PARA EXPORTAR EXCEL\r\n    exportToExcel() {\r\n      let me = this\r\n      let headerTitle = \"\"\r\n      let headerVal = \"\"\r\n        headerTitle = [\r\n          'codigo',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          'secuencia',\r\n          'imprimir',\r\n        ];\r\n        headerVal = [\r\n          'codigo',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          ''\r\n        ];\r\n      let codigoSelectedMayus = this.arregloCodigos\r\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n        for (var key in codigoSelectedMayus[i]) {\r\n            if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n                codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n            }\r\n        }\r\n      }\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const list = codigoSelectedMayus\r\n        const data = this.formatJson(headerVal, list)\r\n        for (var i = 0; i < data.length; i++) {\r\n          data[i][6] = i+1\r\n          data[i][7] = 1\r\n        }\r\n        excel.export_json_to_excel({\r\n          header: headerTitle,\r\n          data,\r\n          filename: 'CodigosPaquete',\r\n          autoWidth: this.cellAutoWidth,\r\n          bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n        // this.textAlertCant  = '';\r\n        this.cantidad       = '';\r\n        this.codigoSelected = [];\r\n        this.exportado      = 1\r\n        me.$vs.notify({\r\n        text:'Se exporto corectamente',\r\n        color:'success',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => {\r\n            return v[j]\r\n        }))\r\n    },\r\n    clearFields() {\r\n        this.fileName = ''\r\n        this.cellAutoWidth = true\r\n        this.selectedFormat = 'xls'\r\n    },\r\n    openLoadingColor(libro) {\r\n      this.$vs.loading({\r\n          color: '#1A76F2'\r\n      })\r\n    },\r\n  },\r\n}\r\n",{"version":3,"sources":["GenerarCodigosPaquetes.vue"],"names":[],"mappings":";AAgfile":"GenerarCodigosPaquetes.vue","sourceRoot":"src/views/codigos/paquetes/components","sourcesContent":["<template>\r\n  <div>\r\n    <vs-progress v-if=\"porcentaje === 100 && estadoProceso > 0\" :height=\"8\" :percent=\"porcentaje\" color=\"success\"></vs-progress>\r\n    <vs-progress v-if=\"progressInterActivo != ''\" indeterminate color=\"primary\"></vs-progress>\r\n    <p class=\"text-center text-success font-bold text-3xl\" v-if=\"exportado == 1\"><ion-icon name=\"star-outline\"></ion-icon> Se exporto el archivo <b>{{ filename }}</b></p>\r\n    <!--TABLA-->\r\n    <b style=\"color: #0AD68C;\">{{ textAlertCant }}</b>\r\n    <vs-table multiple v-model=\"codigoSelected\" pagination max-items=\"25\" search :data=\"arregloCodigos\">\r\n      <template slot=\"header\">\r\n        <div class=\"flex mt-5\" style=\"flex-wrap:wrap;\">\r\n          <span class=\"mt-2\">Cantidad:</span>\r\n          <div>\r\n            <vx-tooltip color=\"warning\" text=\"Ingrese la cantidad de códigos que desea generar (máximo 5000)\">\r\n              <vs-input type=\"number\" class=\"inputx ml-2\" @keyup.enter=\"generarCodigos(cantidad);\" style=\"width: 90px; text-align: center;margin-top:-3px;\" v-model=\"cantidad\" />\r\n            </vx-tooltip>\r\n          </div>\r\n          <div>\r\n            <vs-button color=\"primary\" class=\"generarBoton ml-4\" size=\"small\" style=\"font-size: 13px;\" @click=\"generarCodigos(cantidad);\"  v-if=\"cantidad<=5000\">Generar Códigos</vs-button>\r\n          </div>\r\n          <div>\r\n            <div v-if=\"estadoProceso == 1 && arregloCodigos[0]\" style=\"display:flex;\">\r\n              <vs-button color=\"success\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;\" @click=\"guardarCodigos(); estadoProceso = 0;\">Guardar</vs-button>\r\n              <vx-tooltip color=\"warning\" text=\"Generar codigos de barras\" style=\"margin-left:20px;border-radius:20px;\">\r\n              </vx-tooltip>\r\n            </div>\r\n            <vx-tooltip v-if=\"estadoProceso == 2\" color=\"warning\" text=\"Antes de exportar seleccione los codigos deseados.\">\r\n                <vs-button color=\"dark\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;\" @click=\"exportToExcel();\">Exportar</vs-button>\r\n            </vx-tooltip>\r\n          </div>\r\n          <p class=\"ml-4 mt-2 text-warning\" style=\"font-size:11px;\">Códigos en tabla: {{ arregloCodigos.length }}</p>\r\n        </div>\r\n      </template>\r\n      <template slot=\"thead\">\r\n        <vs-th sort-key=\"codigo\">Código</vs-th>\r\n      </template>\r\n      <template slot-scope=\"{data}\">\r\n        <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n          <vs-td :data=\"data[indextr].codigo\">\r\n              {{ data[indextr].codigo }}\r\n          </vs-td>\r\n        </vs-tr>\r\n      </template>\r\n    </vs-table>\r\n    <!--MODAL-->\r\n    <!--MODAL PROBLEMA CODIGOS-->\r\n    <vs-popup classContent=\"popup-example\" title=\"códigos que no se pudieron ingresar\" :active.sync=\"popupProblemas\">\r\n      <vs-table multiple pagination max-items=\"10\" search :data=\"codigosNoIngresados\" v-if=\"popupProblemas\">\r\n        <template slot=\"header\">\r\n        </template>\r\n        <template slot=\"thead\">\r\n          <vs-th sort-key=\"codigo\">Código</vs-th>\r\n        </template>\r\n        <template slot-scope=\"{data}\">\r\n          <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n            <vs-td :data=\"data[indextr].codigo\">\r\n                {{ data[indextr].codigo }}\r\n            </vs-td>\r\n          </vs-tr>\r\n        </template>\r\n      </vs-table>\r\n    </vs-popup>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default{\r\n  data(){\r\n    return{\r\n      usuario:[],\r\n      arregloCodigos:[],\r\n      codigoSelected:[],\r\n      codigosNoIngresados:[],\r\n      cantidad:0,\r\n      code:'',\r\n      codigo_paquete:'',\r\n      longitud_codigo:0,\r\n      estadoProceso:0,\r\n      porcentaje:0,\r\n      progressInterActivo:0,\r\n      textAlertCant:'',\r\n      popupProblemas:false,\r\n      //varaibles para exportar excel\r\n      fileName: null,\r\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n      cellAutoWidth: true,\r\n      selectedFormat: 'xlsx',\r\n      exportado:0,\r\n    }\r\n  },\r\n  created(){\r\n    let me = this;\r\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n  },\r\n  mounted(){\r\n    let me = this;\r\n    me.getCodigoPaquete()\r\n  },\r\n  methods:{\r\n    getCodigoPaquete(){\r\n      let me = this;\r\n      this.$http.get(this.$server_url+'paquetes/paquetes?traerConfiguracionPaquete=yes')\r\n      .then(function (res) {\r\n        if(res.data.length == 0){\r\n          me.codigo_paquete   = '0'\r\n        }else{\r\n          me.codigo_paquete   = res.data[0].codigo_paquete\r\n          me.longitud_codigo  = res.data[0].longitud\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error + ' error');\r\n      })\r\n    },\r\n    //generar codigos\r\n    generarCodigos(fin) {\r\n      let me = this;\r\n      this.textAlertCant  = '';\r\n      this.exportado      = 0,\r\n      this.arregloCodigos = []\r\n      this.codigoSelected = [];\r\n      this.estadoProceso  = 0\r\n      if (fin > 5000) {\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'Máximo 5000 códigos se puede generar para el excel'\r\n        })\r\n        return false;\r\n      }\r\n      if(fin == 0 ){\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'Debe escribir al menos 1 código para generar'\r\n        })\r\n        return false;\r\n      }\r\n      if(me.codigo_paquete == 0){\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'No existe la configuración para los paquetes'\r\n        })\r\n        return false;\r\n      }\r\n      if(me.longitud_codigo < 2){\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'La longitud del código no puede ser menor a 2'\r\n        })\r\n        return false;\r\n      }\r\n      this.code = this.codigo_paquete + \"-\";\r\n      me.arregloCodigos              = [];\r\n      let formData = new FormData();\r\n      formData.append('longitud', this.longitud_codigo);\r\n      formData.append('code',     this.code);\r\n      formData.append('cantidad', fin);\r\n      me.$vs.loading();\r\n      this.$http.post(this.$server_url+'paquetes/generarCodigosPaquete', formData)\r\n      .then(function (res) {\r\n        me.$vs.loading.close()\r\n        me.arregloCodigos = res.data.codigos;\r\n        me.estadoProceso = 1;\r\n        me.$vs.notify({\r\n          color: 'primary',\r\n          title: 'Mensaje',\r\n          text: 'Codigos Cargados'\r\n        })\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error + ' error');\r\n        me.$vs.loading.close()\r\n      })\r\n    },\r\n    //Guardar codigos en la BD\r\n    async guardarCodigos() {\r\n      let me = this;\r\n      this.progressInterActivo     = 1;\r\n      var codigosEnviar            = [];\r\n      for (var i = 0; i < this.arregloCodigos.length; i++) {\r\n        codigosEnviar.push(this.arregloCodigos[i].codigo);\r\n      }\r\n      this.openLoadingColor()\r\n      var formData = new FormData();\r\n      formData.append(\"user_created\",     me.usuario.idusuario);\r\n      formData.append(\"codigo\",           codigosEnviar);\r\n      me.$vs.loading();\r\n      //SE GENERA LOS CODIGOS PERO NO SE VERIFICA CON LA BASE\r\n      this.$http.post(this.$server_url + 'paquetes/paquetes', formData)\r\n      .then(res => {\r\n        //porcentaje\r\n        me.arregloCodigos           = []\r\n        me.arregloCodigos           = res.data.codigosGuardados\r\n        var porcentajeAnterior      = 0\r\n        porcentajeAnterior          = res.data.porcentajeAnterior\r\n        this.codigosNoIngresados    = res.data.codigosNoIngresadosAnterior;\r\n        this.porcentaje             = porcentajeAnterior\r\n        me.estadoProceso            = 2;\r\n        this.$vs.loading.close()\r\n        this.textAlertCant          = 'Se han guardado con éxito: ' + this.porcentaje + ' códigos.';\r\n        this.progressInterActivo    = '';\r\n        if(this.codigosNoIngresados > 0){\r\n          me.popupProblemas = true\r\n        }\r\n        me.exportToExcel()\r\n      })\r\n      .catch(function (error) {\r\n        this.$vs.loading.close()\r\n        alert('Error no existen códigos disponibles ' + error);\r\n      });\r\n    },\r\n    //METODOS PARA EXPORTAR EXCEL\r\n    exportToExcel() {\r\n      let me = this\r\n      let headerTitle = \"\"\r\n      let headerVal = \"\"\r\n        headerTitle = [\r\n          'codigo',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          'secuencia',\r\n          'imprimir',\r\n        ];\r\n        headerVal = [\r\n          'codigo',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          '',\r\n          ''\r\n        ];\r\n      let codigoSelectedMayus = this.arregloCodigos\r\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n        for (var key in codigoSelectedMayus[i]) {\r\n            if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n                codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n            }\r\n        }\r\n      }\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const list = codigoSelectedMayus\r\n        const data = this.formatJson(headerVal, list)\r\n        for (var i = 0; i < data.length; i++) {\r\n          data[i][6] = i+1\r\n          data[i][7] = 1\r\n        }\r\n        excel.export_json_to_excel({\r\n          header: headerTitle,\r\n          data,\r\n          filename: 'CodigosPaquete',\r\n          autoWidth: this.cellAutoWidth,\r\n          bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n        // this.textAlertCant  = '';\r\n        this.cantidad       = '';\r\n        this.codigoSelected = [];\r\n        this.exportado      = 1\r\n        me.$vs.notify({\r\n        text:'Se exporto corectamente',\r\n        color:'success',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => {\r\n            return v[j]\r\n        }))\r\n    },\r\n    clearFields() {\r\n        this.fileName = ''\r\n        this.cellAutoWidth = true\r\n        this.selectedFormat = 'xls'\r\n    },\r\n    openLoadingColor(libro) {\r\n      this.$vs.loading({\r\n          color: '#1A76F2'\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n"]}]}