{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\grafitex\\components\\GenerarCodigosGrafitex.vue?vue&type=style&index=0&id=ee79de3e&scoped=true&lang=css","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\grafitex\\components\\GenerarCodigosGrafitex.vue","mtime":1712682815666},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\n/*CSS IMPORTADOS*/\r\n.features {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.features li {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n.features li + * {\r\n  margin-top: 0.75rem;\r\n}\r\n.features .icon {\r\n  background-color: #1FCAC5;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  border-radius: 50%;\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n.features .icon svg {\r\n  width: 14px;\r\n  height: 14px;\r\n}\r\n.features + * {\r\n  margin-top: 1.25rem;\r\n}\r\n",{"version":3,"sources":["GenerarCodigosGrafitex.vue"],"names":[],"mappings":";AAmhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GenerarCodigosGrafitex.vue","sourceRoot":"src/views/codigos/grafitex/components","sourcesContent":["<template>\r\n  <div>\r\n    <!--SELECT LIBRO-->\r\n    <div class=\"vx-row\">\r\n      <div class=\"vx-col sm:w-1/2 w-full mb-2\">\r\n        <span>Serie:</span>\r\n        <v-select @input=\"getLibros()\" :options=\"arregloSeries\" :reduce=\"arregloSeries => arregloSeries\" label=\"nombre_serie\" class=\"w-full\" v-model=\"serieSelect\" />\r\n      </div>\r\n      <div class=\"vx-col sm:w-1/2 w-full mb-2\">\r\n        <span>Libro:</span>\r\n        <v-select @input=\"arregloCodigos = [];estadoContador();estadoProceso=0;exportado=0;\" :options=\"arregloLibros\" :reduce=\"arregloLibros => arregloLibros\" label=\"nombrelibro\" class=\"w-full\" v-model=\"libroSelect\" />\r\n      </div>\r\n    </div>\r\n    <p class=\"text-danger text-2xl font-bold mt-2 text-center\" v-if=\"msgError\">{{ msgError }}</p>\r\n    <br>\r\n    <!--TOTAL GUARDADOS-->\r\n    <div class=\"flex justify-center\" v-if=\"estadoProceso == 2\">\r\n      <ul class=\"features flex justify-center\" >\r\n        <li>\r\n          <span class=\"icon\">\r\n            <svg height=\"24\" width=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n              <path fill=\"currentColor\" d=\"M10 15.172l9.192-9.193 1.415 1.414L10 18l-6.364-6.364 1.414-1.414z\"></path>\r\n            </svg>\r\n          </span>\r\n          <span><strong>Códigos Activación Ingresados: {{ porcentajeA }} </strong></span>\r\n        </li>\r\n        <li>\r\n          <span class=\"icon\">\r\n            <svg height=\"24\" width=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n              <path fill=\"currentColor\" d=\"M10 15.172l9.192-9.193 1.415 1.414L10 18l-6.364-6.364 1.414-1.414z\"></path>\r\n            </svg>\r\n          </span>\r\n          <span><strong>Códigos Diágnostico Ingresados: {{ porcentajeD }} </strong></span>\r\n        </li>\r\n        <li>\r\n          <span class=\"icon\">\r\n            <svg height=\"24\" width=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n              <path fill=\"currentColor\" d=\"M10 15.172l9.192-9.193 1.415 1.414L10 18l-6.364-6.364 1.414-1.414z\"></path>\r\n            </svg>\r\n          </span>\r\n          <span><strong>Total Ingresados: {{ porcentajeA+ porcentajeD }} </strong></span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <br>\r\n    <!--FIN SELECT LIBRO-->\r\n    <vs-progress v-if=\"porcentaje === 100 && estadoProceso > 0\" :height=\"8\" :percent=\"porcentaje\" color=\"success\"></vs-progress>\r\n    <vs-progress v-if=\"progressInterActivo != ''\" indeterminate color=\"primary\"></vs-progress>\r\n    <p class=\"text-center text-success font-bold text-3xl mt-3\" v-if=\"exportado == 1\"><ion-icon name=\"star-outline\"></ion-icon> Se exporto el archivo <b>{{ filename }}</b></p>\r\n    <!--GENERAR CODIGOS-->\r\n    <div class=\"flex mt-5\" style=\"flex-wrap:wrap;\">\r\n      <!--DESPUES DE IMPRIMIR-->\r\n      <div v-if=\"exportado == 1\">\r\n        <ul class=\"flex mt-2\">\r\n          <li>\r\n            <vs-checkbox color=\"#49D18F\" disabled v-model=\"conActivacion\">Activación</vs-checkbox>\r\n          </li>\r\n          <li>\r\n            <vs-checkbox color=\"#49D18F\" disabled v-model=\"conDiagnostica\">Diagnóstica</vs-checkbox>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <!--ANTES DE IMPRIMIR-->\r\n      <div v-else>\r\n        <ul class=\"flex mt-2\">\r\n          <li>\r\n            <vs-checkbox color=\"#49D18F\" v-model=\"conActivacion\">Activación</vs-checkbox>\r\n          </li>\r\n          <li>\r\n            <vs-checkbox color=\"#49D18F\" v-model=\"conDiagnostica\">Diagnóstica</vs-checkbox>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <span class=\"mt-3 ml-5 font-bold\">Cantidad:</span>\r\n      <div class=\"mt-1\">\r\n        <vx-tooltip color=\"warning\" text=\"Ingrese la cantidad de códigos que desea generar (máximo 3000)\">\r\n          <vs-input type=\"number\" class=\"inputx ml-2\" @keyup.enter=\"generarCodigos(cantidad);\" style=\"width: 150px; text-align: center;margin-top:-3px;\" v-model=\"cantidad\" />\r\n        </vx-tooltip>\r\n      </div>\r\n      <div>\r\n        <vs-button color=\"primary\" class=\"generarBoton ml-4\" size=\"small\" style=\"font-size: 13px;margin-top: 5px;\" @click=\"generarCodigos(cantidad);\"  v-if=\"cantidad<=3000\">Generar Códigos</vs-button>\r\n      </div>\r\n      <div>\r\n        <div v-if=\"estadoProceso == 1 && arregloCodigos[0]\" style=\"display:flex;\">\r\n          <vs-button color=\"success\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;margin-top: 5px;\" @click=\"guardarCodigos(); estadoProceso = 0;\">Guardar</vs-button>\r\n          <vx-tooltip color=\"warning\" text=\"Generar codigos de barras\" style=\"margin-left:20px;border-radius:20px;\">\r\n          </vx-tooltip>\r\n        </div>\r\n        <vx-tooltip v-if=\"estadoProceso == 2\" color=\"warning\" text=\"Antes de exportar seleccione los codigos deseados.\">\r\n            <vs-button color=\"dark\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;margin-top: 5px;\" @click=\"generarNombreFile();exportToExcel();\">Exportar</vs-button>\r\n        </vx-tooltip>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"preCodigos.length > 0\" class=\"vx-row mt-3\">\r\n      <div >\r\n        <div v-for=\"(item,key) in preCodigos\" :key=\"key\">\r\n          <p>{{ item }}</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"ml-5\">\r\n        <div v-for=\"(item,key2) in preActivacion\" :key=\"key2\">\r\n          <p>{{ item }}</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"ml-4\">\r\n        <div v-for=\"(item,key3) in preCodigos\" :key=\"key3\">\r\n          <p>OR codigo='{{ item }}'</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!--TABLA-->\r\n    <!-- <b style=\"color: #0AD68C;\">{{ textAlertCant }}</b> -->\r\n    <vs-table pagination max-items=\"25\" search :data=\"arregloCodigos\">\r\n      <template slot=\"header\">\r\n        <ion-icon name=\"eye-off-outline\" v-if=\"preCodigos.length > 0\" @click=\"preCodigos = []\"></ion-icon>\r\n        <p @click=\"formatCode()\" v-if=\"usuario.name_usuario =='sguacan'\">\r\n          <vs-chip>Cantidad {{ arregloCodigos.length  }}</vs-chip>\r\n        </p>\r\n        <vs-chip v-else>Cantidad {{ arregloCodigos.length  }}</vs-chip>\r\n      </template>\r\n      <template slot=\"thead\">\r\n        <vs-th sort-key=\"codigo_activacion\"  v-if=\"conActivacion\">Código activación</vs-th>\r\n        <vs-th sort-key=\"codigo_diagnostico\" v-if=\"conDiagnostica\">Código diagnóstico</vs-th>\r\n        <vs-th sort-key=\"libro\">Libro</vs-th>\r\n        <vs-th sort-key=\"anio\">Año</vs-th>\r\n        <vs-th sort-key=\"contador\"          v-if=\"conActivacion\">Contador A.</vs-th>\r\n        <vs-th sort-key=\"contador\"          v-if=\"conDiagnostica\">Contador D.</vs-th>\r\n      </template>\r\n      <template slot-scope=\"{data}\">\r\n        <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n          <vs-td v-if=\"conActivacion\">\r\n              {{ data[indextr].codigo_activacion }}\r\n          </vs-td>\r\n          <vs-td v-if=\"conDiagnostica\">\r\n            {{ data[indextr].codigo_diagnostico }}\r\n          </vs-td>\r\n          <vs-td>\r\n            {{ data[indextr].libro }}\r\n          </vs-td>\r\n          <vs-td>\r\n            {{ data[indextr].anio }}\r\n          </vs-td>\r\n          <vs-td v-if=\"conActivacion\">\r\n            {{ data[indextr].contadorCodigoA }}\r\n          </vs-td>\r\n          <vs-td v-if=\"conDiagnostica\">\r\n            {{ data[indextr].contadorCodigoD }}\r\n          </vs-td>\r\n        </vs-tr>\r\n      </template>\r\n    </vs-table>\r\n    <!--MODAL-->\r\n    <!--MODAL PROBLEMA CODIGOS-->\r\n    <vs-popup classContent=\"popup-example\" title=\"códigos que no se pudieron ingresar\" :active.sync=\"popupProblemas\">\r\n      <vs-table multiple pagination max-items=\"10\" search :data=\"codigosNoIngresados\" v-if=\"popupProblemas\">\r\n        <template slot=\"header\">\r\n        </template>\r\n        <template slot=\"thead\">\r\n          <vs-th sort-key=\"codigo\">Código activación</vs-th>\r\n          <vs-th sort-key=\"codigo\">Código Diagnóstico</vs-th>\r\n          <vs-th sort-key=\"codigo\">Motivo</vs-th>\r\n        </template>\r\n        <template slot-scope=\"{data}\">\r\n          <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n            <vs-td :data=\"data[indextr].codigo_activacion\">\r\n                {{ data[indextr].codigo_activacion }}\r\n            </vs-td>\r\n            <vs-td :data=\"data[indextr].codigo_diagnostico\">\r\n              {{ data[indextr].codigo_diagnostico }}\r\n            </vs-td>\r\n            <vs-td :data=\"data[indextr].message\">\r\n              {{ data[indextr].message }}\r\n            </vs-td>\r\n          </vs-tr>\r\n        </template>\r\n      </vs-table>\r\n    </vs-popup>\r\n  </div>\r\n</template>\r\n<script>\r\nimport vSelect from 'vue-select'\r\nimport moment from 'moment'\r\nexport default{\r\n  data(){\r\n    return{\r\n      usuario:[],\r\n      arregloCodigos:[],\r\n      codigosNoIngresados:[],\r\n      cantidad:0,\r\n      estadoProceso:0,\r\n      porcentaje:0,\r\n      progressInterActivo:0,\r\n      textAlertCant:'',\r\n      popupProblemas:false,\r\n      //varaibles para exportar excel\r\n      fileName: null,\r\n      formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n      cellAutoWidth: true,\r\n      selectedFormat: 'xlsx',\r\n      exportado:0,\r\n      arregloSeries:[],\r\n      arregloLibros:[],\r\n      serieSelect:'',\r\n      libroSelect:'',\r\n      conActivacion:true,\r\n      conDiagnostica:true,\r\n      palabraDiagnostico:'P',\r\n      codeA:'',\r\n      codeD:'',\r\n      tipoCodigo:'1',\r\n      contadorActivacion:1,\r\n      contadorDiagnostico:1,\r\n      codigo_liquidacion:'',\r\n      msgError:'',\r\n      fecha:'',\r\n      preCodigos:[],\r\n      preActivacion:[],\r\n    }\r\n  },\r\n  components:{\r\n    vSelect,\r\n  },\r\n  created(){\r\n    let me = this;\r\n    me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n  },\r\n  mounted(){\r\n    let me = this;\r\n    me.getSeries()\r\n    // moment.lang(\"es\")\r\n    // me.day        = ().format('DD');\r\n    // me.mes        = moment().format('MMMM');\r\n    // me.year       = moment().format('YYYY')\r\n    // let preFecha  = me.day+'-'+me.mes+'-'+me.year\r\n    // me.fecha      = preFecha.toUpperCase()\r\n  },\r\n  methods:{\r\n    getSeries(){\r\n      let me = this;\r\n      this.$http.get(this.$server_url + 'series').then(res => {\r\n        this.arregloSeries = res.data;\r\n      })\r\n    },\r\n    getLibros(){\r\n      let me = this;\r\n      me.arregloLibros  = []\r\n      me.arregloCodigos = []\r\n      me.libroSelect    = ''\r\n      me.estadoProceso  = 0;\r\n      me.exportado      = 0;\r\n      if(me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined){\r\n        me.$vs.notify({\r\n        text:'Seleccione una serie por favor',\r\n        color:'warning',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n        return\r\n      }\r\n      this.$http.get(this.$server_url + 'libros_series/' + me.serieSelect.id_serie).then(res => {\r\n        this.arregloLibros  = res.data;\r\n      })\r\n    },\r\n    //obtener el estado del ultimo codigo el contador\r\n    estadoContador(){\r\n      let me = this;\r\n      if(me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined){\r\n        me.contadorActivacion  = 1\r\n        me.contadorDiagnostico = 1\r\n        return\r\n      }\r\n      this.$http.get(this.$server_url+'contadorCodigo?libro='+me.libroSelect.idLibro)\r\n      .then(function (res) {\r\n        me.contadorActivacion  = res.data.contador\r\n        me.contadorDiagnostico = res.data.contadorDiagnostica\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error + ' error');\r\n      })\r\n    },\r\n    //generar codigos\r\n    generarCodigos(fin) {\r\n      let me = this;\r\n      me.preCodigos     = []\r\n      me.preActivacion  = []\r\n      me.msgError = \"\"\r\n      if(me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined){\r\n        me.$vs.notify({\r\n        text:'Seleccione una serie por favor',\r\n        color:'warning',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n        return\r\n      }\r\n      if(me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined){\r\n        me.$vs.notify({\r\n        text:'Seleccione un libro por favor',\r\n        color:'warning',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n        return\r\n      }\r\n      this.codigo_liquidacion = me.libroSelect.codigo_liquidacion\r\n      if(me.codigo_liquidacion == null || me.codigo_liquidacion == \"null\" || me.codigo_liquidacion == \"SIN CODIGO\"){\r\n        me.msgError = \"Este libro no tiene código de liquidación, comuníquese con soporte\"\r\n        return\r\n      }\r\n      //activacion\r\n      this.codeA             = this.codigo_liquidacion + \"-\";\r\n      //diagnostico\r\n      this.codeD             = this.palabraDiagnostico+this.codigo_liquidacion + \"-\";\r\n      this.textAlertCant     = '';\r\n      this.exportado         = 0,\r\n      this.arregloCodigos    = []\r\n      this.estadoProceso     = 0\r\n      this.porcentajeA       = 0\r\n      this.porcentajeD       = 0\r\n      if (fin > 3000) {\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'Máximo 3000 códigos se puede generar para el excel'\r\n        })\r\n        return false;\r\n      }\r\n      if(fin == 0 ){\r\n        me.$vs.notify({\r\n          color: 'warning',\r\n          title: 'Mensaje',\r\n          text: 'Debe escribir al menos 1 código para generar'\r\n        })\r\n        return false;\r\n      }\r\n      me.arregloCodigos              = [];\r\n      let formData = new FormData();\r\n      formData.append('longitud',  this.serieSelect.longitud_codigo);\r\n      formData.append('codeA',     this.codeA);\r\n      formData.append('codeD',     this.codeD);\r\n      formData.append('cantidad',  fin);\r\n      me.$vs.loading();\r\n      this.$http.post(this.$server_url+'grafitex/generarCodigosGrafitex', formData)\r\n      .then(function (res) {\r\n        me.$vs.loading.close()\r\n        let datos         = res.data.codigos\r\n        datos.map(p => {\r\n          me.arregloCodigos.push({\r\n            codigo_activacion   : p.codigo_activacion,\r\n            codigo_diagnostico  : p.codigo_diagnostico,\r\n            libro               : me.libroSelect.nombre_imprimir,\r\n            serie               : me.serieSelect.nombre_serie,\r\n            anio                : me.libroSelect.year,\r\n            libro_idlibro       : me.libroSelect.idLibro,\r\n            contadorCodigoA     : '',\r\n            contadorCodigoD     : '',\r\n          });\r\n          me.generarNombreFile()\r\n        })\r\n        // codigos ahora contiene los códigos de activación y diagnóstico en fila\r\n        me.estadoProceso = 1;\r\n        me.$vs.notify({\r\n          color: 'primary',\r\n          title: 'Mensaje',\r\n          text: 'Codigos Cargados'\r\n        })\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error + ' error');\r\n        me.$vs.loading.close()\r\n      })\r\n    },\r\n    formatCode(){\r\n      let me = this\r\n      me.preCodigos     = []\r\n      me.preActivacion  = []\r\n      let nuevaData = me.arregloCodigos\r\n      nuevaData.forEach((dato) => {\r\n        me.preCodigos.push(dato.codigo_activacion);\r\n        me.preCodigos.push(dato.codigo_diagnostico);\r\n        me.preActivacion.push(dato.codigo_activacion);\r\n      });\r\n    },\r\n    generarNombreFile(){\r\n      let me = this;\r\n      const currentDate = new Date();\r\n      const currenFecha = moment(currentDate, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\r\n      me.fileName = `${this.arregloCodigos.length}c-${this.libroSelect.nombrelibro}-${currenFecha}`\r\n    },\r\n    //Guardar codigos en la BD\r\n    async guardarCodigos() {\r\n      let me = this;\r\n      this.progressInterActivo     = 1;\r\n      //tipoCodigo => 1 = activacion; 2 = diagnostica ; 3 = ambos\r\n      if(me.conActivacion   && !me.conDiagnostica)  me.tipoCodigo = 1\r\n      if(!me.conActivacion  && me.conDiagnostica)   me.tipoCodigo = 2\r\n      if(me.conActivacion   && me.conDiagnostica)   me.tipoCodigo = 3\r\n      //enviar solo activacion\r\n      if(me.tipoCodigo == 1){\r\n        me.arregloCodigos.forEach(p => {\r\n          p.codigo_diagnostico = '';\r\n        });\r\n      }\r\n      //enviar solo diagnostica\r\n      if(me.tipoCodigo == 2){\r\n        me.arregloCodigos.forEach(p => {\r\n          p.codigo_activacion = null;\r\n        });\r\n      }\r\n      this.openLoadingColor()\r\n      var formData = new FormData();\r\n      formData.append('tipoCodigo',           me.tipoCodigo)\r\n      formData.append(\"user_created\",         me.usuario.idusuario);\r\n      formData.append(\"data_codigos\",         JSON.stringify(me.arregloCodigos));\r\n      formData.append(\"contadorActivacion\",   me.contadorActivacion);\r\n      formData.append(\"contadorDiagnostico\",  me.contadorDiagnostico);\r\n      me.$vs.loading();\r\n      //SE GENERA LOS CODIGOS PERO NO SE VERIFICA CON LA BASE\r\n      this.$http.post(this.$server_url + 'grafitex/codigos', formData)\r\n      .then(res => {\r\n        //porcentaje\r\n        me.arregloCodigos           = []\r\n        me.arregloCodigos           = res.data.codigosGuardados\r\n        me.codigosNoIngresados      = res.data.codigosNoIngresados\r\n        me.porcentajeA              = res.data.porcentajeA\r\n        me.porcentajeD              = res.data.porcentajeD\r\n        me.estadoProceso            = 2;\r\n        me.codigos\r\n        this.$vs.loading.close()\r\n        this.progressInterActivo    = '';\r\n        if(this.codigosNoIngresados > 0){\r\n          me.popupProblemas         = true\r\n        }else{\r\n          me.exportToExcel()\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        this.$vs.loading.close()\r\n        alert('Error no existen códigos disponibles ' + error);\r\n      });\r\n    },\r\n    //METODOS PARA EXPORTAR EXCEL\r\n    exportToExcel() {\r\n      let me = this\r\n      //setear array\r\n      var printArray = []\r\n      me.arregloCodigos.forEach(element => {\r\n        var cal = new Object()\r\n        cal.activacion_barras   = \"*\"+element.codigo_activacion+\"*\"\r\n        cal.codigo_activacion   = element.codigo_activacion\r\n        cal.codigo_diagnostico  = element.codigo_diagnostico\r\n        cal.diagnostica_barras  = \"*\"+element.codigo_diagnostico+\"*\"\r\n        cal.libro               = element.libro\r\n        cal.contadorCodigoA     = element.contadorCodigoA +\" -\"\r\n        cal.contadorCodigoD     = element.contadorCodigoD +\" -\"\r\n        printArray.push(cal)\r\n     });\r\n      let headerTitle = \"\"\r\n      let headerVal = \"\"\r\n        headerTitle = [\r\n          'Activación barras',\r\n          'Código activación',\r\n          'Contador Activación',\r\n          'Activación',\r\n          'Diagnóstico barras',\r\n          'Prueba diagnóstico',\r\n          'Contador Diagnóstico',\r\n          'Diagnóstico',\r\n        ];\r\n        headerVal = [\r\n          'activacion_barras',\r\n          'codigo_activacion',\r\n          'contadorCodigoA',\r\n          '',\r\n          'diagnostica_barras',\r\n          'codigo_diagnostico',\r\n          'contadorCodigoD',\r\n          ''\r\n        ];\r\n      let codigoSelectedMayus = printArray\r\n      for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n        for (var key in codigoSelectedMayus[i]) {\r\n            if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n                codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n            }\r\n        }\r\n      }\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const list = codigoSelectedMayus\r\n        const data = this.formatJson(headerVal, list)\r\n        for (var i = 0; i < data.length; i++) {\r\n          data[i][3]   =\"Activación \"+me.libroSelect.nombre_imprimir\r\n          data[i][7]   =\"Diagnóstico \"+me.libroSelect.nombre_imprimir\r\n        }\r\n        excel.export_json_to_excel({\r\n          header: headerTitle,\r\n          data,\r\n          filename: this.fileName,\r\n          autoWidth: this.cellAutoWidth,\r\n          bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n        // this.textAlertCant  = '';\r\n        this.cantidad       = '';\r\n        this.exportado      = 1\r\n        me.$vs.notify({\r\n        text:'Se exporto corectamente',\r\n        color:'success',\r\n        iconPack: 'feather',\r\n        icon:'icon-check'})\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => {\r\n            return v[j]\r\n        }))\r\n    },\r\n    clearFields() {\r\n        this.fileName = ''\r\n        this.cellAutoWidth = true\r\n        this.selectedFormat = 'xls'\r\n    },\r\n    openLoadingColor(libro) {\r\n      this.$vs.loading({\r\n          color: '#1A76F2'\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n<style scoped>\r\n/*CSS IMPORTADOS*/\r\n.features {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.features li {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n.features li + * {\r\n  margin-top: 0.75rem;\r\n}\r\n.features .icon {\r\n  background-color: #1FCAC5;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  border-radius: 50%;\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n.features .icon svg {\r\n  width: 14px;\r\n  height: 14px;\r\n}\r\n.features + * {\r\n  margin-top: 1.25rem;\r\n}\r\n</style>\r\n\r\n"]}]}