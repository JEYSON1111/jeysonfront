{"remainingRequest":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\GenerarCodigos\\GenerarCodigos.vue?vue&type=style&index=0&id=49961745&scoped=true&lang=css","dependencies":[{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\src\\views\\codigos\\components\\GenerarCodigos\\GenerarCodigos.vue","mtime":1712682815619},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\PRY_NEW_JEYSON\\LOCAL\\plataformaprolipa_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n/*CSS IMPORTADOS*/\n.features {\n  display: flex;\n  flex-direction: column;\n}\n.features li {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.features li + * {\n  margin-top: 0.75rem;\n}\n.features .icon {\n  background-color: #1FCAC5;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n}\n.features .icon svg {\n  width: 14px;\n  height: 14px;\n}\n.features + * {\n  margin-top: 1.25rem;\n}\n",{"version":3,"sources":["GenerarCodigos.vue"],"names":[],"mappings":";AAyiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GenerarCodigos.vue","sourceRoot":"src/views/codigos/components/GenerarCodigos","sourcesContent":["<template>\r\n    <vx-card>\r\n      <!--SELECT LIBRO-->\r\n      <div class=\"vx-row\">\r\n        <div class=\"vx-col sm:w-1/2 w-full mb-2\">\r\n          <span>Serie:</span>\r\n          <v-select @input=\"getLibros()\" :options=\"arregloSeries\" :reduce=\"arregloSeries => arregloSeries\" label=\"nombre_serie\" class=\"w-full\" v-model=\"serieSelect\" />\r\n        </div>\r\n        <div class=\"vx-col sm:w-1/2 w-full mb-2\">\r\n          <span>Libro:</span>\r\n          <v-select @input=\"arregloCodigos = [];estadoProceso=0;exportado=0;\" :options=\"arregloLibros\" :reduce=\"arregloLibros => arregloLibros\" label=\"nombrelibro\" class=\"w-full\" v-model=\"libroSelect\" />\r\n        </div>\r\n      </div>\r\n      <p class=\"text-danger text-2xl font-bold mt-2 text-center\" v-if=\"msgError\">{{ msgError }}</p>\r\n      <br>\r\n      <!--TOTAL GUARDADOS-->\r\n      <div class=\"flex justify-center\" v-if=\"estadoProceso == 2\">\r\n        <ul class=\"features flex justify-center\" >\r\n          <li>\r\n            <span class=\"icon\">\r\n              <svg height=\"24\" width=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                <path fill=\"currentColor\" d=\"M10 15.172l9.192-9.193 1.415 1.414L10 18l-6.364-6.364 1.414-1.414z\"></path>\r\n              </svg>\r\n            </span>\r\n            <span v-if=\"tipoCodigo == 0\"><strong>Códigos Activación Ingresados: {{ porcentajeA }} </strong></span>\r\n            <span v-if=\"tipoCodigo == 1\"><strong>Códigos Diagnóstico Ingresados: {{ porcentajeA }} </strong></span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <br>\r\n      <!--FIN SELECT LIBRO-->\r\n      <vs-progress v-if=\"porcentaje === 100 && estadoProceso > 0\" :height=\"8\" :percent=\"porcentaje\" color=\"success\"></vs-progress>\r\n      <vs-progress v-if=\"progressInterActivo != ''\" indeterminate color=\"primary\"></vs-progress>\r\n      <p class=\"text-center text-success font-bold text-3xl mt-3\" v-if=\"exportado == 1\"><ion-icon name=\"star-outline\"></ion-icon> Se exporto el archivo <b>{{ filename }}</b></p>\r\n      <!--GENERAR CODIGOS-->\r\n      <div class=\"flex mt-5\" style=\"flex-wrap:wrap;\">\r\n        <span class=\"mt-3 ml-5 font-bold\">Cantidad:</span>\r\n        <div class=\"mt-1\">\r\n          <vx-tooltip color=\"warning\" text=\"Ingrese la cantidad de códigos que desea generar (máximo 3000)\">\r\n            <vs-input type=\"number\" class=\"inputx ml-2\" min=\"1\" max=\"3000\" @keyup.enter=\"generarCodigos(cantidad);\" style=\"width: 150px; text-align: center;margin-top:-3px;\" v-model=\"cantidad\" />\r\n          </vx-tooltip>\r\n        </div>\r\n        <div class=\"ml-3 mt-1\">\r\n          <vs-button color=\"primary\" class=\"generarBoton mr-2\" size=\"small\" style=\"font-size: 13px;\" @click=\"tipoCodigo = 0;generarCodigos(cantidad);estadoContador();\"  v-if=\"cantidad<=10000\">Generar Códigos Activación</vs-button>\r\n          <vs-button color=\"warning\" class=\"generarBoton mr-2\" size=\"small\" style=\"font-size: 13px;\" @click=\"tipoCodigo = 1;generarCodigos(cantidad);estadoContador();\"  v-if=\"cantidad<=10000\">Generar Códigos Diagnóstico</vs-button>\r\n          <vs-button color=\"danger\" size=\"small\" style=\"font-size: 13px;\" v-if=\"cantidad>10000\">Cantidad excede los 10000</vs-button>\r\n        </div>\r\n        <div>\r\n          <div v-if=\"estadoProceso == 1 && arregloCodigos[0]\" style=\"display:flex;\">\r\n            <vs-button color=\"success\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;margin-top: 5px;\" @click=\"guardarCodigos(); estadoProceso = 0;\">Guardar</vs-button>\r\n            <vx-tooltip color=\"warning\" text=\"Generar codigos de barras\" style=\"margin-left:20px;border-radius:20px;\">\r\n            </vx-tooltip>\r\n          </div>\r\n          <vx-tooltip v-if=\"estadoProceso == 2\" color=\"warning\" text=\"Antes de exportar seleccione los codigos deseados.\">\r\n              <vs-button color=\"dark\" size=\"small\" class=\"ml-5\" style=\"font-size: 14px;margin-top: 5px;\" @click=\"generarNombreFile();exportToExcel();\">Exportar</vs-button>\r\n          </vx-tooltip>\r\n        </div>\r\n      </div>\r\n      <div v-if=\"preCodigos.length > 0\" class=\"vx-row mt-3\">\r\n        <div >\r\n          <div v-for=\"(item,key) in preCodigos\" :key=\"key\">\r\n            <p>{{ item }}</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"ml-5\">\r\n          <div v-for=\"(item,key2) in preActivacion\" :key=\"key2\">\r\n            <p>{{ item }}</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"ml-4\">\r\n          <div v-for=\"(item,key3) in preCodigos\" :key=\"key3\">\r\n            <p>OR codigo='{{ item }}'</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!--TABLA-->\r\n      <!-- <b style=\"color: #0AD68C;\">{{ textAlertCant }}</b> -->\r\n      <vs-table pagination max-items=\"25\" search :data=\"arregloCodigos\">\r\n        <template slot=\"header\">\r\n          <ion-icon name=\"eye-off-outline\" v-if=\"preCodigos.length > 0\" @click=\"preCodigos = []\"></ion-icon>\r\n          <p @click=\"formatCode()\">\r\n            <vs-chip>Cantidad {{ arregloCodigos.length  }}</vs-chip>\r\n          </p>\r\n        </template>\r\n        <template slot=\"thead\">\r\n          <vs-th sort-key=\"codigo\">Código </vs-th>\r\n          <vs-th sort-key=\"libro\">Libro</vs-th>\r\n          <vs-th sort-key=\"libro\">Serie</vs-th>\r\n          <vs-th sort-key=\"anio\">Año</vs-th>\r\n          <vs-th sort-key=\"anio\">Tipo</vs-th>\r\n          <vs-th sort-key=\"contador\">Contador</vs-th>\r\n          <vs-th sort-key=\"secuencia\">secuencia</vs-th>\r\n          <vs-th sort-key=\"imprimir\">imprimir</vs-th>\r\n        </template>\r\n        <template slot-scope=\"{data}\">\r\n          <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n            <vs-td>\r\n              {{ data[indextr].codigo }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ data[indextr].libro }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ data[indextr].serie }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ data[indextr].anio }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ tipoCodigo == 0 ? 'CODIGO DE ACTIVACION DEL LIBRO' : 'PRUEBA DIAGNOSTICA' }}\r\n            </vs-td>\r\n            <vs-td>\r\n              {{ data[indextr].contadorCodigoA }}\r\n            </vs-td>\r\n            <vs-td :data=\"data[indextr]\">\r\n                {{ indextr+1 }}\r\n            </vs-td>\r\n            <vs-td>\r\n                1\r\n            </vs-td>\r\n          </vs-tr>\r\n        </template>\r\n      </vs-table>\r\n      <br><br><br><br><br>\r\n      <!--MODAL-->\r\n      <!--MODAL PROBLEMA CODIGOS-->\r\n      <vs-popup classContent=\"popup-example\" title=\"códigos que no se pudieron ingresar\" :active.sync=\"popupProblemas\">\r\n        <vs-table multiple pagination max-items=\"10\" search :data=\"codigosNoIngresados\" v-if=\"popupProblemas\">\r\n          <template slot=\"header\">\r\n          </template>\r\n          <template slot=\"thead\">\r\n            <vs-th sort-key=\"codigo\">Código activación</vs-th>\r\n            <vs-th sort-key=\"codigo\">Motivo</vs-th>\r\n          </template>\r\n          <template slot-scope=\"{data}\">\r\n            <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">\r\n              <vs-td :data=\"data[indextr].codigo\">\r\n                  {{ data[indextr].codigo }}\r\n              </vs-td>\r\n              <vs-td :data=\"data[indextr].message\">\r\n                {{ data[indextr].message }}\r\n              </vs-td>\r\n            </vs-tr>\r\n          </template>\r\n        </vs-table>\r\n      </vs-popup>\r\n    </vx-card>\r\n  </template>\r\n  <script>\r\n  import vSelect from 'vue-select'\r\n  import moment from 'moment'\r\n  export default{\r\n    data(){\r\n      return{\r\n        usuario:[],\r\n        arregloCodigos:[],\r\n        codigosNoIngresados:[],\r\n        cantidad:0,\r\n        estadoProceso:0,\r\n        porcentaje:0,\r\n        progressInterActivo:0,\r\n        textAlertCant:'',\r\n        popupProblemas:false,\r\n        //varaibles para exportar excel\r\n        fileName: null,\r\n        formats: ['xls', 'xlsx', 'csv', 'txt'],\r\n        cellAutoWidth: true,\r\n        selectedFormat: 'xlsx',\r\n        exportado:0,\r\n        arregloSeries:[],\r\n        arregloLibros:[],\r\n        serieSelect:'',\r\n        libroSelect:'',\r\n        conActivacion:true,\r\n        codeA:'',\r\n        contadorActivacion:1,\r\n        contadorDiagnostica:1,\r\n        codigo_liquidacion:'',\r\n        msgError:'',\r\n        fecha:'',\r\n        preCodigos:[],\r\n        preActivacion:[],\r\n        palabraDiagnostico:'P',\r\n      }\r\n    },\r\n    components:{\r\n      vSelect,\r\n    },\r\n    created(){\r\n      let me = this;\r\n      me.usuario = JSON.parse(localStorage.getItem(\"usuario\"))\r\n    },\r\n    mounted(){\r\n      let me = this;\r\n      me.getSeries()\r\n      moment.locale(\"es\")\r\n    me.day        = moment().format('DD');\r\n      me.mes        = moment().format('MMMM');\r\n      me.year       = moment().format('YYYY')\r\n      let preFecha  = me.day+'-'+me.mes+'-'+me.year\r\n      me.fecha      = preFecha.toUpperCase()\r\n    },\r\n    methods:{\r\n      getSeries(){\r\n        let me = this;\r\n        this.$http.get(this.$server_url + 'series').then(res => {\r\n          this.arregloSeries = res.data;\r\n        })\r\n      },\r\n      getLibros(){\r\n        let me = this;\r\n        me.arregloLibros  = []\r\n        me.arregloCodigos = []\r\n        me.libroSelect    = ''\r\n        me.estadoProceso  = 0;\r\n        me.exportado      = 0;\r\n        if(me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined){\r\n          me.$vs.notify({\r\n          text:'Seleccione una serie por favor',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return\r\n        }\r\n        this.$http.get(this.$server_url + 'libros_series/' + me.serieSelect.id_serie).then(res => {\r\n          this.arregloLibros  = res.data;\r\n        })\r\n      },\r\n      //obtener el estado del ultimo codigo el contador\r\n      estadoContador(){\r\n        let me = this;\r\n        if(me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined){\r\n          me.contadorActivacion  = 1\r\n          me.contadorDiagnostica = 1\r\n          return\r\n        }\r\n        this.$http.get(this.$server_url+'contadorCodigo?libro='+me.libroSelect.idLibro)\r\n        .then(function (res) {\r\n          me.contadorActivacion  = res.data.contador\r\n          me.contadorDiagnostica = res.data.contadorDiagnostica\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error + ' error');\r\n        })\r\n      },\r\n      //generar codigos\r\n      generarCodigos(fin) {\r\n        let me = this;\r\n        me.preCodigos     = []\r\n        me.preActivacion  = []\r\n        me.msgError = \"\"\r\n        if(me.serieSelect == null || me.serieSelect == \"\" || me.serieSelect == undefined){\r\n          me.$vs.notify({\r\n          text:'Seleccione una serie por favor',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return\r\n        }\r\n        if(me.libroSelect == null || me.libroSelect == \"\" || me.libroSelect == undefined){\r\n          me.$vs.notify({\r\n          text:'Seleccione un libro por favor',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n          return\r\n        }\r\n        this.codigo_liquidacion = me.libroSelect.codigo_liquidacion\r\n        if(me.codigo_liquidacion == null || me.codigo_liquidacion == \"null\" || me.codigo_liquidacion == \"SIN CODIGO\"){\r\n          me.msgError = \"Este libro no tiene código de liquidación, comuníquese con soporte\"\r\n          return\r\n        }\r\n        //activacion\r\n        this.codeA             = this.codigo_liquidacion + \"-\";\r\n        this.textAlertCant     = '';\r\n        this.exportado         = 0,\r\n        this.arregloCodigos    = []\r\n        this.estadoProceso     = 0\r\n        this.porcentajeA       = 0\r\n        if (fin > 3000) {\r\n          me.$vs.notify({\r\n            color: 'warning',\r\n            title: 'Mensaje',\r\n            text: 'Máximo 3000 códigos se puede generar para el excel'\r\n          })\r\n          return false;\r\n        }\r\n        if(fin == 0 ){\r\n          me.$vs.notify({\r\n            color: 'warning',\r\n            title: 'Mensaje',\r\n            text: 'Debe escribir al menos 1 código para generar'\r\n          })\r\n          return false;\r\n        }\r\n        //activacion\r\n        if(me.tipoCodigo == 0){\r\n          this.code = this.codigo_liquidacion + \"-\";\r\n        }\r\n        //diagnostico\r\n        if(me.tipoCodigo == 1){\r\n          this.code = this.palabraDiagnostico+this.codigo_liquidacion + \"-\";\r\n        }\r\n        me.arregloCodigos              = [];\r\n        let formData = new FormData();\r\n        formData.append('longitud',  this.serieSelect.longitud_codigo);\r\n        formData.append('code',     this.code);\r\n        formData.append('cantidad',  fin);\r\n        me.$vs.loading();\r\n        this.$http.post(this.$server_url+'generarCodigos', formData)\r\n        .then(function (res) {\r\n          me.$vs.loading.close()\r\n          let datos         = res.data.codigos\r\n          datos.map(p => {\r\n            me.arregloCodigos.push({\r\n              codigo              : p.codigo,\r\n              libro               : me.libroSelect.nombre_imprimir,\r\n              serie               : me.serieSelect.nombre_serie,\r\n              anio                : me.libroSelect.year,\r\n              libro_idlibro       : me.libroSelect.idLibro,\r\n              contadorCodigoA     : '',\r\n            });\r\n            me.generarNombreFile()\r\n          })\r\n          // codigos ahora contiene los códigos de activación\r\n          me.estadoProceso = 1;\r\n          me.$vs.notify({\r\n            color: 'primary',\r\n            title: 'Mensaje',\r\n            text: 'Codigos Cargados'\r\n          })\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error + ' error');\r\n          me.$vs.loading.close()\r\n        })\r\n      },\r\n      formatCode(){\r\n        let me = this\r\n        me.preCodigos     = []\r\n        me.preActivacion  = []\r\n        let nuevaData = me.arregloCodigos\r\n        nuevaData.forEach((dato) => {\r\n          me.preCodigos.push(dato.codigo);\r\n          me.preActivacion.push(dato.codigo);\r\n        });\r\n      },\r\n      generarNombreFile(){\r\n        let me = this;\r\n        //nombre file\r\n        //tipoCodigo => 0 = activacion; 1 prueba diagnostico\r\n        if(me.tipoCodigo == 0){\r\n          me.fileName = 'ACTIVACION-'+me.codigo_liquidacion+'-'+me.cantidad+'C-'+me.fecha\r\n        }else{\r\n          me.fileName = 'DIAGNOSTICO-'+me.codigo_liquidacion+'-'+me.cantidad+'C-'+me.fecha\r\n        }\r\n      },\r\n      // generarNombreFile(){\r\n      //   let me = this;\r\n      //   const currentDate = new Date();\r\n      //   const currenFecha = moment(currentDate, 'DD/MM/YYYY HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\r\n      //   me.fileName = `${this.arregloCodigos.length}c-${this.libroSelect.nombre}-${currenFecha}`\r\n      // },\r\n      //Guardar codigos en la BD\r\n      async guardarCodigos() {\r\n        let me = this;\r\n        this.progressInterActivo     = 1;\r\n        this.openLoadingColor()\r\n        var formData = new FormData();\r\n        formData.append(\"user_created\",         me.usuario.idusuario);\r\n        formData.append(\"data_codigos\",         JSON.stringify(me.arregloCodigos));\r\n        if(me.tipoCodigo == 0)                  { formData.append(\"contador\",   me.contadorActivacion); }\r\n        if(me.tipoCodigo == 1)                  { formData.append(\"contador\",   me.contadorDiagnostica);\r\n        }\r\n        formData.append(\"prueba_diagnostica\",   me.tipoCodigo);\r\n        me.$vs.loading();\r\n        this.$http.post(this.$server_url + 'guardarCodigos2', formData)\r\n        .then(res => {\r\n          this.$vs.loading.close()\r\n          //porcentaje\r\n          me.arregloCodigos           = []\r\n          me.arregloCodigos           = res.data.codigosGuardados\r\n          me.codigosNoIngresados      = res.data.codigosNoIngresados\r\n          me.porcentajeA              = res.data.porcentajeA\r\n          me.estadoProceso            = 2;\r\n          me.codigos\r\n          this.progressInterActivo    = '';\r\n          if(this.codigosNoIngresados > 0){\r\n            me.popupProblemas         = true\r\n          }else{\r\n            me.exportToExcel()\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          this.$vs.loading.close()\r\n          alert('Error no existen códigos disponibles ' + error);\r\n        });\r\n      },\r\n      //METODOS PARA EXPORTAR EXCEL\r\n      exportToExcel() {\r\n        let me = this\r\n        let headerTitle = \"\"\r\n        let headerVal = \"\"\r\n          headerTitle = ['codigo', 'libro', 'serie', 'año','Tipo', 'contador','secuencia','imprimir'];\r\n          headerVal = ['codigo', 'libro', 'serie', 'anio','', 'contadorCodigoA','',''];\r\n        let codigoSelectedMayus = this.arregloCodigos\r\n        for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n          for (var key in codigoSelectedMayus[i]) {\r\n              if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n                codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n              }\r\n          }\r\n        }\r\n        import('@/vendor/Export2Excel').then(excel => {\r\n          const list = codigoSelectedMayus\r\n          const data = this.formatJson(headerVal, list)\r\n          for (var i = 0; i < data.length; i++) {\r\n            data[i][4] = me.tipoCodigo == 0 ? 'CODIGO DE ACTIVACION DEL LIBRO': 'PRUEBA DIAGNOSTICA'\r\n            data[i][6] = i+1\r\n            data[i][7] = 1\r\n          }\r\n          excel.export_json_to_excel({\r\n            header: headerTitle,\r\n            data,\r\n            filename: this.fileName,\r\n            autoWidth: this.cellAutoWidth,\r\n            bookType: this.selectedFormat\r\n          })\r\n          this.clearFields()\r\n          this.guardarActivo = '';\r\n          this.generarActivo = ' ';\r\n          this.textAlertCant = '';\r\n          // this.cantidad = '';\r\n          this.codigoSelected = [];\r\n          this.exportado      = 1\r\n          me.$vs.notify({\r\n          text:'Se exporto corectamente',\r\n          color:'success',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'})\r\n        })\r\n      },\r\n      // exportToExcel() {\r\n      //   let me = this\r\n      //   //setear array\r\n      //   var printArray = []\r\n      //   me.arregloCodigos.forEach(element => {\r\n      //     var cal = new Object()\r\n      //     cal.activacion_barras   = \"*\"+element.codigo_activacion+\"*\"\r\n      //     cal.codigo_activacion   = element.codigo_activacion\r\n      //     cal.libro               = element.libro\r\n      //     cal.contadorCodigoA     = element.contadorCodigoA +\" -\"\r\n      //     printArray.push(cal)\r\n      //  });\r\n      //   let headerTitle = \"\"\r\n      //   let headerVal = \"\"\r\n      //     headerTitle = [\r\n      //       'Activación barras',\r\n      //       'Código activación',\r\n      //       'Contador Activación',\r\n      //       'Activación',\r\n      //     ];\r\n      //     headerVal = [\r\n      //       'activacion_barras',\r\n      //       'codigo_activacion',\r\n      //       'contadorCodigoA',\r\n      //       '',\r\n      //     ];\r\n      //   let codigoSelectedMayus = printArray\r\n      //   for (var i = 0; i < codigoSelectedMayus.length; i++) {\r\n      //     for (var key in codigoSelectedMayus[i]) {\r\n      //         if (typeof codigoSelectedMayus[i][key] == \"string\") {\r\n      //             codigoSelectedMayus[i][key] = codigoSelectedMayus[i][key].toUpperCase();\r\n      //         }\r\n      //     }\r\n      //   }\r\n      //   import('@/vendor/Export2Excel').then(excel => {\r\n      //     const list = codigoSelectedMayus\r\n      //     const data = this.formatJson(headerVal, list)\r\n      //     for (var i = 0; i < data.length; i++) {\r\n      //       data[i][3]   =\"Activación \"+me.libroSelect.nombre_imprimir\r\n      //     }\r\n      //     excel.export_json_to_excel({\r\n      //       header: headerTitle,\r\n      //       data,\r\n      //       filename: this.fileName,\r\n      //       autoWidth: this.cellAutoWidth,\r\n      //       bookType: this.selectedFormat\r\n      //     })\r\n      //     this.clearFields()\r\n      //     // this.textAlertCant  = '';\r\n      //     this.cantidad       = '';\r\n      //     this.exportado      = 1\r\n      //     me.$vs.notify({\r\n      //     text:'Se exporto corectamente',\r\n      //     color:'success',\r\n      //     iconPack: 'feather',\r\n      //     icon:'icon-check'})\r\n      //   })\r\n      // },\r\n      formatJson(filterVal, jsonData) {\r\n          return jsonData.map(v => filterVal.map(j => {\r\n              return v[j]\r\n          }))\r\n      },\r\n      clearFields() {\r\n          this.fileName = ''\r\n          this.cellAutoWidth = true\r\n          this.selectedFormat = 'xls'\r\n      },\r\n      openLoadingColor(libro) {\r\n        this.$vs.loading({\r\n            color: '#1A76F2'\r\n        })\r\n      },\r\n    },\r\n  }\r\n  </script>\r\n  <style scoped>\r\n  /*CSS IMPORTADOS*/\r\n  .features {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  .features li {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n  }\r\n  .features li + * {\r\n    margin-top: 0.75rem;\r\n  }\r\n  .features .icon {\r\n    background-color: #1FCAC5;\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #fff;\r\n    border-radius: 50%;\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n  .features .icon svg {\r\n    width: 14px;\r\n    height: 14px;\r\n  }\r\n  .features + * {\r\n    margin-top: 1.25rem;\r\n  }\r\n  </style>\r\n\r\n"]}]}